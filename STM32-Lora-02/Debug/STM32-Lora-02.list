
STM32-Lora-02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f28  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  08008038  08008038  00009038  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084e4  080084e4  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080084e4  080084e4  000094e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084ec  080084ec  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084ec  080084ec  000094ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080084f0  080084f0  000094f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080084f4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  200001d4  080086c8  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  080086c8  0000a3f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007665  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ab5  00000000  00000000  00011862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000880  00000000  00000000  00013318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000064c  00000000  00000000  00013b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183e7  00000000  00000000  000141e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009c3f  00000000  00000000  0002c5cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008891d  00000000  00000000  0003620a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000beb27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035f4  00000000  00000000  000beb6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000c2160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008020 	.word	0x08008020

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08008020 	.word	0x08008020

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000bd4:	b4b0      	push	{r4, r5, r7}
 8000bd6:	b08f      	sub	sp, #60	@ 0x3c
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000bdc:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8000be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8000be2:	2307      	movs	r3, #7
 8000be4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000be8:	2307      	movs	r3, #7
 8000bea:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 8000bf4:	23ff      	movs	r3, #255	@ 0xff
 8000bf6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000bfa:	2364      	movs	r3, #100	@ 0x64
 8000bfc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8000c00:	2308      	movs	r3, #8
 8000c02:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	461d      	mov	r5, r3
 8000c08:	f107 040c 	add.w	r4, r7, #12
 8000c0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c14:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000c18:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	373c      	adds	r7, #60	@ 0x3c
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bcb0      	pop	{r4, r5, r7}
 8000c24:	4770      	bx	lr

08000c26 <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6898      	ldr	r0, [r3, #8]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	899b      	ldrh	r3, [r3, #12]
 8000c36:	2200      	movs	r2, #0
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f001 fc47 	bl	80024cc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c3e:	2001      	movs	r0, #1
 8000c40:	f000 ffa6 	bl	8001b90 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6898      	ldr	r0, [r3, #8]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	899b      	ldrh	r3, [r3, #12]
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f001 fc3c 	bl	80024cc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000c54:	2064      	movs	r0, #100	@ 0x64
 8000c56:	f000 ff9b 	bl	8001b90 <HAL_Delay>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b084      	sub	sp, #16
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
 8000c6a:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f000 fa12 	bl	8001098 <LoRa_read>
 8000c74:	4603      	mov	r3, r0
 8000c76:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000c78:	7bbb      	ldrb	r3, [r7, #14]
 8000c7a:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d107      	bne.n	8000c92 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000c82:	7bbb      	ldrb	r3, [r7, #14]
 8000c84:	f023 0307 	bic.w	r3, r3, #7
 8000c88:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	61da      	str	r2, [r3, #28]
 8000c90:	e03e      	b.n	8000d10 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d10c      	bne.n	8000cb2 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000c98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000c9c:	f023 0307 	bic.w	r3, r3, #7
 8000ca0:	b25b      	sxtb	r3, r3
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	b25b      	sxtb	r3, r3
 8000ca8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2201      	movs	r2, #1
 8000cae:	61da      	str	r2, [r3, #28]
 8000cb0:	e02e      	b.n	8000d10 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	2b03      	cmp	r3, #3
 8000cb6:	d10c      	bne.n	8000cd2 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000cb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000cbc:	f023 0307 	bic.w	r3, r3, #7
 8000cc0:	b25b      	sxtb	r3, r3
 8000cc2:	f043 0303 	orr.w	r3, r3, #3
 8000cc6:	b25b      	sxtb	r3, r3
 8000cc8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2203      	movs	r2, #3
 8000cce:	61da      	str	r2, [r3, #28]
 8000cd0:	e01e      	b.n	8000d10 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	2b05      	cmp	r3, #5
 8000cd6:	d10c      	bne.n	8000cf2 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000cd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000cdc:	f023 0307 	bic.w	r3, r3, #7
 8000ce0:	b25b      	sxtb	r3, r3
 8000ce2:	f043 0305 	orr.w	r3, r3, #5
 8000ce6:	b25b      	sxtb	r3, r3
 8000ce8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2205      	movs	r2, #5
 8000cee:	61da      	str	r2, [r3, #28]
 8000cf0:	e00e      	b.n	8000d10 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	2b06      	cmp	r3, #6
 8000cf6:	d10b      	bne.n	8000d10 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000cf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000cfc:	f023 0307 	bic.w	r3, r3, #7
 8000d00:	b25b      	sxtb	r3, r3
 8000d02:	f043 0306 	orr.w	r3, r3, #6
 8000d06:	b25b      	sxtb	r3, r3
 8000d08:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2206      	movs	r2, #6
 8000d0e:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	461a      	mov	r2, r3
 8000d14:	2101      	movs	r1, #1
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f000 f9d8 	bl	80010cc <LoRa_write>
	//HAL_Delay(10);
}
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	4613      	mov	r3, r2
 8000d32:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	6818      	ldr	r0, [r3, #0]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	889b      	ldrh	r3, [r3, #4]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f001 fbc4 	bl	80024cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	6998      	ldr	r0, [r3, #24]
 8000d48:	88fa      	ldrh	r2, [r7, #6]
 8000d4a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000d4e:	68b9      	ldr	r1, [r7, #8]
 8000d50:	f002 f8ec 	bl	8002f2c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000d54:	bf00      	nop
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	699b      	ldr	r3, [r3, #24]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f002 fcec 	bl	8003738 <HAL_SPI_GetState>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d1f7      	bne.n	8000d56 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	6998      	ldr	r0, [r3, #24]
 8000d6a:	8b3a      	ldrh	r2, [r7, #24]
 8000d6c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000d70:	6839      	ldr	r1, [r7, #0]
 8000d72:	f002 fa1f 	bl	80031b4 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000d76:	bf00      	nop
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f002 fcdb 	bl	8003738 <HAL_SPI_GetState>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d1f7      	bne.n	8000d78 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	6818      	ldr	r0, [r3, #0]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	889b      	ldrh	r3, [r3, #4]
 8000d90:	2201      	movs	r2, #1
 8000d92:	4619      	mov	r1, r3
 8000d94:	f001 fb9a 	bl	80024cc <HAL_GPIO_WritePin>
}
 8000d98:	bf00      	nop
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	603b      	str	r3, [r7, #0]
 8000dac:	4613      	mov	r3, r2
 8000dae:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	6818      	ldr	r0, [r3, #0]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	889b      	ldrh	r3, [r3, #4]
 8000db8:	2200      	movs	r2, #0
 8000dba:	4619      	mov	r1, r3
 8000dbc:	f001 fb86 	bl	80024cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	6998      	ldr	r0, [r3, #24]
 8000dc4:	88fa      	ldrh	r2, [r7, #6]
 8000dc6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000dca:	68b9      	ldr	r1, [r7, #8]
 8000dcc:	f002 f8ae 	bl	8002f2c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000dd0:	bf00      	nop
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f002 fcae 	bl	8003738 <HAL_SPI_GetState>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d1f7      	bne.n	8000dd2 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	6998      	ldr	r0, [r3, #24]
 8000de6:	8b3a      	ldrh	r2, [r7, #24]
 8000de8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000dec:	6839      	ldr	r1, [r7, #0]
 8000dee:	f002 f89d 	bl	8002f2c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000df2:	bf00      	nop
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f002 fc9d 	bl	8003738 <HAL_SPI_GetState>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d1f7      	bne.n	8000df4 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	6818      	ldr	r0, [r3, #0]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	889b      	ldrh	r3, [r3, #4]
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f001 fb5c 	bl	80024cc <HAL_GPIO_WritePin>
}
 8000e14:	bf00      	nop
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	460b      	mov	r3, r1
 8000e26:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000e28:	2126      	movs	r1, #38	@ 0x26
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f000 f934 	bl	8001098 <LoRa_read>
 8000e30:	4603      	mov	r3, r0
 8000e32:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8000e34:	78fb      	ldrb	r3, [r7, #3]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d004      	beq.n	8000e44 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000e3a:	7bbb      	ldrb	r3, [r7, #14]
 8000e3c:	f043 0308 	orr.w	r3, r3, #8
 8000e40:	73fb      	strb	r3, [r7, #15]
 8000e42:	e003      	b.n	8000e4c <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8000e44:	7bbb      	ldrb	r3, [r7, #14]
 8000e46:	f023 0308 	bic.w	r3, r3, #8
 8000e4a:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	2126      	movs	r1, #38	@ 0x26
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f000 f93a 	bl	80010cc <LoRa_write>
	HAL_Delay(10);
 8000e58:	200a      	movs	r0, #10
 8000e5a:	f000 fe99 	bl	8001b90 <HAL_Delay>
}
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b096      	sub	sp, #88	@ 0x58
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8000e70:	4a17      	ldr	r2, [pc, #92]	@ (8000ed0 <LoRa_setAutoLDO+0x68>)
 8000e72:	f107 0308 	add.w	r3, r7, #8
 8000e76:	4611      	mov	r1, r2
 8000e78:	2250      	movs	r2, #80	@ 0x50
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f003 fd8f 	bl	800499e <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000e86:	461a      	mov	r2, r3
 8000e88:	2301      	movs	r3, #1
 8000e8a:	4093      	lsls	r3, r2
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fab9 	bl	8000404 <__aeabi_i2d>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	3358      	adds	r3, #88	@ 0x58
 8000e9c:	443b      	add	r3, r7
 8000e9e:	3b50      	subs	r3, #80	@ 0x50
 8000ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea4:	f7ff fc42 	bl	800072c <__aeabi_ddiv>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	460b      	mov	r3, r1
 8000eac:	4610      	mov	r0, r2
 8000eae:	4619      	mov	r1, r3
 8000eb0:	f7ff fdc2 	bl	8000a38 <__aeabi_d2iz>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b10      	cmp	r3, #16
 8000eb8:	bfcc      	ite	gt
 8000eba:	2301      	movgt	r3, #1
 8000ebc:	2300      	movle	r3, #0
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff ffaa 	bl	8000e1c <LoRa_setLowDaraRateOptimization>
}
 8000ec8:	bf00      	nop
 8000eca:	3758      	adds	r7, #88	@ 0x58
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	08008038 	.word	0x08008038

08000ed4 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	04db      	lsls	r3, r3, #19
 8000ee2:	115b      	asrs	r3, r3, #5
 8000ee4:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	0c1b      	lsrs	r3, r3, #16
 8000eea:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8000eec:	7afb      	ldrb	r3, [r7, #11]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	2106      	movs	r1, #6
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f000 f8ea 	bl	80010cc <LoRa_write>
	HAL_Delay(5);
 8000ef8:	2005      	movs	r0, #5
 8000efa:	f000 fe49 	bl	8001b90 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	0a1b      	lsrs	r3, r3, #8
 8000f02:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8000f04:	7afb      	ldrb	r3, [r7, #11]
 8000f06:	461a      	mov	r2, r3
 8000f08:	2107      	movs	r1, #7
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f000 f8de 	bl	80010cc <LoRa_write>
	HAL_Delay(5);
 8000f10:	2005      	movs	r0, #5
 8000f12:	f000 fe3d 	bl	8001b90 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000f1a:	7afb      	ldrb	r3, [r7, #11]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	2108      	movs	r1, #8
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f000 f8d3 	bl	80010cc <LoRa_write>
	HAL_Delay(5);
 8000f26:	2005      	movs	r0, #5
 8000f28:	f000 fe32 	bl	8001b90 <HAL_Delay>
}
 8000f2c:	bf00      	nop
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	2b0c      	cmp	r3, #12
 8000f42:	dd01      	ble.n	8000f48 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000f44:	230c      	movs	r3, #12
 8000f46:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	2b06      	cmp	r3, #6
 8000f4c:	dc01      	bgt.n	8000f52 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8000f4e:	2307      	movs	r3, #7
 8000f50:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000f52:	211e      	movs	r1, #30
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f000 f89f 	bl	8001098 <LoRa_read>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000f5e:	200a      	movs	r0, #10
 8000f60:	f000 fe16 	bl	8001b90 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	011b      	lsls	r3, r3, #4
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	f003 030f 	and.w	r3, r3, #15
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	4413      	add	r3, r2
 8000f76:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000f78:	7bbb      	ldrb	r3, [r7, #14]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	211e      	movs	r1, #30
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f000 f8a4 	bl	80010cc <LoRa_write>
	HAL_Delay(10);
 8000f84:	200a      	movs	r0, #10
 8000f86:	f000 fe03 	bl	8001b90 <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ff6c 	bl	8000e68 <LoRa_setAutoLDO>
}
 8000f90:	bf00      	nop
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8000fa4:	78fb      	ldrb	r3, [r7, #3]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	2109      	movs	r1, #9
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 f88e 	bl	80010cc <LoRa_write>
	HAL_Delay(10);
 8000fb0:	200a      	movs	r0, #10
 8000fb2:	f000 fded 	bl	8001b90 <HAL_Delay>
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8000fd0:	78fb      	ldrb	r3, [r7, #3]
 8000fd2:	2b2c      	cmp	r3, #44	@ 0x2c
 8000fd4:	d801      	bhi.n	8000fda <LoRa_setOCP+0x1a>
		current = 45;
 8000fd6:	232d      	movs	r3, #45	@ 0x2d
 8000fd8:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8000fda:	78fb      	ldrb	r3, [r7, #3]
 8000fdc:	2bf0      	cmp	r3, #240	@ 0xf0
 8000fde:	d901      	bls.n	8000fe4 <LoRa_setOCP+0x24>
		current = 240;
 8000fe0:	23f0      	movs	r3, #240	@ 0xf0
 8000fe2:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8000fe4:	78fb      	ldrb	r3, [r7, #3]
 8000fe6:	2b78      	cmp	r3, #120	@ 0x78
 8000fe8:	d809      	bhi.n	8000ffe <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8000fea:	78fb      	ldrb	r3, [r7, #3]
 8000fec:	3b2d      	subs	r3, #45	@ 0x2d
 8000fee:	4a12      	ldr	r2, [pc, #72]	@ (8001038 <LoRa_setOCP+0x78>)
 8000ff0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ff4:	1052      	asrs	r2, r2, #1
 8000ff6:	17db      	asrs	r3, r3, #31
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	73fb      	strb	r3, [r7, #15]
 8000ffc:	e00b      	b.n	8001016 <LoRa_setOCP+0x56>
	else if(current <= 240)
 8000ffe:	78fb      	ldrb	r3, [r7, #3]
 8001000:	2bf0      	cmp	r3, #240	@ 0xf0
 8001002:	d808      	bhi.n	8001016 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8001004:	78fb      	ldrb	r3, [r7, #3]
 8001006:	331e      	adds	r3, #30
 8001008:	4a0b      	ldr	r2, [pc, #44]	@ (8001038 <LoRa_setOCP+0x78>)
 800100a:	fb82 1203 	smull	r1, r2, r2, r3
 800100e:	1092      	asrs	r2, r2, #2
 8001010:	17db      	asrs	r3, r3, #31
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	3320      	adds	r3, #32
 800101a:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	461a      	mov	r2, r3
 8001020:	210b      	movs	r1, #11
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f000 f852 	bl	80010cc <LoRa_write>
	HAL_Delay(10);
 8001028:	200a      	movs	r0, #10
 800102a:	f000 fdb1 	bl	8001b90 <HAL_Delay>
}
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	66666667 	.word	0x66666667

0800103c <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001044:	211e      	movs	r1, #30
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f000 f826 	bl	8001098 <LoRa_read>
 800104c:	4603      	mov	r3, r0
 800104e:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8001050:	7bfb      	ldrb	r3, [r7, #15]
 8001052:	f043 0307 	orr.w	r3, r3, #7
 8001056:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8001058:	7bbb      	ldrb	r3, [r7, #14]
 800105a:	461a      	mov	r2, r3
 800105c:	211e      	movs	r1, #30
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f000 f834 	bl	80010cc <LoRa_write>
	HAL_Delay(10);
 8001064:	200a      	movs	r0, #10
 8001066:	f000 fd93 	bl	8001b90 <HAL_Delay>
}
 800106a:	bf00      	nop
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <LoRa_setSyncWord>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSyncWord(LoRa* _LoRa, uint8_t syncword){
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	460b      	mov	r3, r1
 800107c:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegSyncWord, syncword);
 800107e:	78fb      	ldrb	r3, [r7, #3]
 8001080:	461a      	mov	r2, r3
 8001082:	2139      	movs	r1, #57	@ 0x39
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f821 	bl	80010cc <LoRa_write>
	HAL_Delay(10);
 800108a:	200a      	movs	r0, #10
 800108c:	f000 fd80 	bl	8001b90 <HAL_Delay>
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af02      	add	r7, sp, #8
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80010a4:	78fb      	ldrb	r3, [r7, #3]
 80010a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80010ae:	f107 030f 	add.w	r3, r7, #15
 80010b2:	f107 010e 	add.w	r1, r7, #14
 80010b6:	2201      	movs	r2, #1
 80010b8:	9200      	str	r2, [sp, #0]
 80010ba:	2201      	movs	r2, #1
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff fe31 	bl	8000d24 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af02      	add	r7, sp, #8
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	70fb      	strb	r3, [r7, #3]
 80010d8:	4613      	mov	r3, r2
 80010da:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80010dc:	78fb      	ldrb	r3, [r7, #3]
 80010de:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	73bb      	strb	r3, [r7, #14]
	data = value;
 80010e6:	78bb      	ldrb	r3, [r7, #2]
 80010e8:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80010ea:	f107 030f 	add.w	r3, r7, #15
 80010ee:	f107 010e 	add.w	r1, r7, #14
 80010f2:	2201      	movs	r2, #1
 80010f4:	9200      	str	r2, [sp, #0]
 80010f6:	2201      	movs	r2, #1
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff fe51 	bl	8000da0 <LoRa_writeReg>
	//HAL_Delay(5);
}
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8001106:	b580      	push	{r7, lr}
 8001108:	b086      	sub	sp, #24
 800110a:	af00      	add	r7, sp, #0
 800110c:	60f8      	str	r0, [r7, #12]
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	461a      	mov	r2, r3
 8001112:	460b      	mov	r3, r1
 8001114:	72fb      	strb	r3, [r7, #11]
 8001116:	4613      	mov	r3, r2
 8001118:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 800111a:	7afb      	ldrb	r3, [r7, #11]
 800111c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001120:	b2db      	uxtb	r3, r3
 8001122:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	6818      	ldr	r0, [r3, #0]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	889b      	ldrh	r3, [r3, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	4619      	mov	r1, r3
 8001130:	f001 f9cc 	bl	80024cc <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	6998      	ldr	r0, [r3, #24]
 8001138:	f107 0117 	add.w	r1, r7, #23
 800113c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001140:	2201      	movs	r2, #1
 8001142:	f001 fef3 	bl	8002f2c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001146:	bf00      	nop
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	4618      	mov	r0, r3
 800114e:	f002 faf3 	bl	8003738 <HAL_SPI_GetState>
 8001152:	4603      	mov	r3, r0
 8001154:	2b01      	cmp	r3, #1
 8001156:	d1f7      	bne.n	8001148 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6998      	ldr	r0, [r3, #24]
 800115c:	7abb      	ldrb	r3, [r7, #10]
 800115e:	b29a      	uxth	r2, r3
 8001160:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001164:	6879      	ldr	r1, [r7, #4]
 8001166:	f001 fee1 	bl	8002f2c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800116a:	bf00      	nop
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	4618      	mov	r0, r3
 8001172:	f002 fae1 	bl	8003738 <HAL_SPI_GetState>
 8001176:	4603      	mov	r3, r0
 8001178:	2b01      	cmp	r3, #1
 800117a:	d1f7      	bne.n	800116c <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	6818      	ldr	r0, [r3, #0]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	889b      	ldrh	r3, [r3, #4]
 8001184:	2201      	movs	r2, #1
 8001186:	4619      	mov	r1, r3
 8001188:	f001 f9a0 	bl	80024cc <HAL_GPIO_WritePin>
}
 800118c:	bf00      	nop
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]

	return 1;
 800119c:	2301      	movs	r3, #1
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr

080011a8 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	4611      	mov	r1, r2
 80011b4:	461a      	mov	r2, r3
 80011b6:	460b      	mov	r3, r1
 80011b8:	71fb      	strb	r3, [r7, #7]
 80011ba:	4613      	mov	r3, r2
 80011bc:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80011c4:	2101      	movs	r1, #1
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f7ff fd4b 	bl	8000c62 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 80011cc:	210e      	movs	r1, #14
 80011ce:	68f8      	ldr	r0, [r7, #12]
 80011d0:	f7ff ff62 	bl	8001098 <LoRa_read>
 80011d4:	4603      	mov	r3, r0
 80011d6:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80011d8:	7cfb      	ldrb	r3, [r7, #19]
 80011da:	461a      	mov	r2, r3
 80011dc:	210d      	movs	r1, #13
 80011de:	68f8      	ldr	r0, [r7, #12]
 80011e0:	f7ff ff74 	bl	80010cc <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	461a      	mov	r2, r3
 80011e8:	2122      	movs	r1, #34	@ 0x22
 80011ea:	68f8      	ldr	r0, [r7, #12]
 80011ec:	f7ff ff6e 	bl	80010cc <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	68ba      	ldr	r2, [r7, #8]
 80011f4:	2100      	movs	r1, #0
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f7ff ff85 	bl	8001106 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 80011fc:	2103      	movs	r1, #3
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f7ff fd2f 	bl	8000c62 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001204:	2112      	movs	r1, #18
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	f7ff ff46 	bl	8001098 <LoRa_read>
 800120c:	4603      	mov	r3, r0
 800120e:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8001210:	7cfb      	ldrb	r3, [r7, #19]
 8001212:	f003 0308 	and.w	r3, r3, #8
 8001216:	2b00      	cmp	r3, #0
 8001218:	d00a      	beq.n	8001230 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 800121a:	22ff      	movs	r2, #255	@ 0xff
 800121c:	2112      	movs	r1, #18
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f7ff ff54 	bl	80010cc <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8001224:	6979      	ldr	r1, [r7, #20]
 8001226:	68f8      	ldr	r0, [r7, #12]
 8001228:	f7ff fd1b 	bl	8000c62 <LoRa_gotoMode>
			return 1;
 800122c:	2301      	movs	r3, #1
 800122e:	e00f      	b.n	8001250 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8001230:	88bb      	ldrh	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	80bb      	strh	r3, [r7, #4]
 8001236:	88bb      	ldrh	r3, [r7, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d105      	bne.n	8001248 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 800123c:	6979      	ldr	r1, [r7, #20]
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f7ff fd0f 	bl	8000c62 <LoRa_gotoMode>
				return 0;
 8001244:	2300      	movs	r3, #0
 8001246:	e003      	b.n	8001250 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8001248:	2001      	movs	r0, #1
 800124a:	f000 fca1 	bl	8001b90 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 800124e:	e7d9      	b.n	8001204 <LoRa_transmit+0x5c>
	}
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ff97 	bl	8001194 <LoRa_isvalid>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 8096 	beq.w	800139a <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 800126e:	2100      	movs	r1, #0
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff fcf6 	bl	8000c62 <LoRa_gotoMode>
			HAL_Delay(10);
 8001276:	200a      	movs	r0, #10
 8001278:	f000 fc8a 	bl	8001b90 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 800127c:	2101      	movs	r1, #1
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff ff0a 	bl	8001098 <LoRa_read>
 8001284:	4603      	mov	r3, r0
 8001286:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8001288:	200a      	movs	r0, #10
 800128a:	f000 fc81 	bl	8001b90 <HAL_Delay>
			data = read | 0x80;
 800128e:	7bfb      	ldrb	r3, [r7, #15]
 8001290:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001294:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8001296:	7bbb      	ldrb	r3, [r7, #14]
 8001298:	461a      	mov	r2, r3
 800129a:	2101      	movs	r1, #1
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff ff15 	bl	80010cc <LoRa_write>
			HAL_Delay(100);
 80012a2:	2064      	movs	r0, #100	@ 0x64
 80012a4:	f000 fc74 	bl	8001b90 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	4619      	mov	r1, r3
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff fe10 	bl	8000ed4 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80012ba:	4619      	mov	r1, r3
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff fe6b 	bl	8000f98 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80012c8:	4619      	mov	r1, r3
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff fe78 	bl	8000fc0 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 80012d0:	2223      	movs	r2, #35	@ 0x23
 80012d2:	210c      	movs	r1, #12
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff fef9 	bl	80010cc <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff feae 	bl	800103c <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80012e6:	4619      	mov	r1, r3
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff fe23 	bl	8000f34 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 80012ee:	22ff      	movs	r2, #255	@ 0xff
 80012f0:	211f      	movs	r1, #31
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff feea 	bl	80010cc <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001302:	011b      	lsls	r3, r3, #4
 8001304:	b2da      	uxtb	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	b2db      	uxtb	r3, r3
 8001310:	4413      	add	r3, r2
 8001312:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8001314:	7bbb      	ldrb	r3, [r7, #14]
 8001316:	461a      	mov	r2, r3
 8001318:	211d      	movs	r1, #29
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff fed6 	bl	80010cc <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff fda1 	bl	8000e68 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800132a:	0a1b      	lsrs	r3, r3, #8
 800132c:	b29b      	uxth	r3, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	461a      	mov	r2, r3
 8001332:	2120      	movs	r1, #32
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff fec9 	bl	80010cc <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800133e:	b2db      	uxtb	r3, r3
 8001340:	461a      	mov	r2, r3
 8001342:	2121      	movs	r1, #33	@ 0x21
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff fec1 	bl	80010cc <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 800134a:	2140      	movs	r1, #64	@ 0x40
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff fea3 	bl	8001098 <LoRa_read>
 8001352:	4603      	mov	r3, r0
 8001354:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 800135c:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 800135e:	7bbb      	ldrb	r3, [r7, #14]
 8001360:	461a      	mov	r2, r3
 8001362:	2140      	movs	r1, #64	@ 0x40
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff feb1 	bl	80010cc <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 800136a:	2101      	movs	r1, #1
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff fc78 	bl	8000c62 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8001378:	200a      	movs	r0, #10
 800137a:	f000 fc09 	bl	8001b90 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 800137e:	2142      	movs	r1, #66	@ 0x42
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff fe89 	bl	8001098 <LoRa_read>
 8001386:	4603      	mov	r3, r0
 8001388:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	2b12      	cmp	r3, #18
 800138e:	d101      	bne.n	8001394 <LoRa_init+0x13c>
				return LORA_OK;
 8001390:	23c8      	movs	r3, #200	@ 0xc8
 8001392:	e004      	b.n	800139e <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 8001394:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8001398:	e001      	b.n	800139e <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 800139a:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a8:	b5b0      	push	{r4, r5, r7, lr}
 80013aa:	b08e      	sub	sp, #56	@ 0x38
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ae:	f000 fb8d 	bl	8001acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b2:	f000 f873 	bl	800149c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b6:	f000 f935 	bl	8001624 <MX_GPIO_Init>
  MX_SPI1_Init();
 80013ba:	f000 f8fd 	bl	80015b8 <MX_SPI1_Init>
  MX_ADC1_Init();
 80013be:	f000 f8bd 	bl	800153c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  // MODULE SETTINGS ----------------------------------------------
  myLoRa = newLoRa();
 80013c2:	4c31      	ldr	r4, [pc, #196]	@ (8001488 <main+0xe0>)
 80013c4:	463b      	mov	r3, r7
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fc04 	bl	8000bd4 <newLoRa>
 80013cc:	4625      	mov	r5, r4
 80013ce:	463c      	mov	r4, r7
 80013d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013d8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80013dc:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  myLoRa.hSPIx                 = &hspi1;
 80013e0:	4b29      	ldr	r3, [pc, #164]	@ (8001488 <main+0xe0>)
 80013e2:	4a2a      	ldr	r2, [pc, #168]	@ (800148c <main+0xe4>)
 80013e4:	619a      	str	r2, [r3, #24]
  myLoRa.CS_port               = NSS_GPIO_Port;
 80013e6:	4b28      	ldr	r3, [pc, #160]	@ (8001488 <main+0xe0>)
 80013e8:	4a29      	ldr	r2, [pc, #164]	@ (8001490 <main+0xe8>)
 80013ea:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin                = NSS_Pin;
 80013ec:	4b26      	ldr	r3, [pc, #152]	@ (8001488 <main+0xe0>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port            = RST_GPIO_Port;
 80013f2:	4b25      	ldr	r3, [pc, #148]	@ (8001488 <main+0xe0>)
 80013f4:	4a26      	ldr	r2, [pc, #152]	@ (8001490 <main+0xe8>)
 80013f6:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin             = RST_Pin;
 80013f8:	4b23      	ldr	r3, [pc, #140]	@ (8001488 <main+0xe0>)
 80013fa:	2202      	movs	r2, #2
 80013fc:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port			   = DIO0_GPIO_Port;
 80013fe:	4b22      	ldr	r3, [pc, #136]	@ (8001488 <main+0xe0>)
 8001400:	4a23      	ldr	r2, [pc, #140]	@ (8001490 <main+0xe8>)
 8001402:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin			   = DIO0_Pin;
 8001404:	4b20      	ldr	r3, [pc, #128]	@ (8001488 <main+0xe0>)
 8001406:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800140a:	829a      	strh	r2, [r3, #20]

  myLoRa.frequency             = 433;							  // default = 433 MHz
 800140c:	4b1e      	ldr	r3, [pc, #120]	@ (8001488 <main+0xe0>)
 800140e:	f240 12b1 	movw	r2, #433	@ 0x1b1
 8001412:	621a      	str	r2, [r3, #32]
  myLoRa.spredingFactor        = SF_7;							// default = SF_7
 8001414:	4b1c      	ldr	r3, [pc, #112]	@ (8001488 <main+0xe0>)
 8001416:	2207      	movs	r2, #7
 8001418:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  myLoRa.bandWidth			   = BW_125KHz;				  // default = BW_125KHz
 800141c:	4b1a      	ldr	r3, [pc, #104]	@ (8001488 <main+0xe0>)
 800141e:	2207      	movs	r2, #7
 8001420:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  myLoRa.crcRate			   = CR_4_5;						// default = CR_4_5
 8001424:	4b18      	ldr	r3, [pc, #96]	@ (8001488 <main+0xe0>)
 8001426:	2201      	movs	r2, #1
 8001428:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  myLoRa.power				   = POWER_20db;				// default = 20db
 800142c:	4b16      	ldr	r3, [pc, #88]	@ (8001488 <main+0xe0>)
 800142e:	22ff      	movs	r2, #255	@ 0xff
 8001430:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  myLoRa.overCurrentProtection = 120; 							// default = 100 mA
 8001434:	4b14      	ldr	r3, [pc, #80]	@ (8001488 <main+0xe0>)
 8001436:	2278      	movs	r2, #120	@ 0x78
 8001438:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  myLoRa.preamble			   = 8;		  					// default = 8;
 800143c:	4b12      	ldr	r3, [pc, #72]	@ (8001488 <main+0xe0>)
 800143e:	2208      	movs	r2, #8
 8001440:	851a      	strh	r2, [r3, #40]	@ 0x28

  LoRa_reset(&myLoRa);
 8001442:	4811      	ldr	r0, [pc, #68]	@ (8001488 <main+0xe0>)
 8001444:	f7ff fbef 	bl	8000c26 <LoRa_reset>
  LoRa_init(&myLoRa);
 8001448:	480f      	ldr	r0, [pc, #60]	@ (8001488 <main+0xe0>)
 800144a:	f7ff ff05 	bl	8001258 <LoRa_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  char*  send_data;
	  send_data = "Hello world!";
 800144e:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <main+0xec>)
 8001450:	637b      	str	r3, [r7, #52]	@ 0x34
	  LoRa_setSyncWord(&myLoRa,0x3A);
 8001452:	213a      	movs	r1, #58	@ 0x3a
 8001454:	480c      	ldr	r0, [pc, #48]	@ (8001488 <main+0xe0>)
 8001456:	f7ff fe0c 	bl	8001072 <LoRa_setSyncWord>
	  if(LoRa_transmit(&myLoRa, (uint8_t*)send_data, 12, 100) == 1){
 800145a:	2364      	movs	r3, #100	@ 0x64
 800145c:	220c      	movs	r2, #12
 800145e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001460:	4809      	ldr	r0, [pc, #36]	@ (8001488 <main+0xe0>)
 8001462:	f7ff fea1 	bl	80011a8 <LoRa_transmit>
 8001466:	4603      	mov	r3, r0
 8001468:	2b01      	cmp	r3, #1
 800146a:	d105      	bne.n	8001478 <main+0xd0>
	     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800146c:	2201      	movs	r2, #1
 800146e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001472:	4809      	ldr	r0, [pc, #36]	@ (8001498 <main+0xf0>)
 8001474:	f001 f82a 	bl	80024cc <HAL_GPIO_WritePin>
	  }
	  LoRa_transmit(&myLoRa, (uint8_t*)send_data, 12, 100);
 8001478:	2364      	movs	r3, #100	@ 0x64
 800147a:	220c      	movs	r2, #12
 800147c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800147e:	4802      	ldr	r0, [pc, #8]	@ (8001488 <main+0xe0>)
 8001480:	f7ff fe92 	bl	80011a8 <LoRa_transmit>
  {
 8001484:	e7e3      	b.n	800144e <main+0xa6>
 8001486:	bf00      	nop
 8001488:	20000278 	.word	0x20000278
 800148c:	20000220 	.word	0x20000220
 8001490:	40010c00 	.word	0x40010c00
 8001494:	08008088 	.word	0x08008088
 8001498:	40011000 	.word	0x40011000

0800149c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b094      	sub	sp, #80	@ 0x50
 80014a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014a6:	2228      	movs	r2, #40	@ 0x28
 80014a8:	2100      	movs	r1, #0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f003 f9e9 	bl	8004882 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014cc:	2302      	movs	r3, #2
 80014ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014d0:	2301      	movs	r3, #1
 80014d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014d4:	2310      	movs	r3, #16
 80014d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014d8:	2300      	movs	r3, #0
 80014da:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014e0:	4618      	mov	r0, r3
 80014e2:	f001 f80b 	bl	80024fc <HAL_RCC_OscConfig>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80014ec:	f000 f916 	bl	800171c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f0:	230f      	movs	r3, #15
 80014f2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001500:	2300      	movs	r3, #0
 8001502:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f001 fa78 	bl	8002a00 <HAL_RCC_ClockConfig>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001516:	f000 f901 	bl	800171c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800151a:	2302      	movs	r3, #2
 800151c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	4618      	mov	r0, r3
 8001526:	f001 fbc7 	bl	8002cb8 <HAL_RCCEx_PeriphCLKConfig>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001530:	f000 f8f4 	bl	800171c <Error_Handler>
  }
}
 8001534:	bf00      	nop
 8001536:	3750      	adds	r7, #80	@ 0x50
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800154c:	4b18      	ldr	r3, [pc, #96]	@ (80015b0 <MX_ADC1_Init+0x74>)
 800154e:	4a19      	ldr	r2, [pc, #100]	@ (80015b4 <MX_ADC1_Init+0x78>)
 8001550:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001552:	4b17      	ldr	r3, [pc, #92]	@ (80015b0 <MX_ADC1_Init+0x74>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001558:	4b15      	ldr	r3, [pc, #84]	@ (80015b0 <MX_ADC1_Init+0x74>)
 800155a:	2200      	movs	r2, #0
 800155c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800155e:	4b14      	ldr	r3, [pc, #80]	@ (80015b0 <MX_ADC1_Init+0x74>)
 8001560:	2200      	movs	r2, #0
 8001562:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001564:	4b12      	ldr	r3, [pc, #72]	@ (80015b0 <MX_ADC1_Init+0x74>)
 8001566:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800156a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800156c:	4b10      	ldr	r3, [pc, #64]	@ (80015b0 <MX_ADC1_Init+0x74>)
 800156e:	2200      	movs	r2, #0
 8001570:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001572:	4b0f      	ldr	r3, [pc, #60]	@ (80015b0 <MX_ADC1_Init+0x74>)
 8001574:	2201      	movs	r2, #1
 8001576:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001578:	480d      	ldr	r0, [pc, #52]	@ (80015b0 <MX_ADC1_Init+0x74>)
 800157a:	f000 fb2d 	bl	8001bd8 <HAL_ADC_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001584:	f000 f8ca 	bl	800171c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001588:	2300      	movs	r3, #0
 800158a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800158c:	2301      	movs	r3, #1
 800158e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	4619      	mov	r1, r3
 8001598:	4805      	ldr	r0, [pc, #20]	@ (80015b0 <MX_ADC1_Init+0x74>)
 800159a:	f000 fbf5 	bl	8001d88 <HAL_ADC_ConfigChannel>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80015a4:	f000 f8ba 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015a8:	bf00      	nop
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	200001f0 	.word	0x200001f0
 80015b4:	40012400 	.word	0x40012400

080015b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015bc:	4b17      	ldr	r3, [pc, #92]	@ (800161c <MX_SPI1_Init+0x64>)
 80015be:	4a18      	ldr	r2, [pc, #96]	@ (8001620 <MX_SPI1_Init+0x68>)
 80015c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015c2:	4b16      	ldr	r3, [pc, #88]	@ (800161c <MX_SPI1_Init+0x64>)
 80015c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015ca:	4b14      	ldr	r3, [pc, #80]	@ (800161c <MX_SPI1_Init+0x64>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015d0:	4b12      	ldr	r3, [pc, #72]	@ (800161c <MX_SPI1_Init+0x64>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015d6:	4b11      	ldr	r3, [pc, #68]	@ (800161c <MX_SPI1_Init+0x64>)
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015dc:	4b0f      	ldr	r3, [pc, #60]	@ (800161c <MX_SPI1_Init+0x64>)
 80015de:	2200      	movs	r2, #0
 80015e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	@ (800161c <MX_SPI1_Init+0x64>)
 80015e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015ea:	4b0c      	ldr	r3, [pc, #48]	@ (800161c <MX_SPI1_Init+0x64>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015f0:	4b0a      	ldr	r3, [pc, #40]	@ (800161c <MX_SPI1_Init+0x64>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015f6:	4b09      	ldr	r3, [pc, #36]	@ (800161c <MX_SPI1_Init+0x64>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015fc:	4b07      	ldr	r3, [pc, #28]	@ (800161c <MX_SPI1_Init+0x64>)
 80015fe:	2200      	movs	r2, #0
 8001600:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001602:	4b06      	ldr	r3, [pc, #24]	@ (800161c <MX_SPI1_Init+0x64>)
 8001604:	220a      	movs	r2, #10
 8001606:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001608:	4804      	ldr	r0, [pc, #16]	@ (800161c <MX_SPI1_Init+0x64>)
 800160a:	f001 fc0b 	bl	8002e24 <HAL_SPI_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001614:	f000 f882 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000220 	.word	0x20000220
 8001620:	40013000 	.word	0x40013000

08001624 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162a:	f107 0310 	add.w	r3, r7, #16
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001638:	4b34      	ldr	r3, [pc, #208]	@ (800170c <MX_GPIO_Init+0xe8>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	4a33      	ldr	r2, [pc, #204]	@ (800170c <MX_GPIO_Init+0xe8>)
 800163e:	f043 0310 	orr.w	r3, r3, #16
 8001642:	6193      	str	r3, [r2, #24]
 8001644:	4b31      	ldr	r3, [pc, #196]	@ (800170c <MX_GPIO_Init+0xe8>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001650:	4b2e      	ldr	r3, [pc, #184]	@ (800170c <MX_GPIO_Init+0xe8>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	4a2d      	ldr	r2, [pc, #180]	@ (800170c <MX_GPIO_Init+0xe8>)
 8001656:	f043 0320 	orr.w	r3, r3, #32
 800165a:	6193      	str	r3, [r2, #24]
 800165c:	4b2b      	ldr	r3, [pc, #172]	@ (800170c <MX_GPIO_Init+0xe8>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	f003 0320 	and.w	r3, r3, #32
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001668:	4b28      	ldr	r3, [pc, #160]	@ (800170c <MX_GPIO_Init+0xe8>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	4a27      	ldr	r2, [pc, #156]	@ (800170c <MX_GPIO_Init+0xe8>)
 800166e:	f043 0304 	orr.w	r3, r3, #4
 8001672:	6193      	str	r3, [r2, #24]
 8001674:	4b25      	ldr	r3, [pc, #148]	@ (800170c <MX_GPIO_Init+0xe8>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001680:	4b22      	ldr	r3, [pc, #136]	@ (800170c <MX_GPIO_Init+0xe8>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	4a21      	ldr	r2, [pc, #132]	@ (800170c <MX_GPIO_Init+0xe8>)
 8001686:	f043 0308 	orr.w	r3, r3, #8
 800168a:	6193      	str	r3, [r2, #24]
 800168c:	4b1f      	ldr	r3, [pc, #124]	@ (800170c <MX_GPIO_Init+0xe8>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	f003 0308 	and.w	r3, r3, #8
 8001694:	603b      	str	r3, [r7, #0]
 8001696:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800169e:	481c      	ldr	r0, [pc, #112]	@ (8001710 <MX_GPIO_Init+0xec>)
 80016a0:	f000 ff14 	bl	80024cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin, GPIO_PIN_SET);
 80016a4:	2201      	movs	r2, #1
 80016a6:	2103      	movs	r1, #3
 80016a8:	481a      	ldr	r0, [pc, #104]	@ (8001714 <MX_GPIO_Init+0xf0>)
 80016aa:	f000 ff0f 	bl	80024cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b4:	2301      	movs	r3, #1
 80016b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016bc:	2302      	movs	r3, #2
 80016be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c0:	f107 0310 	add.w	r3, r7, #16
 80016c4:	4619      	mov	r1, r3
 80016c6:	4812      	ldr	r0, [pc, #72]	@ (8001710 <MX_GPIO_Init+0xec>)
 80016c8:	f000 fd7c 	bl	80021c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NSS_Pin RST_Pin */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin;
 80016cc:	2303      	movs	r3, #3
 80016ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d0:	2301      	movs	r3, #1
 80016d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d8:	2302      	movs	r3, #2
 80016da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016dc:	f107 0310 	add.w	r3, r7, #16
 80016e0:	4619      	mov	r1, r3
 80016e2:	480c      	ldr	r0, [pc, #48]	@ (8001714 <MX_GPIO_Init+0xf0>)
 80016e4:	f000 fd6e 	bl	80021c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 80016e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001718 <MX_GPIO_Init+0xf4>)
 80016f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 80016f6:	f107 0310 	add.w	r3, r7, #16
 80016fa:	4619      	mov	r1, r3
 80016fc:	4805      	ldr	r0, [pc, #20]	@ (8001714 <MX_GPIO_Init+0xf0>)
 80016fe:	f000 fd61 	bl	80021c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001702:	bf00      	nop
 8001704:	3720      	adds	r7, #32
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40021000 	.word	0x40021000
 8001710:	40011000 	.word	0x40011000
 8001714:	40010c00 	.word	0x40010c00
 8001718:	10110000 	.word	0x10110000

0800171c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001720:	b672      	cpsid	i
}
 8001722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <Error_Handler+0x8>

08001728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800172e:	4b15      	ldr	r3, [pc, #84]	@ (8001784 <HAL_MspInit+0x5c>)
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	4a14      	ldr	r2, [pc, #80]	@ (8001784 <HAL_MspInit+0x5c>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6193      	str	r3, [r2, #24]
 800173a:	4b12      	ldr	r3, [pc, #72]	@ (8001784 <HAL_MspInit+0x5c>)
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001746:	4b0f      	ldr	r3, [pc, #60]	@ (8001784 <HAL_MspInit+0x5c>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	4a0e      	ldr	r2, [pc, #56]	@ (8001784 <HAL_MspInit+0x5c>)
 800174c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001750:	61d3      	str	r3, [r2, #28]
 8001752:	4b0c      	ldr	r3, [pc, #48]	@ (8001784 <HAL_MspInit+0x5c>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800175e:	4b0a      	ldr	r3, [pc, #40]	@ (8001788 <HAL_MspInit+0x60>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	4a04      	ldr	r2, [pc, #16]	@ (8001788 <HAL_MspInit+0x60>)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800177a:	bf00      	nop
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	40021000 	.word	0x40021000
 8001788:	40010000 	.word	0x40010000

0800178c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b088      	sub	sp, #32
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 0310 	add.w	r3, r7, #16
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a14      	ldr	r2, [pc, #80]	@ (80017f8 <HAL_ADC_MspInit+0x6c>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d121      	bne.n	80017f0 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017ac:	4b13      	ldr	r3, [pc, #76]	@ (80017fc <HAL_ADC_MspInit+0x70>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	4a12      	ldr	r2, [pc, #72]	@ (80017fc <HAL_ADC_MspInit+0x70>)
 80017b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017b6:	6193      	str	r3, [r2, #24]
 80017b8:	4b10      	ldr	r3, [pc, #64]	@ (80017fc <HAL_ADC_MspInit+0x70>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c4:	4b0d      	ldr	r3, [pc, #52]	@ (80017fc <HAL_ADC_MspInit+0x70>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	4a0c      	ldr	r2, [pc, #48]	@ (80017fc <HAL_ADC_MspInit+0x70>)
 80017ca:	f043 0304 	orr.w	r3, r3, #4
 80017ce:	6193      	str	r3, [r2, #24]
 80017d0:	4b0a      	ldr	r3, [pc, #40]	@ (80017fc <HAL_ADC_MspInit+0x70>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80017dc:	230f      	movs	r3, #15
 80017de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017e0:	2303      	movs	r3, #3
 80017e2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e4:	f107 0310 	add.w	r3, r7, #16
 80017e8:	4619      	mov	r1, r3
 80017ea:	4805      	ldr	r0, [pc, #20]	@ (8001800 <HAL_ADC_MspInit+0x74>)
 80017ec:	f000 fcea 	bl	80021c4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80017f0:	bf00      	nop
 80017f2:	3720      	adds	r7, #32
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40012400 	.word	0x40012400
 80017fc:	40021000 	.word	0x40021000
 8001800:	40010800 	.word	0x40010800

08001804 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 0310 	add.w	r3, r7, #16
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a1b      	ldr	r2, [pc, #108]	@ (800188c <HAL_SPI_MspInit+0x88>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d12f      	bne.n	8001884 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001824:	4b1a      	ldr	r3, [pc, #104]	@ (8001890 <HAL_SPI_MspInit+0x8c>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	4a19      	ldr	r2, [pc, #100]	@ (8001890 <HAL_SPI_MspInit+0x8c>)
 800182a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800182e:	6193      	str	r3, [r2, #24]
 8001830:	4b17      	ldr	r3, [pc, #92]	@ (8001890 <HAL_SPI_MspInit+0x8c>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183c:	4b14      	ldr	r3, [pc, #80]	@ (8001890 <HAL_SPI_MspInit+0x8c>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	4a13      	ldr	r2, [pc, #76]	@ (8001890 <HAL_SPI_MspInit+0x8c>)
 8001842:	f043 0304 	orr.w	r3, r3, #4
 8001846:	6193      	str	r3, [r2, #24]
 8001848:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <HAL_SPI_MspInit+0x8c>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001854:	23a0      	movs	r3, #160	@ 0xa0
 8001856:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001858:	2302      	movs	r3, #2
 800185a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800185c:	2303      	movs	r3, #3
 800185e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001860:	f107 0310 	add.w	r3, r7, #16
 8001864:	4619      	mov	r1, r3
 8001866:	480b      	ldr	r0, [pc, #44]	@ (8001894 <HAL_SPI_MspInit+0x90>)
 8001868:	f000 fcac 	bl	80021c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800186c:	2340      	movs	r3, #64	@ 0x40
 800186e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001878:	f107 0310 	add.w	r3, r7, #16
 800187c:	4619      	mov	r1, r3
 800187e:	4805      	ldr	r0, [pc, #20]	@ (8001894 <HAL_SPI_MspInit+0x90>)
 8001880:	f000 fca0 	bl	80021c4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001884:	bf00      	nop
 8001886:	3720      	adds	r7, #32
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40013000 	.word	0x40013000
 8001890:	40021000 	.word	0x40021000
 8001894:	40010800 	.word	0x40010800

08001898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <NMI_Handler+0x4>

080018a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <HardFault_Handler+0x4>

080018a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ac:	bf00      	nop
 80018ae:	e7fd      	b.n	80018ac <MemManage_Handler+0x4>

080018b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b4:	bf00      	nop
 80018b6:	e7fd      	b.n	80018b4 <BusFault_Handler+0x4>

080018b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018bc:	bf00      	nop
 80018be:	e7fd      	b.n	80018bc <UsageFault_Handler+0x4>

080018c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr

080018cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr

080018d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e8:	f000 f936 	bl	8001b58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return 1;
 80018f4:	2301      	movs	r3, #1
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr

080018fe <_kill>:

int _kill(int pid, int sig)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001908:	f003 f80e 	bl	8004928 <__errno>
 800190c:	4603      	mov	r3, r0
 800190e:	2216      	movs	r2, #22
 8001910:	601a      	str	r2, [r3, #0]
  return -1;
 8001912:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <_exit>:

void _exit (int status)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001926:	f04f 31ff 	mov.w	r1, #4294967295
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff ffe7 	bl	80018fe <_kill>
  while (1) {}    /* Make sure we hang here */
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <_exit+0x12>

08001934 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	e00a      	b.n	800195c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001946:	f3af 8000 	nop.w
 800194a:	4601      	mov	r1, r0
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	1c5a      	adds	r2, r3, #1
 8001950:	60ba      	str	r2, [r7, #8]
 8001952:	b2ca      	uxtb	r2, r1
 8001954:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	3301      	adds	r3, #1
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	429a      	cmp	r2, r3
 8001962:	dbf0      	blt.n	8001946 <_read+0x12>
  }

  return len;
 8001964:	687b      	ldr	r3, [r7, #4]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b086      	sub	sp, #24
 8001972:	af00      	add	r7, sp, #0
 8001974:	60f8      	str	r0, [r7, #12]
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	e009      	b.n	8001994 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	1c5a      	adds	r2, r3, #1
 8001984:	60ba      	str	r2, [r7, #8]
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	3301      	adds	r3, #1
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	429a      	cmp	r2, r3
 800199a:	dbf1      	blt.n	8001980 <_write+0x12>
  }
  return len;
 800199c:	687b      	ldr	r3, [r7, #4]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <_close>:

int _close(int file)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr

080019bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019cc:	605a      	str	r2, [r3, #4]
  return 0;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr

080019da <_isatty>:

int _isatty(int file)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019e2:	2301      	movs	r3, #1
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr

080019ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b085      	sub	sp, #20
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr
	...

08001a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a10:	4a14      	ldr	r2, [pc, #80]	@ (8001a64 <_sbrk+0x5c>)
 8001a12:	4b15      	ldr	r3, [pc, #84]	@ (8001a68 <_sbrk+0x60>)
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a1c:	4b13      	ldr	r3, [pc, #76]	@ (8001a6c <_sbrk+0x64>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d102      	bne.n	8001a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a24:	4b11      	ldr	r3, [pc, #68]	@ (8001a6c <_sbrk+0x64>)
 8001a26:	4a12      	ldr	r2, [pc, #72]	@ (8001a70 <_sbrk+0x68>)
 8001a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a2a:	4b10      	ldr	r3, [pc, #64]	@ (8001a6c <_sbrk+0x64>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d207      	bcs.n	8001a48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a38:	f002 ff76 	bl	8004928 <__errno>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	220c      	movs	r2, #12
 8001a40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
 8001a46:	e009      	b.n	8001a5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a48:	4b08      	ldr	r3, [pc, #32]	@ (8001a6c <_sbrk+0x64>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a4e:	4b07      	ldr	r3, [pc, #28]	@ (8001a6c <_sbrk+0x64>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	4a05      	ldr	r2, [pc, #20]	@ (8001a6c <_sbrk+0x64>)
 8001a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20005000 	.word	0x20005000
 8001a68:	00000400 	.word	0x00000400
 8001a6c:	200002a4 	.word	0x200002a4
 8001a70:	200003f8 	.word	0x200003f8

08001a74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a80:	f7ff fff8 	bl	8001a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a84:	480b      	ldr	r0, [pc, #44]	@ (8001ab4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a86:	490c      	ldr	r1, [pc, #48]	@ (8001ab8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a88:	4a0c      	ldr	r2, [pc, #48]	@ (8001abc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a8c:	e002      	b.n	8001a94 <LoopCopyDataInit>

08001a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a92:	3304      	adds	r3, #4

08001a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a98:	d3f9      	bcc.n	8001a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a9a:	4a09      	ldr	r2, [pc, #36]	@ (8001ac0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a9c:	4c09      	ldr	r4, [pc, #36]	@ (8001ac4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa0:	e001      	b.n	8001aa6 <LoopFillZerobss>

08001aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa4:	3204      	adds	r2, #4

08001aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aa8:	d3fb      	bcc.n	8001aa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aaa:	f002 ff43 	bl	8004934 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aae:	f7ff fc7b 	bl	80013a8 <main>
  bx lr
 8001ab2:	4770      	bx	lr
  ldr r0, =_sdata
 8001ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ab8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001abc:	080084f4 	.word	0x080084f4
  ldr r2, =_sbss
 8001ac0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001ac4:	200003f8 	.word	0x200003f8

08001ac8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ac8:	e7fe      	b.n	8001ac8 <ADC1_2_IRQHandler>
	...

08001acc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ad0:	4b08      	ldr	r3, [pc, #32]	@ (8001af4 <HAL_Init+0x28>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a07      	ldr	r2, [pc, #28]	@ (8001af4 <HAL_Init+0x28>)
 8001ad6:	f043 0310 	orr.w	r3, r3, #16
 8001ada:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001adc:	2003      	movs	r0, #3
 8001ade:	f000 fb3d 	bl	800215c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ae2:	200f      	movs	r0, #15
 8001ae4:	f000 f808 	bl	8001af8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae8:	f7ff fe1e 	bl	8001728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40022000 	.word	0x40022000

08001af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b00:	4b12      	ldr	r3, [pc, #72]	@ (8001b4c <HAL_InitTick+0x54>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b12      	ldr	r3, [pc, #72]	@ (8001b50 <HAL_InitTick+0x58>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b16:	4618      	mov	r0, r3
 8001b18:	f000 fb47 	bl	80021aa <HAL_SYSTICK_Config>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e00e      	b.n	8001b44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b0f      	cmp	r3, #15
 8001b2a:	d80a      	bhi.n	8001b42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	f04f 30ff 	mov.w	r0, #4294967295
 8001b34:	f000 fb1d 	bl	8002172 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b38:	4a06      	ldr	r2, [pc, #24]	@ (8001b54 <HAL_InitTick+0x5c>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e000      	b.n	8001b44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000000 	.word	0x20000000
 8001b50:	20000008 	.word	0x20000008
 8001b54:	20000004 	.word	0x20000004

08001b58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b5c:	4b05      	ldr	r3, [pc, #20]	@ (8001b74 <HAL_IncTick+0x1c>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	461a      	mov	r2, r3
 8001b62:	4b05      	ldr	r3, [pc, #20]	@ (8001b78 <HAL_IncTick+0x20>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4413      	add	r3, r2
 8001b68:	4a03      	ldr	r2, [pc, #12]	@ (8001b78 <HAL_IncTick+0x20>)
 8001b6a:	6013      	str	r3, [r2, #0]
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr
 8001b74:	20000008 	.word	0x20000008
 8001b78:	200002a8 	.word	0x200002a8

08001b7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b80:	4b02      	ldr	r3, [pc, #8]	@ (8001b8c <HAL_GetTick+0x10>)
 8001b82:	681b      	ldr	r3, [r3, #0]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr
 8001b8c:	200002a8 	.word	0x200002a8

08001b90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b98:	f7ff fff0 	bl	8001b7c <HAL_GetTick>
 8001b9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba8:	d005      	beq.n	8001bb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001baa:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd4 <HAL_Delay+0x44>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bb6:	bf00      	nop
 8001bb8:	f7ff ffe0 	bl	8001b7c <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d8f7      	bhi.n	8001bb8 <HAL_Delay+0x28>
  {
  }
}
 8001bc8:	bf00      	nop
 8001bca:	bf00      	nop
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000008 	.word	0x20000008

08001bd8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e0be      	b.n	8001d78 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d109      	bne.n	8001c1c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff fdb8 	bl	800178c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f9ab 	bl	8001f78 <ADC_ConversionStop_Disable>
 8001c22:	4603      	mov	r3, r0
 8001c24:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c2a:	f003 0310 	and.w	r3, r3, #16
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f040 8099 	bne.w	8001d66 <HAL_ADC_Init+0x18e>
 8001c34:	7dfb      	ldrb	r3, [r7, #23]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f040 8095 	bne.w	8001d66 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c40:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c44:	f023 0302 	bic.w	r3, r3, #2
 8001c48:	f043 0202 	orr.w	r2, r3, #2
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c58:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	7b1b      	ldrb	r3, [r3, #12]
 8001c5e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c60:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c70:	d003      	beq.n	8001c7a <HAL_ADC_Init+0xa2>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d102      	bne.n	8001c80 <HAL_ADC_Init+0xa8>
 8001c7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c7e:	e000      	b.n	8001c82 <HAL_ADC_Init+0xaa>
 8001c80:	2300      	movs	r3, #0
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	7d1b      	ldrb	r3, [r3, #20]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d119      	bne.n	8001cc4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	7b1b      	ldrb	r3, [r3, #12]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d109      	bne.n	8001cac <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	035a      	lsls	r2, r3, #13
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	e00b      	b.n	8001cc4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb0:	f043 0220 	orr.w	r2, r3, #32
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cbc:	f043 0201 	orr.w	r2, r3, #1
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	4b28      	ldr	r3, [pc, #160]	@ (8001d80 <HAL_ADC_Init+0x1a8>)
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6812      	ldr	r2, [r2, #0]
 8001ce6:	68b9      	ldr	r1, [r7, #8]
 8001ce8:	430b      	orrs	r3, r1
 8001cea:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cf4:	d003      	beq.n	8001cfe <HAL_ADC_Init+0x126>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d104      	bne.n	8001d08 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	051b      	lsls	r3, r3, #20
 8001d06:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d0e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689a      	ldr	r2, [r3, #8]
 8001d22:	4b18      	ldr	r3, [pc, #96]	@ (8001d84 <HAL_ADC_Init+0x1ac>)
 8001d24:	4013      	ands	r3, r2
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d10b      	bne.n	8001d44 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d36:	f023 0303 	bic.w	r3, r3, #3
 8001d3a:	f043 0201 	orr.w	r2, r3, #1
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d42:	e018      	b.n	8001d76 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d48:	f023 0312 	bic.w	r3, r3, #18
 8001d4c:	f043 0210 	orr.w	r2, r3, #16
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d58:	f043 0201 	orr.w	r2, r3, #1
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d64:	e007      	b.n	8001d76 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d6a:	f043 0210 	orr.w	r2, r3, #16
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3718      	adds	r7, #24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	ffe1f7fd 	.word	0xffe1f7fd
 8001d84:	ff1f0efe 	.word	0xff1f0efe

08001d88 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d92:	2300      	movs	r3, #0
 8001d94:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d101      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x20>
 8001da4:	2302      	movs	r3, #2
 8001da6:	e0dc      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x1da>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b06      	cmp	r3, #6
 8001db6:	d81c      	bhi.n	8001df2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	3b05      	subs	r3, #5
 8001dca:	221f      	movs	r2, #31
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	4019      	ands	r1, r3
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	6818      	ldr	r0, [r3, #0]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	3b05      	subs	r3, #5
 8001de4:	fa00 f203 	lsl.w	r2, r0, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	635a      	str	r2, [r3, #52]	@ 0x34
 8001df0:	e03c      	b.n	8001e6c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b0c      	cmp	r3, #12
 8001df8:	d81c      	bhi.n	8001e34 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	3b23      	subs	r3, #35	@ 0x23
 8001e0c:	221f      	movs	r2, #31
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43db      	mvns	r3, r3
 8001e14:	4019      	ands	r1, r3
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	6818      	ldr	r0, [r3, #0]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	3b23      	subs	r3, #35	@ 0x23
 8001e26:	fa00 f203 	lsl.w	r2, r0, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e32:	e01b      	b.n	8001e6c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	3b41      	subs	r3, #65	@ 0x41
 8001e46:	221f      	movs	r2, #31
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	4019      	ands	r1, r3
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	6818      	ldr	r0, [r3, #0]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3b41      	subs	r3, #65	@ 0x41
 8001e60:	fa00 f203 	lsl.w	r2, r0, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b09      	cmp	r3, #9
 8001e72:	d91c      	bls.n	8001eae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68d9      	ldr	r1, [r3, #12]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	4413      	add	r3, r2
 8001e84:	3b1e      	subs	r3, #30
 8001e86:	2207      	movs	r2, #7
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	4019      	ands	r1, r3
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	6898      	ldr	r0, [r3, #8]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3b1e      	subs	r3, #30
 8001ea0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	60da      	str	r2, [r3, #12]
 8001eac:	e019      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6919      	ldr	r1, [r3, #16]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	2207      	movs	r2, #7
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	4019      	ands	r1, r3
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	6898      	ldr	r0, [r3, #8]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	4413      	add	r3, r2
 8001ed6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2b10      	cmp	r3, #16
 8001ee8:	d003      	beq.n	8001ef2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001eee:	2b11      	cmp	r3, #17
 8001ef0:	d132      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a1d      	ldr	r2, [pc, #116]	@ (8001f6c <HAL_ADC_ConfigChannel+0x1e4>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d125      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d126      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001f18:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2b10      	cmp	r3, #16
 8001f20:	d11a      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f22:	4b13      	ldr	r3, [pc, #76]	@ (8001f70 <HAL_ADC_ConfigChannel+0x1e8>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a13      	ldr	r2, [pc, #76]	@ (8001f74 <HAL_ADC_ConfigChannel+0x1ec>)
 8001f28:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2c:	0c9a      	lsrs	r2, r3, #18
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f38:	e002      	b.n	8001f40 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f9      	bne.n	8001f3a <HAL_ADC_ConfigChannel+0x1b2>
 8001f46:	e007      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f4c:	f043 0220 	orr.w	r2, r3, #32
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr
 8001f6c:	40012400 	.word	0x40012400
 8001f70:	20000000 	.word	0x20000000
 8001f74:	431bde83 	.word	0x431bde83

08001f78 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d12e      	bne.n	8001ff0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0201 	bic.w	r2, r2, #1
 8001fa0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001fa2:	f7ff fdeb 	bl	8001b7c <HAL_GetTick>
 8001fa6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001fa8:	e01b      	b.n	8001fe2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001faa:	f7ff fde7 	bl	8001b7c <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d914      	bls.n	8001fe2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d10d      	bne.n	8001fe2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fca:	f043 0210 	orr.w	r2, r3, #16
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd6:	f043 0201 	orr.w	r2, r3, #1
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e007      	b.n	8001ff2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d0dc      	beq.n	8001faa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800200c:	4b0c      	ldr	r3, [pc, #48]	@ (8002040 <__NVIC_SetPriorityGrouping+0x44>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002018:	4013      	ands	r3, r2
 800201a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002024:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002028:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800202c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800202e:	4a04      	ldr	r2, [pc, #16]	@ (8002040 <__NVIC_SetPriorityGrouping+0x44>)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	60d3      	str	r3, [r2, #12]
}
 8002034:	bf00      	nop
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002048:	4b04      	ldr	r3, [pc, #16]	@ (800205c <__NVIC_GetPriorityGrouping+0x18>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	0a1b      	lsrs	r3, r3, #8
 800204e:	f003 0307 	and.w	r3, r3, #7
}
 8002052:	4618      	mov	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	6039      	str	r1, [r7, #0]
 800206a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800206c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002070:	2b00      	cmp	r3, #0
 8002072:	db0a      	blt.n	800208a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	b2da      	uxtb	r2, r3
 8002078:	490c      	ldr	r1, [pc, #48]	@ (80020ac <__NVIC_SetPriority+0x4c>)
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	0112      	lsls	r2, r2, #4
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	440b      	add	r3, r1
 8002084:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002088:	e00a      	b.n	80020a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	b2da      	uxtb	r2, r3
 800208e:	4908      	ldr	r1, [pc, #32]	@ (80020b0 <__NVIC_SetPriority+0x50>)
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	3b04      	subs	r3, #4
 8002098:	0112      	lsls	r2, r2, #4
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	440b      	add	r3, r1
 800209e:	761a      	strb	r2, [r3, #24]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	e000e100 	.word	0xe000e100
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b089      	sub	sp, #36	@ 0x24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f1c3 0307 	rsb	r3, r3, #7
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	bf28      	it	cs
 80020d2:	2304      	movcs	r3, #4
 80020d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3304      	adds	r3, #4
 80020da:	2b06      	cmp	r3, #6
 80020dc:	d902      	bls.n	80020e4 <NVIC_EncodePriority+0x30>
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3b03      	subs	r3, #3
 80020e2:	e000      	b.n	80020e6 <NVIC_EncodePriority+0x32>
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e8:	f04f 32ff 	mov.w	r2, #4294967295
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43da      	mvns	r2, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	401a      	ands	r2, r3
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	fa01 f303 	lsl.w	r3, r1, r3
 8002106:	43d9      	mvns	r1, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	4313      	orrs	r3, r2
         );
}
 800210e:	4618      	mov	r0, r3
 8002110:	3724      	adds	r7, #36	@ 0x24
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3b01      	subs	r3, #1
 8002124:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002128:	d301      	bcc.n	800212e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800212a:	2301      	movs	r3, #1
 800212c:	e00f      	b.n	800214e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800212e:	4a0a      	ldr	r2, [pc, #40]	@ (8002158 <SysTick_Config+0x40>)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3b01      	subs	r3, #1
 8002134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002136:	210f      	movs	r1, #15
 8002138:	f04f 30ff 	mov.w	r0, #4294967295
 800213c:	f7ff ff90 	bl	8002060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002140:	4b05      	ldr	r3, [pc, #20]	@ (8002158 <SysTick_Config+0x40>)
 8002142:	2200      	movs	r2, #0
 8002144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002146:	4b04      	ldr	r3, [pc, #16]	@ (8002158 <SysTick_Config+0x40>)
 8002148:	2207      	movs	r2, #7
 800214a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	e000e010 	.word	0xe000e010

0800215c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff ff49 	bl	8001ffc <__NVIC_SetPriorityGrouping>
}
 800216a:	bf00      	nop
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002172:	b580      	push	{r7, lr}
 8002174:	b086      	sub	sp, #24
 8002176:	af00      	add	r7, sp, #0
 8002178:	4603      	mov	r3, r0
 800217a:	60b9      	str	r1, [r7, #8]
 800217c:	607a      	str	r2, [r7, #4]
 800217e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002184:	f7ff ff5e 	bl	8002044 <__NVIC_GetPriorityGrouping>
 8002188:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	68b9      	ldr	r1, [r7, #8]
 800218e:	6978      	ldr	r0, [r7, #20]
 8002190:	f7ff ff90 	bl	80020b4 <NVIC_EncodePriority>
 8002194:	4602      	mov	r2, r0
 8002196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800219a:	4611      	mov	r1, r2
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff ff5f 	bl	8002060 <__NVIC_SetPriority>
}
 80021a2:	bf00      	nop
 80021a4:	3718      	adds	r7, #24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff ffb0 	bl	8002118 <SysTick_Config>
 80021b8:	4603      	mov	r3, r0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
	...

080021c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b08b      	sub	sp, #44	@ 0x2c
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021ce:	2300      	movs	r3, #0
 80021d0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021d2:	2300      	movs	r3, #0
 80021d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021d6:	e169      	b.n	80024ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021d8:	2201      	movs	r2, #1
 80021da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	69fa      	ldr	r2, [r7, #28]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	f040 8158 	bne.w	80024a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	4a9a      	ldr	r2, [pc, #616]	@ (8002464 <HAL_GPIO_Init+0x2a0>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d05e      	beq.n	80022be <HAL_GPIO_Init+0xfa>
 8002200:	4a98      	ldr	r2, [pc, #608]	@ (8002464 <HAL_GPIO_Init+0x2a0>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d875      	bhi.n	80022f2 <HAL_GPIO_Init+0x12e>
 8002206:	4a98      	ldr	r2, [pc, #608]	@ (8002468 <HAL_GPIO_Init+0x2a4>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d058      	beq.n	80022be <HAL_GPIO_Init+0xfa>
 800220c:	4a96      	ldr	r2, [pc, #600]	@ (8002468 <HAL_GPIO_Init+0x2a4>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d86f      	bhi.n	80022f2 <HAL_GPIO_Init+0x12e>
 8002212:	4a96      	ldr	r2, [pc, #600]	@ (800246c <HAL_GPIO_Init+0x2a8>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d052      	beq.n	80022be <HAL_GPIO_Init+0xfa>
 8002218:	4a94      	ldr	r2, [pc, #592]	@ (800246c <HAL_GPIO_Init+0x2a8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d869      	bhi.n	80022f2 <HAL_GPIO_Init+0x12e>
 800221e:	4a94      	ldr	r2, [pc, #592]	@ (8002470 <HAL_GPIO_Init+0x2ac>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d04c      	beq.n	80022be <HAL_GPIO_Init+0xfa>
 8002224:	4a92      	ldr	r2, [pc, #584]	@ (8002470 <HAL_GPIO_Init+0x2ac>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d863      	bhi.n	80022f2 <HAL_GPIO_Init+0x12e>
 800222a:	4a92      	ldr	r2, [pc, #584]	@ (8002474 <HAL_GPIO_Init+0x2b0>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d046      	beq.n	80022be <HAL_GPIO_Init+0xfa>
 8002230:	4a90      	ldr	r2, [pc, #576]	@ (8002474 <HAL_GPIO_Init+0x2b0>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d85d      	bhi.n	80022f2 <HAL_GPIO_Init+0x12e>
 8002236:	2b12      	cmp	r3, #18
 8002238:	d82a      	bhi.n	8002290 <HAL_GPIO_Init+0xcc>
 800223a:	2b12      	cmp	r3, #18
 800223c:	d859      	bhi.n	80022f2 <HAL_GPIO_Init+0x12e>
 800223e:	a201      	add	r2, pc, #4	@ (adr r2, 8002244 <HAL_GPIO_Init+0x80>)
 8002240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002244:	080022bf 	.word	0x080022bf
 8002248:	08002299 	.word	0x08002299
 800224c:	080022ab 	.word	0x080022ab
 8002250:	080022ed 	.word	0x080022ed
 8002254:	080022f3 	.word	0x080022f3
 8002258:	080022f3 	.word	0x080022f3
 800225c:	080022f3 	.word	0x080022f3
 8002260:	080022f3 	.word	0x080022f3
 8002264:	080022f3 	.word	0x080022f3
 8002268:	080022f3 	.word	0x080022f3
 800226c:	080022f3 	.word	0x080022f3
 8002270:	080022f3 	.word	0x080022f3
 8002274:	080022f3 	.word	0x080022f3
 8002278:	080022f3 	.word	0x080022f3
 800227c:	080022f3 	.word	0x080022f3
 8002280:	080022f3 	.word	0x080022f3
 8002284:	080022f3 	.word	0x080022f3
 8002288:	080022a1 	.word	0x080022a1
 800228c:	080022b5 	.word	0x080022b5
 8002290:	4a79      	ldr	r2, [pc, #484]	@ (8002478 <HAL_GPIO_Init+0x2b4>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d013      	beq.n	80022be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002296:	e02c      	b.n	80022f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	623b      	str	r3, [r7, #32]
          break;
 800229e:	e029      	b.n	80022f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	3304      	adds	r3, #4
 80022a6:	623b      	str	r3, [r7, #32]
          break;
 80022a8:	e024      	b.n	80022f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	3308      	adds	r3, #8
 80022b0:	623b      	str	r3, [r7, #32]
          break;
 80022b2:	e01f      	b.n	80022f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	330c      	adds	r3, #12
 80022ba:	623b      	str	r3, [r7, #32]
          break;
 80022bc:	e01a      	b.n	80022f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d102      	bne.n	80022cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022c6:	2304      	movs	r3, #4
 80022c8:	623b      	str	r3, [r7, #32]
          break;
 80022ca:	e013      	b.n	80022f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d105      	bne.n	80022e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022d4:	2308      	movs	r3, #8
 80022d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69fa      	ldr	r2, [r7, #28]
 80022dc:	611a      	str	r2, [r3, #16]
          break;
 80022de:	e009      	b.n	80022f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022e0:	2308      	movs	r3, #8
 80022e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	69fa      	ldr	r2, [r7, #28]
 80022e8:	615a      	str	r2, [r3, #20]
          break;
 80022ea:	e003      	b.n	80022f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022ec:	2300      	movs	r3, #0
 80022ee:	623b      	str	r3, [r7, #32]
          break;
 80022f0:	e000      	b.n	80022f4 <HAL_GPIO_Init+0x130>
          break;
 80022f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	2bff      	cmp	r3, #255	@ 0xff
 80022f8:	d801      	bhi.n	80022fe <HAL_GPIO_Init+0x13a>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	e001      	b.n	8002302 <HAL_GPIO_Init+0x13e>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3304      	adds	r3, #4
 8002302:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	2bff      	cmp	r3, #255	@ 0xff
 8002308:	d802      	bhi.n	8002310 <HAL_GPIO_Init+0x14c>
 800230a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	e002      	b.n	8002316 <HAL_GPIO_Init+0x152>
 8002310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002312:	3b08      	subs	r3, #8
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	210f      	movs	r1, #15
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	fa01 f303 	lsl.w	r3, r1, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	401a      	ands	r2, r3
 8002328:	6a39      	ldr	r1, [r7, #32]
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	fa01 f303 	lsl.w	r3, r1, r3
 8002330:	431a      	orrs	r2, r3
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 80b1 	beq.w	80024a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002344:	4b4d      	ldr	r3, [pc, #308]	@ (800247c <HAL_GPIO_Init+0x2b8>)
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	4a4c      	ldr	r2, [pc, #304]	@ (800247c <HAL_GPIO_Init+0x2b8>)
 800234a:	f043 0301 	orr.w	r3, r3, #1
 800234e:	6193      	str	r3, [r2, #24]
 8002350:	4b4a      	ldr	r3, [pc, #296]	@ (800247c <HAL_GPIO_Init+0x2b8>)
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800235c:	4a48      	ldr	r2, [pc, #288]	@ (8002480 <HAL_GPIO_Init+0x2bc>)
 800235e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002360:	089b      	lsrs	r3, r3, #2
 8002362:	3302      	adds	r3, #2
 8002364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002368:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800236a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	220f      	movs	r2, #15
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	4013      	ands	r3, r2
 800237e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a40      	ldr	r2, [pc, #256]	@ (8002484 <HAL_GPIO_Init+0x2c0>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d013      	beq.n	80023b0 <HAL_GPIO_Init+0x1ec>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a3f      	ldr	r2, [pc, #252]	@ (8002488 <HAL_GPIO_Init+0x2c4>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d00d      	beq.n	80023ac <HAL_GPIO_Init+0x1e8>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a3e      	ldr	r2, [pc, #248]	@ (800248c <HAL_GPIO_Init+0x2c8>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d007      	beq.n	80023a8 <HAL_GPIO_Init+0x1e4>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a3d      	ldr	r2, [pc, #244]	@ (8002490 <HAL_GPIO_Init+0x2cc>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d101      	bne.n	80023a4 <HAL_GPIO_Init+0x1e0>
 80023a0:	2303      	movs	r3, #3
 80023a2:	e006      	b.n	80023b2 <HAL_GPIO_Init+0x1ee>
 80023a4:	2304      	movs	r3, #4
 80023a6:	e004      	b.n	80023b2 <HAL_GPIO_Init+0x1ee>
 80023a8:	2302      	movs	r3, #2
 80023aa:	e002      	b.n	80023b2 <HAL_GPIO_Init+0x1ee>
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <HAL_GPIO_Init+0x1ee>
 80023b0:	2300      	movs	r3, #0
 80023b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023b4:	f002 0203 	and.w	r2, r2, #3
 80023b8:	0092      	lsls	r2, r2, #2
 80023ba:	4093      	lsls	r3, r2
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	4313      	orrs	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023c2:	492f      	ldr	r1, [pc, #188]	@ (8002480 <HAL_GPIO_Init+0x2bc>)
 80023c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c6:	089b      	lsrs	r3, r3, #2
 80023c8:	3302      	adds	r3, #2
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d006      	beq.n	80023ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002494 <HAL_GPIO_Init+0x2d0>)
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	492c      	ldr	r1, [pc, #176]	@ (8002494 <HAL_GPIO_Init+0x2d0>)
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	608b      	str	r3, [r1, #8]
 80023e8:	e006      	b.n	80023f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002494 <HAL_GPIO_Init+0x2d0>)
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	43db      	mvns	r3, r3
 80023f2:	4928      	ldr	r1, [pc, #160]	@ (8002494 <HAL_GPIO_Init+0x2d0>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d006      	beq.n	8002412 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002404:	4b23      	ldr	r3, [pc, #140]	@ (8002494 <HAL_GPIO_Init+0x2d0>)
 8002406:	68da      	ldr	r2, [r3, #12]
 8002408:	4922      	ldr	r1, [pc, #136]	@ (8002494 <HAL_GPIO_Init+0x2d0>)
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	4313      	orrs	r3, r2
 800240e:	60cb      	str	r3, [r1, #12]
 8002410:	e006      	b.n	8002420 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002412:	4b20      	ldr	r3, [pc, #128]	@ (8002494 <HAL_GPIO_Init+0x2d0>)
 8002414:	68da      	ldr	r2, [r3, #12]
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	43db      	mvns	r3, r3
 800241a:	491e      	ldr	r1, [pc, #120]	@ (8002494 <HAL_GPIO_Init+0x2d0>)
 800241c:	4013      	ands	r3, r2
 800241e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d006      	beq.n	800243a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800242c:	4b19      	ldr	r3, [pc, #100]	@ (8002494 <HAL_GPIO_Init+0x2d0>)
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	4918      	ldr	r1, [pc, #96]	@ (8002494 <HAL_GPIO_Init+0x2d0>)
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	4313      	orrs	r3, r2
 8002436:	604b      	str	r3, [r1, #4]
 8002438:	e006      	b.n	8002448 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800243a:	4b16      	ldr	r3, [pc, #88]	@ (8002494 <HAL_GPIO_Init+0x2d0>)
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	43db      	mvns	r3, r3
 8002442:	4914      	ldr	r1, [pc, #80]	@ (8002494 <HAL_GPIO_Init+0x2d0>)
 8002444:	4013      	ands	r3, r2
 8002446:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d021      	beq.n	8002498 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002454:	4b0f      	ldr	r3, [pc, #60]	@ (8002494 <HAL_GPIO_Init+0x2d0>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	490e      	ldr	r1, [pc, #56]	@ (8002494 <HAL_GPIO_Init+0x2d0>)
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	4313      	orrs	r3, r2
 800245e:	600b      	str	r3, [r1, #0]
 8002460:	e021      	b.n	80024a6 <HAL_GPIO_Init+0x2e2>
 8002462:	bf00      	nop
 8002464:	10320000 	.word	0x10320000
 8002468:	10310000 	.word	0x10310000
 800246c:	10220000 	.word	0x10220000
 8002470:	10210000 	.word	0x10210000
 8002474:	10120000 	.word	0x10120000
 8002478:	10110000 	.word	0x10110000
 800247c:	40021000 	.word	0x40021000
 8002480:	40010000 	.word	0x40010000
 8002484:	40010800 	.word	0x40010800
 8002488:	40010c00 	.word	0x40010c00
 800248c:	40011000 	.word	0x40011000
 8002490:	40011400 	.word	0x40011400
 8002494:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002498:	4b0b      	ldr	r3, [pc, #44]	@ (80024c8 <HAL_GPIO_Init+0x304>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	43db      	mvns	r3, r3
 80024a0:	4909      	ldr	r1, [pc, #36]	@ (80024c8 <HAL_GPIO_Init+0x304>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a8:	3301      	adds	r3, #1
 80024aa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b2:	fa22 f303 	lsr.w	r3, r2, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f47f ae8e 	bne.w	80021d8 <HAL_GPIO_Init+0x14>
  }
}
 80024bc:	bf00      	nop
 80024be:	bf00      	nop
 80024c0:	372c      	adds	r7, #44	@ 0x2c
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr
 80024c8:	40010400 	.word	0x40010400

080024cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	460b      	mov	r3, r1
 80024d6:	807b      	strh	r3, [r7, #2]
 80024d8:	4613      	mov	r3, r2
 80024da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024dc:	787b      	ldrb	r3, [r7, #1]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024e2:	887a      	ldrh	r2, [r7, #2]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024e8:	e003      	b.n	80024f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024ea:	887b      	ldrh	r3, [r7, #2]
 80024ec:	041a      	lsls	r2, r3, #16
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	611a      	str	r2, [r3, #16]
}
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr

080024fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e272      	b.n	80029f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 8087 	beq.w	800262a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800251c:	4b92      	ldr	r3, [pc, #584]	@ (8002768 <HAL_RCC_OscConfig+0x26c>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 030c 	and.w	r3, r3, #12
 8002524:	2b04      	cmp	r3, #4
 8002526:	d00c      	beq.n	8002542 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002528:	4b8f      	ldr	r3, [pc, #572]	@ (8002768 <HAL_RCC_OscConfig+0x26c>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 030c 	and.w	r3, r3, #12
 8002530:	2b08      	cmp	r3, #8
 8002532:	d112      	bne.n	800255a <HAL_RCC_OscConfig+0x5e>
 8002534:	4b8c      	ldr	r3, [pc, #560]	@ (8002768 <HAL_RCC_OscConfig+0x26c>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800253c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002540:	d10b      	bne.n	800255a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002542:	4b89      	ldr	r3, [pc, #548]	@ (8002768 <HAL_RCC_OscConfig+0x26c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d06c      	beq.n	8002628 <HAL_RCC_OscConfig+0x12c>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d168      	bne.n	8002628 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e24c      	b.n	80029f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002562:	d106      	bne.n	8002572 <HAL_RCC_OscConfig+0x76>
 8002564:	4b80      	ldr	r3, [pc, #512]	@ (8002768 <HAL_RCC_OscConfig+0x26c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a7f      	ldr	r2, [pc, #508]	@ (8002768 <HAL_RCC_OscConfig+0x26c>)
 800256a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800256e:	6013      	str	r3, [r2, #0]
 8002570:	e02e      	b.n	80025d0 <HAL_RCC_OscConfig+0xd4>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10c      	bne.n	8002594 <HAL_RCC_OscConfig+0x98>
 800257a:	4b7b      	ldr	r3, [pc, #492]	@ (8002768 <HAL_RCC_OscConfig+0x26c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a7a      	ldr	r2, [pc, #488]	@ (8002768 <HAL_RCC_OscConfig+0x26c>)
 8002580:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	4b78      	ldr	r3, [pc, #480]	@ (8002768 <HAL_RCC_OscConfig+0x26c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a77      	ldr	r2, [pc, #476]	@ (8002768 <HAL_RCC_OscConfig+0x26c>)
 800258c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	e01d      	b.n	80025d0 <HAL_RCC_OscConfig+0xd4>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800259c:	d10c      	bne.n	80025b8 <HAL_RCC_OscConfig+0xbc>
 800259e:	4b72      	ldr	r3, [pc, #456]	@ (8002768 <HAL_RCC_OscConfig+0x26c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a71      	ldr	r2, [pc, #452]	@ (8002768 <HAL_RCC_OscConfig+0x26c>)
 80025a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	4b6f      	ldr	r3, [pc, #444]	@ (8002768 <HAL_RCC_OscConfig+0x26c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a6e      	ldr	r2, [pc, #440]	@ (8002768 <HAL_RCC_OscConfig+0x26c>)
 80025b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	e00b      	b.n	80025d0 <HAL_RCC_OscConfig+0xd4>
 80025b8:	4b6b      	ldr	r3, [pc, #428]	@ (8002768 <HAL_RCC_OscConfig+0x26c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a6a      	ldr	r2, [pc, #424]	@ (8002768 <HAL_RCC_OscConfig+0x26c>)
 80025be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	4b68      	ldr	r3, [pc, #416]	@ (8002768 <HAL_RCC_OscConfig+0x26c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a67      	ldr	r2, [pc, #412]	@ (8002768 <HAL_RCC_OscConfig+0x26c>)
 80025ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d013      	beq.n	8002600 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d8:	f7ff fad0 	bl	8001b7c <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e0:	f7ff facc 	bl	8001b7c <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b64      	cmp	r3, #100	@ 0x64
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e200      	b.n	80029f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f2:	4b5d      	ldr	r3, [pc, #372]	@ (8002768 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0xe4>
 80025fe:	e014      	b.n	800262a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002600:	f7ff fabc 	bl	8001b7c <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002608:	f7ff fab8 	bl	8001b7c <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b64      	cmp	r3, #100	@ 0x64
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e1ec      	b.n	80029f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800261a:	4b53      	ldr	r3, [pc, #332]	@ (8002768 <HAL_RCC_OscConfig+0x26c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0x10c>
 8002626:	e000      	b.n	800262a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d063      	beq.n	80026fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002636:	4b4c      	ldr	r3, [pc, #304]	@ (8002768 <HAL_RCC_OscConfig+0x26c>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00b      	beq.n	800265a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002642:	4b49      	ldr	r3, [pc, #292]	@ (8002768 <HAL_RCC_OscConfig+0x26c>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f003 030c 	and.w	r3, r3, #12
 800264a:	2b08      	cmp	r3, #8
 800264c:	d11c      	bne.n	8002688 <HAL_RCC_OscConfig+0x18c>
 800264e:	4b46      	ldr	r3, [pc, #280]	@ (8002768 <HAL_RCC_OscConfig+0x26c>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d116      	bne.n	8002688 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800265a:	4b43      	ldr	r3, [pc, #268]	@ (8002768 <HAL_RCC_OscConfig+0x26c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d005      	beq.n	8002672 <HAL_RCC_OscConfig+0x176>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d001      	beq.n	8002672 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e1c0      	b.n	80029f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002672:	4b3d      	ldr	r3, [pc, #244]	@ (8002768 <HAL_RCC_OscConfig+0x26c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	4939      	ldr	r1, [pc, #228]	@ (8002768 <HAL_RCC_OscConfig+0x26c>)
 8002682:	4313      	orrs	r3, r2
 8002684:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002686:	e03a      	b.n	80026fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d020      	beq.n	80026d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002690:	4b36      	ldr	r3, [pc, #216]	@ (800276c <HAL_RCC_OscConfig+0x270>)
 8002692:	2201      	movs	r2, #1
 8002694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002696:	f7ff fa71 	bl	8001b7c <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800269e:	f7ff fa6d 	bl	8001b7c <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e1a1      	b.n	80029f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002768 <HAL_RCC_OscConfig+0x26c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0f0      	beq.n	800269e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002768 <HAL_RCC_OscConfig+0x26c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	4927      	ldr	r1, [pc, #156]	@ (8002768 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	600b      	str	r3, [r1, #0]
 80026d0:	e015      	b.n	80026fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026d2:	4b26      	ldr	r3, [pc, #152]	@ (800276c <HAL_RCC_OscConfig+0x270>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d8:	f7ff fa50 	bl	8001b7c <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026e0:	f7ff fa4c 	bl	8001b7c <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e180      	b.n	80029f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002768 <HAL_RCC_OscConfig+0x26c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d03a      	beq.n	8002780 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d019      	beq.n	8002746 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002712:	4b17      	ldr	r3, [pc, #92]	@ (8002770 <HAL_RCC_OscConfig+0x274>)
 8002714:	2201      	movs	r2, #1
 8002716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002718:	f7ff fa30 	bl	8001b7c <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002720:	f7ff fa2c 	bl	8001b7c <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e160      	b.n	80029f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002732:	4b0d      	ldr	r3, [pc, #52]	@ (8002768 <HAL_RCC_OscConfig+0x26c>)
 8002734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0f0      	beq.n	8002720 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800273e:	2001      	movs	r0, #1
 8002740:	f000 fa9c 	bl	8002c7c <RCC_Delay>
 8002744:	e01c      	b.n	8002780 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002746:	4b0a      	ldr	r3, [pc, #40]	@ (8002770 <HAL_RCC_OscConfig+0x274>)
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274c:	f7ff fa16 	bl	8001b7c <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002752:	e00f      	b.n	8002774 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002754:	f7ff fa12 	bl	8001b7c <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d908      	bls.n	8002774 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e146      	b.n	80029f4 <HAL_RCC_OscConfig+0x4f8>
 8002766:	bf00      	nop
 8002768:	40021000 	.word	0x40021000
 800276c:	42420000 	.word	0x42420000
 8002770:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002774:	4b92      	ldr	r3, [pc, #584]	@ (80029c0 <HAL_RCC_OscConfig+0x4c4>)
 8002776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1e9      	bne.n	8002754 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 80a6 	beq.w	80028da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800278e:	2300      	movs	r3, #0
 8002790:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002792:	4b8b      	ldr	r3, [pc, #556]	@ (80029c0 <HAL_RCC_OscConfig+0x4c4>)
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10d      	bne.n	80027ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800279e:	4b88      	ldr	r3, [pc, #544]	@ (80029c0 <HAL_RCC_OscConfig+0x4c4>)
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	4a87      	ldr	r2, [pc, #540]	@ (80029c0 <HAL_RCC_OscConfig+0x4c4>)
 80027a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027a8:	61d3      	str	r3, [r2, #28]
 80027aa:	4b85      	ldr	r3, [pc, #532]	@ (80029c0 <HAL_RCC_OscConfig+0x4c4>)
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027b2:	60bb      	str	r3, [r7, #8]
 80027b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027b6:	2301      	movs	r3, #1
 80027b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ba:	4b82      	ldr	r3, [pc, #520]	@ (80029c4 <HAL_RCC_OscConfig+0x4c8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d118      	bne.n	80027f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027c6:	4b7f      	ldr	r3, [pc, #508]	@ (80029c4 <HAL_RCC_OscConfig+0x4c8>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a7e      	ldr	r2, [pc, #504]	@ (80029c4 <HAL_RCC_OscConfig+0x4c8>)
 80027cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027d2:	f7ff f9d3 	bl	8001b7c <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027da:	f7ff f9cf 	bl	8001b7c <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b64      	cmp	r3, #100	@ 0x64
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e103      	b.n	80029f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ec:	4b75      	ldr	r3, [pc, #468]	@ (80029c4 <HAL_RCC_OscConfig+0x4c8>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0f0      	beq.n	80027da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d106      	bne.n	800280e <HAL_RCC_OscConfig+0x312>
 8002800:	4b6f      	ldr	r3, [pc, #444]	@ (80029c0 <HAL_RCC_OscConfig+0x4c4>)
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	4a6e      	ldr	r2, [pc, #440]	@ (80029c0 <HAL_RCC_OscConfig+0x4c4>)
 8002806:	f043 0301 	orr.w	r3, r3, #1
 800280a:	6213      	str	r3, [r2, #32]
 800280c:	e02d      	b.n	800286a <HAL_RCC_OscConfig+0x36e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10c      	bne.n	8002830 <HAL_RCC_OscConfig+0x334>
 8002816:	4b6a      	ldr	r3, [pc, #424]	@ (80029c0 <HAL_RCC_OscConfig+0x4c4>)
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	4a69      	ldr	r2, [pc, #420]	@ (80029c0 <HAL_RCC_OscConfig+0x4c4>)
 800281c:	f023 0301 	bic.w	r3, r3, #1
 8002820:	6213      	str	r3, [r2, #32]
 8002822:	4b67      	ldr	r3, [pc, #412]	@ (80029c0 <HAL_RCC_OscConfig+0x4c4>)
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	4a66      	ldr	r2, [pc, #408]	@ (80029c0 <HAL_RCC_OscConfig+0x4c4>)
 8002828:	f023 0304 	bic.w	r3, r3, #4
 800282c:	6213      	str	r3, [r2, #32]
 800282e:	e01c      	b.n	800286a <HAL_RCC_OscConfig+0x36e>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	2b05      	cmp	r3, #5
 8002836:	d10c      	bne.n	8002852 <HAL_RCC_OscConfig+0x356>
 8002838:	4b61      	ldr	r3, [pc, #388]	@ (80029c0 <HAL_RCC_OscConfig+0x4c4>)
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	4a60      	ldr	r2, [pc, #384]	@ (80029c0 <HAL_RCC_OscConfig+0x4c4>)
 800283e:	f043 0304 	orr.w	r3, r3, #4
 8002842:	6213      	str	r3, [r2, #32]
 8002844:	4b5e      	ldr	r3, [pc, #376]	@ (80029c0 <HAL_RCC_OscConfig+0x4c4>)
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	4a5d      	ldr	r2, [pc, #372]	@ (80029c0 <HAL_RCC_OscConfig+0x4c4>)
 800284a:	f043 0301 	orr.w	r3, r3, #1
 800284e:	6213      	str	r3, [r2, #32]
 8002850:	e00b      	b.n	800286a <HAL_RCC_OscConfig+0x36e>
 8002852:	4b5b      	ldr	r3, [pc, #364]	@ (80029c0 <HAL_RCC_OscConfig+0x4c4>)
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	4a5a      	ldr	r2, [pc, #360]	@ (80029c0 <HAL_RCC_OscConfig+0x4c4>)
 8002858:	f023 0301 	bic.w	r3, r3, #1
 800285c:	6213      	str	r3, [r2, #32]
 800285e:	4b58      	ldr	r3, [pc, #352]	@ (80029c0 <HAL_RCC_OscConfig+0x4c4>)
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	4a57      	ldr	r2, [pc, #348]	@ (80029c0 <HAL_RCC_OscConfig+0x4c4>)
 8002864:	f023 0304 	bic.w	r3, r3, #4
 8002868:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d015      	beq.n	800289e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002872:	f7ff f983 	bl	8001b7c <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002878:	e00a      	b.n	8002890 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800287a:	f7ff f97f 	bl	8001b7c <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002888:	4293      	cmp	r3, r2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e0b1      	b.n	80029f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002890:	4b4b      	ldr	r3, [pc, #300]	@ (80029c0 <HAL_RCC_OscConfig+0x4c4>)
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0ee      	beq.n	800287a <HAL_RCC_OscConfig+0x37e>
 800289c:	e014      	b.n	80028c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800289e:	f7ff f96d 	bl	8001b7c <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a4:	e00a      	b.n	80028bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a6:	f7ff f969 	bl	8001b7c <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e09b      	b.n	80029f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028bc:	4b40      	ldr	r3, [pc, #256]	@ (80029c0 <HAL_RCC_OscConfig+0x4c4>)
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1ee      	bne.n	80028a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028c8:	7dfb      	ldrb	r3, [r7, #23]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d105      	bne.n	80028da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ce:	4b3c      	ldr	r3, [pc, #240]	@ (80029c0 <HAL_RCC_OscConfig+0x4c4>)
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	4a3b      	ldr	r2, [pc, #236]	@ (80029c0 <HAL_RCC_OscConfig+0x4c4>)
 80028d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 8087 	beq.w	80029f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028e4:	4b36      	ldr	r3, [pc, #216]	@ (80029c0 <HAL_RCC_OscConfig+0x4c4>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 030c 	and.w	r3, r3, #12
 80028ec:	2b08      	cmp	r3, #8
 80028ee:	d061      	beq.n	80029b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	69db      	ldr	r3, [r3, #28]
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d146      	bne.n	8002986 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f8:	4b33      	ldr	r3, [pc, #204]	@ (80029c8 <HAL_RCC_OscConfig+0x4cc>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fe:	f7ff f93d 	bl	8001b7c <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002906:	f7ff f939 	bl	8001b7c <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e06d      	b.n	80029f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002918:	4b29      	ldr	r3, [pc, #164]	@ (80029c0 <HAL_RCC_OscConfig+0x4c4>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1f0      	bne.n	8002906 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800292c:	d108      	bne.n	8002940 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800292e:	4b24      	ldr	r3, [pc, #144]	@ (80029c0 <HAL_RCC_OscConfig+0x4c4>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	4921      	ldr	r1, [pc, #132]	@ (80029c0 <HAL_RCC_OscConfig+0x4c4>)
 800293c:	4313      	orrs	r3, r2
 800293e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002940:	4b1f      	ldr	r3, [pc, #124]	@ (80029c0 <HAL_RCC_OscConfig+0x4c4>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a19      	ldr	r1, [r3, #32]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002950:	430b      	orrs	r3, r1
 8002952:	491b      	ldr	r1, [pc, #108]	@ (80029c0 <HAL_RCC_OscConfig+0x4c4>)
 8002954:	4313      	orrs	r3, r2
 8002956:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002958:	4b1b      	ldr	r3, [pc, #108]	@ (80029c8 <HAL_RCC_OscConfig+0x4cc>)
 800295a:	2201      	movs	r2, #1
 800295c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295e:	f7ff f90d 	bl	8001b7c <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002964:	e008      	b.n	8002978 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002966:	f7ff f909 	bl	8001b7c <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e03d      	b.n	80029f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002978:	4b11      	ldr	r3, [pc, #68]	@ (80029c0 <HAL_RCC_OscConfig+0x4c4>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0f0      	beq.n	8002966 <HAL_RCC_OscConfig+0x46a>
 8002984:	e035      	b.n	80029f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002986:	4b10      	ldr	r3, [pc, #64]	@ (80029c8 <HAL_RCC_OscConfig+0x4cc>)
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298c:	f7ff f8f6 	bl	8001b7c <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002994:	f7ff f8f2 	bl	8001b7c <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e026      	b.n	80029f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029a6:	4b06      	ldr	r3, [pc, #24]	@ (80029c0 <HAL_RCC_OscConfig+0x4c4>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f0      	bne.n	8002994 <HAL_RCC_OscConfig+0x498>
 80029b2:	e01e      	b.n	80029f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d107      	bne.n	80029cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e019      	b.n	80029f4 <HAL_RCC_OscConfig+0x4f8>
 80029c0:	40021000 	.word	0x40021000
 80029c4:	40007000 	.word	0x40007000
 80029c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029cc:	4b0b      	ldr	r3, [pc, #44]	@ (80029fc <HAL_RCC_OscConfig+0x500>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d106      	bne.n	80029ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d001      	beq.n	80029f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e000      	b.n	80029f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40021000 	.word	0x40021000

08002a00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e0d0      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a14:	4b6a      	ldr	r3, [pc, #424]	@ (8002bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d910      	bls.n	8002a44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a22:	4b67      	ldr	r3, [pc, #412]	@ (8002bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f023 0207 	bic.w	r2, r3, #7
 8002a2a:	4965      	ldr	r1, [pc, #404]	@ (8002bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a32:	4b63      	ldr	r3, [pc, #396]	@ (8002bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d001      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e0b8      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d020      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a5c:	4b59      	ldr	r3, [pc, #356]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	4a58      	ldr	r2, [pc, #352]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a62:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d005      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a74:	4b53      	ldr	r3, [pc, #332]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	4a52      	ldr	r2, [pc, #328]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002a7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a80:	4b50      	ldr	r3, [pc, #320]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	494d      	ldr	r1, [pc, #308]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d040      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d107      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa6:	4b47      	ldr	r3, [pc, #284]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d115      	bne.n	8002ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e07f      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d107      	bne.n	8002ace <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002abe:	4b41      	ldr	r3, [pc, #260]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d109      	bne.n	8002ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e073      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ace:	4b3d      	ldr	r3, [pc, #244]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e06b      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ade:	4b39      	ldr	r3, [pc, #228]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f023 0203 	bic.w	r2, r3, #3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	4936      	ldr	r1, [pc, #216]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002af0:	f7ff f844 	bl	8001b7c <HAL_GetTick>
 8002af4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af6:	e00a      	b.n	8002b0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af8:	f7ff f840 	bl	8001b7c <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e053      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0e:	4b2d      	ldr	r3, [pc, #180]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f003 020c 	and.w	r2, r3, #12
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d1eb      	bne.n	8002af8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b20:	4b27      	ldr	r3, [pc, #156]	@ (8002bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d210      	bcs.n	8002b50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2e:	4b24      	ldr	r3, [pc, #144]	@ (8002bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f023 0207 	bic.w	r2, r3, #7
 8002b36:	4922      	ldr	r1, [pc, #136]	@ (8002bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3e:	4b20      	ldr	r3, [pc, #128]	@ (8002bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d001      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e032      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d008      	beq.n	8002b6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b5c:	4b19      	ldr	r3, [pc, #100]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	4916      	ldr	r1, [pc, #88]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d009      	beq.n	8002b8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b7a:	4b12      	ldr	r3, [pc, #72]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	490e      	ldr	r1, [pc, #56]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b8e:	f000 f821 	bl	8002bd4 <HAL_RCC_GetSysClockFreq>
 8002b92:	4602      	mov	r2, r0
 8002b94:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	091b      	lsrs	r3, r3, #4
 8002b9a:	f003 030f 	and.w	r3, r3, #15
 8002b9e:	490a      	ldr	r1, [pc, #40]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ba0:	5ccb      	ldrb	r3, [r1, r3]
 8002ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba6:	4a09      	ldr	r2, [pc, #36]	@ (8002bcc <HAL_RCC_ClockConfig+0x1cc>)
 8002ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002baa:	4b09      	ldr	r3, [pc, #36]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1d0>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fe ffa2 	bl	8001af8 <HAL_InitTick>

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40022000 	.word	0x40022000
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	08008098 	.word	0x08008098
 8002bcc:	20000000 	.word	0x20000000
 8002bd0:	20000004 	.word	0x20000004

08002bd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b087      	sub	sp, #28
 8002bd8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	2300      	movs	r3, #0
 8002be0:	60bb      	str	r3, [r7, #8]
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
 8002be6:	2300      	movs	r3, #0
 8002be8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bee:	4b1e      	ldr	r3, [pc, #120]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d002      	beq.n	8002c04 <HAL_RCC_GetSysClockFreq+0x30>
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d003      	beq.n	8002c0a <HAL_RCC_GetSysClockFreq+0x36>
 8002c02:	e027      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c04:	4b19      	ldr	r3, [pc, #100]	@ (8002c6c <HAL_RCC_GetSysClockFreq+0x98>)
 8002c06:	613b      	str	r3, [r7, #16]
      break;
 8002c08:	e027      	b.n	8002c5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	0c9b      	lsrs	r3, r3, #18
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	4a17      	ldr	r2, [pc, #92]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c14:	5cd3      	ldrb	r3, [r2, r3]
 8002c16:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d010      	beq.n	8002c44 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c22:	4b11      	ldr	r3, [pc, #68]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	0c5b      	lsrs	r3, r3, #17
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	4a11      	ldr	r2, [pc, #68]	@ (8002c74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c2e:	5cd3      	ldrb	r3, [r2, r3]
 8002c30:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a0d      	ldr	r2, [pc, #52]	@ (8002c6c <HAL_RCC_GetSysClockFreq+0x98>)
 8002c36:	fb03 f202 	mul.w	r2, r3, r2
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c40:	617b      	str	r3, [r7, #20]
 8002c42:	e004      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a0c      	ldr	r2, [pc, #48]	@ (8002c78 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c48:	fb02 f303 	mul.w	r3, r2, r3
 8002c4c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	613b      	str	r3, [r7, #16]
      break;
 8002c52:	e002      	b.n	8002c5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c54:	4b05      	ldr	r3, [pc, #20]	@ (8002c6c <HAL_RCC_GetSysClockFreq+0x98>)
 8002c56:	613b      	str	r3, [r7, #16]
      break;
 8002c58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c5a:	693b      	ldr	r3, [r7, #16]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	371c      	adds	r7, #28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	007a1200 	.word	0x007a1200
 8002c70:	080080a8 	.word	0x080080a8
 8002c74:	080080b8 	.word	0x080080b8
 8002c78:	003d0900 	.word	0x003d0900

08002c7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c84:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb0 <RCC_Delay+0x34>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a0a      	ldr	r2, [pc, #40]	@ (8002cb4 <RCC_Delay+0x38>)
 8002c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8e:	0a5b      	lsrs	r3, r3, #9
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	fb02 f303 	mul.w	r3, r2, r3
 8002c96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c98:	bf00      	nop
  }
  while (Delay --);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	1e5a      	subs	r2, r3, #1
 8002c9e:	60fa      	str	r2, [r7, #12]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1f9      	bne.n	8002c98 <RCC_Delay+0x1c>
}
 8002ca4:	bf00      	nop
 8002ca6:	bf00      	nop
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr
 8002cb0:	20000000 	.word	0x20000000
 8002cb4:	10624dd3 	.word	0x10624dd3

08002cb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	613b      	str	r3, [r7, #16]
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d07d      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cd8:	4b4f      	ldr	r3, [pc, #316]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cda:	69db      	ldr	r3, [r3, #28]
 8002cdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10d      	bne.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce4:	4b4c      	ldr	r3, [pc, #304]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	4a4b      	ldr	r2, [pc, #300]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cee:	61d3      	str	r3, [r2, #28]
 8002cf0:	4b49      	ldr	r3, [pc, #292]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf2:	69db      	ldr	r3, [r3, #28]
 8002cf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cf8:	60bb      	str	r3, [r7, #8]
 8002cfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d00:	4b46      	ldr	r3, [pc, #280]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d118      	bne.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d0c:	4b43      	ldr	r3, [pc, #268]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a42      	ldr	r2, [pc, #264]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d18:	f7fe ff30 	bl	8001b7c <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1e:	e008      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d20:	f7fe ff2c 	bl	8001b7c <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b64      	cmp	r3, #100	@ 0x64
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e06d      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d32:	4b3a      	ldr	r3, [pc, #232]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0f0      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d3e:	4b36      	ldr	r3, [pc, #216]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d46:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d02e      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d027      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d5c:	4b2e      	ldr	r3, [pc, #184]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d64:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d66:	4b2e      	ldr	r3, [pc, #184]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d68:	2201      	movs	r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d6c:	4b2c      	ldr	r3, [pc, #176]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d72:	4a29      	ldr	r2, [pc, #164]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d014      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d82:	f7fe fefb 	bl	8001b7c <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d88:	e00a      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8a:	f7fe fef7 	bl	8001b7c <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e036      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da0:	4b1d      	ldr	r3, [pc, #116]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0ee      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dac:	4b1a      	ldr	r3, [pc, #104]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	4917      	ldr	r1, [pc, #92]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002dbe:	7dfb      	ldrb	r3, [r7, #23]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d105      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc4:	4b14      	ldr	r3, [pc, #80]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	4a13      	ldr	r2, [pc, #76]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	490b      	ldr	r1, [pc, #44]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d008      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dfa:	4b07      	ldr	r3, [pc, #28]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	4904      	ldr	r1, [pc, #16]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	40007000 	.word	0x40007000
 8002e20:	42420440 	.word	0x42420440

08002e24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e076      	b.n	8002f24 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d108      	bne.n	8002e50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e46:	d009      	beq.n	8002e5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	61da      	str	r2, [r3, #28]
 8002e4e:	e005      	b.n	8002e5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d106      	bne.n	8002e7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7fe fcc4 	bl	8001804 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ee0:	ea42 0103 	orr.w	r1, r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	0c1a      	lsrs	r2, r3, #16
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f002 0204 	and.w	r2, r2, #4
 8002f02:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	69da      	ldr	r2, [r3, #28]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f12:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b088      	sub	sp, #32
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	603b      	str	r3, [r7, #0]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f3c:	f7fe fe1e 	bl	8001b7c <HAL_GetTick>
 8002f40:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002f42:	88fb      	ldrh	r3, [r7, #6]
 8002f44:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d001      	beq.n	8002f56 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002f52:	2302      	movs	r3, #2
 8002f54:	e12a      	b.n	80031ac <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d002      	beq.n	8002f62 <HAL_SPI_Transmit+0x36>
 8002f5c:	88fb      	ldrh	r3, [r7, #6]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e122      	b.n	80031ac <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d101      	bne.n	8002f74 <HAL_SPI_Transmit+0x48>
 8002f70:	2302      	movs	r3, #2
 8002f72:	e11b      	b.n	80031ac <HAL_SPI_Transmit+0x280>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2203      	movs	r2, #3
 8002f80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	88fa      	ldrh	r2, [r7, #6]
 8002f94:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	88fa      	ldrh	r2, [r7, #6]
 8002f9a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fc2:	d10f      	bne.n	8002fe4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fd2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002fe2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fee:	2b40      	cmp	r3, #64	@ 0x40
 8002ff0:	d007      	beq.n	8003002 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003000:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800300a:	d152      	bne.n	80030b2 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d002      	beq.n	800301a <HAL_SPI_Transmit+0xee>
 8003014:	8b7b      	ldrh	r3, [r7, #26]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d145      	bne.n	80030a6 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301e:	881a      	ldrh	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302a:	1c9a      	adds	r2, r3, #2
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003034:	b29b      	uxth	r3, r3
 8003036:	3b01      	subs	r3, #1
 8003038:	b29a      	uxth	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800303e:	e032      	b.n	80030a6 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b02      	cmp	r3, #2
 800304c:	d112      	bne.n	8003074 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003052:	881a      	ldrh	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305e:	1c9a      	adds	r2, r3, #2
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003068:	b29b      	uxth	r3, r3
 800306a:	3b01      	subs	r3, #1
 800306c:	b29a      	uxth	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003072:	e018      	b.n	80030a6 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003074:	f7fe fd82 	bl	8001b7c <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d803      	bhi.n	800308c <HAL_SPI_Transmit+0x160>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308a:	d102      	bne.n	8003092 <HAL_SPI_Transmit+0x166>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d109      	bne.n	80030a6 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e082      	b.n	80031ac <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1c7      	bne.n	8003040 <HAL_SPI_Transmit+0x114>
 80030b0:	e053      	b.n	800315a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d002      	beq.n	80030c0 <HAL_SPI_Transmit+0x194>
 80030ba:	8b7b      	ldrh	r3, [r7, #26]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d147      	bne.n	8003150 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	330c      	adds	r3, #12
 80030ca:	7812      	ldrb	r2, [r2, #0]
 80030cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d2:	1c5a      	adds	r2, r3, #1
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030dc:	b29b      	uxth	r3, r3
 80030de:	3b01      	subs	r3, #1
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80030e6:	e033      	b.n	8003150 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d113      	bne.n	800311e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	330c      	adds	r3, #12
 8003100:	7812      	ldrb	r2, [r2, #0]
 8003102:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003108:	1c5a      	adds	r2, r3, #1
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003112:	b29b      	uxth	r3, r3
 8003114:	3b01      	subs	r3, #1
 8003116:	b29a      	uxth	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800311c:	e018      	b.n	8003150 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800311e:	f7fe fd2d 	bl	8001b7c <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d803      	bhi.n	8003136 <HAL_SPI_Transmit+0x20a>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003134:	d102      	bne.n	800313c <HAL_SPI_Transmit+0x210>
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d109      	bne.n	8003150 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e02d      	b.n	80031ac <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003154:	b29b      	uxth	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1c6      	bne.n	80030e8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800315a:	69fa      	ldr	r2, [r7, #28]
 800315c:	6839      	ldr	r1, [r7, #0]
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 fbd2 	bl	8003908 <SPI_EndRxTxTransaction>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d002      	beq.n	8003170 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2220      	movs	r2, #32
 800316e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10a      	bne.n	800318e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003178:	2300      	movs	r3, #0
 800317a:	617b      	str	r3, [r7, #20]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	617b      	str	r3, [r7, #20]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	617b      	str	r3, [r7, #20]
 800318c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80031aa:	2300      	movs	r3, #0
  }
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3720      	adds	r7, #32
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b088      	sub	sp, #32
 80031b8:	af02      	add	r7, sp, #8
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	603b      	str	r3, [r7, #0]
 80031c0:	4613      	mov	r3, r2
 80031c2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d001      	beq.n	80031d4 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80031d0:	2302      	movs	r3, #2
 80031d2:	e104      	b.n	80033de <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031dc:	d112      	bne.n	8003204 <HAL_SPI_Receive+0x50>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10e      	bne.n	8003204 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2204      	movs	r2, #4
 80031ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80031ee:	88fa      	ldrh	r2, [r7, #6]
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	4613      	mov	r3, r2
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	68b9      	ldr	r1, [r7, #8]
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f000 f8f3 	bl	80033e6 <HAL_SPI_TransmitReceive>
 8003200:	4603      	mov	r3, r0
 8003202:	e0ec      	b.n	80033de <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003204:	f7fe fcba 	bl	8001b7c <HAL_GetTick>
 8003208:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d002      	beq.n	8003216 <HAL_SPI_Receive+0x62>
 8003210:	88fb      	ldrh	r3, [r7, #6]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e0e1      	b.n	80033de <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003220:	2b01      	cmp	r3, #1
 8003222:	d101      	bne.n	8003228 <HAL_SPI_Receive+0x74>
 8003224:	2302      	movs	r3, #2
 8003226:	e0da      	b.n	80033de <HAL_SPI_Receive+0x22a>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2204      	movs	r2, #4
 8003234:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	88fa      	ldrh	r2, [r7, #6]
 8003248:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	88fa      	ldrh	r2, [r7, #6]
 800324e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003276:	d10f      	bne.n	8003298 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003286:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003296:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a2:	2b40      	cmp	r3, #64	@ 0x40
 80032a4:	d007      	beq.n	80032b6 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032b4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d170      	bne.n	80033a0 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80032be:	e035      	b.n	800332c <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d115      	bne.n	80032fa <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f103 020c 	add.w	r2, r3, #12
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032da:	7812      	ldrb	r2, [r2, #0]
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	3b01      	subs	r3, #1
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80032f8:	e018      	b.n	800332c <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032fa:	f7fe fc3f 	bl	8001b7c <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d803      	bhi.n	8003312 <HAL_SPI_Receive+0x15e>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003310:	d102      	bne.n	8003318 <HAL_SPI_Receive+0x164>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d109      	bne.n	800332c <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e058      	b.n	80033de <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003330:	b29b      	uxth	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1c4      	bne.n	80032c0 <HAL_SPI_Receive+0x10c>
 8003336:	e038      	b.n	80033aa <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b01      	cmp	r3, #1
 8003344:	d113      	bne.n	800336e <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68da      	ldr	r2, [r3, #12]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003350:	b292      	uxth	r2, r2
 8003352:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003358:	1c9a      	adds	r2, r3, #2
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003362:	b29b      	uxth	r3, r3
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800336c:	e018      	b.n	80033a0 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800336e:	f7fe fc05 	bl	8001b7c <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	429a      	cmp	r2, r3
 800337c:	d803      	bhi.n	8003386 <HAL_SPI_Receive+0x1d2>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003384:	d102      	bne.n	800338c <HAL_SPI_Receive+0x1d8>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d109      	bne.n	80033a0 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e01e      	b.n	80033de <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1c6      	bne.n	8003338 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	6839      	ldr	r1, [r7, #0]
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 fa58 	bl	8003864 <SPI_EndRxTransaction>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d002      	beq.n	80033c0 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2220      	movs	r2, #32
 80033be:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e000      	b.n	80033de <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80033dc:	2300      	movs	r3, #0
  }
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3718      	adds	r7, #24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b08a      	sub	sp, #40	@ 0x28
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	60f8      	str	r0, [r7, #12]
 80033ee:	60b9      	str	r1, [r7, #8]
 80033f0:	607a      	str	r2, [r7, #4]
 80033f2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80033f4:	2301      	movs	r3, #1
 80033f6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033f8:	f7fe fbc0 	bl	8001b7c <HAL_GetTick>
 80033fc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003404:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800340c:	887b      	ldrh	r3, [r7, #2]
 800340e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003410:	7ffb      	ldrb	r3, [r7, #31]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d00c      	beq.n	8003430 <HAL_SPI_TransmitReceive+0x4a>
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800341c:	d106      	bne.n	800342c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d102      	bne.n	800342c <HAL_SPI_TransmitReceive+0x46>
 8003426:	7ffb      	ldrb	r3, [r7, #31]
 8003428:	2b04      	cmp	r3, #4
 800342a:	d001      	beq.n	8003430 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800342c:	2302      	movs	r3, #2
 800342e:	e17f      	b.n	8003730 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d005      	beq.n	8003442 <HAL_SPI_TransmitReceive+0x5c>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d002      	beq.n	8003442 <HAL_SPI_TransmitReceive+0x5c>
 800343c:	887b      	ldrh	r3, [r7, #2]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e174      	b.n	8003730 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800344c:	2b01      	cmp	r3, #1
 800344e:	d101      	bne.n	8003454 <HAL_SPI_TransmitReceive+0x6e>
 8003450:	2302      	movs	r3, #2
 8003452:	e16d      	b.n	8003730 <HAL_SPI_TransmitReceive+0x34a>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b04      	cmp	r3, #4
 8003466:	d003      	beq.n	8003470 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2205      	movs	r2, #5
 800346c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	887a      	ldrh	r2, [r7, #2]
 8003480:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	887a      	ldrh	r2, [r7, #2]
 8003486:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	887a      	ldrh	r2, [r7, #2]
 8003492:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	887a      	ldrh	r2, [r7, #2]
 8003498:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034b0:	2b40      	cmp	r3, #64	@ 0x40
 80034b2:	d007      	beq.n	80034c4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034cc:	d17e      	bne.n	80035cc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d002      	beq.n	80034dc <HAL_SPI_TransmitReceive+0xf6>
 80034d6:	8afb      	ldrh	r3, [r7, #22]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d16c      	bne.n	80035b6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e0:	881a      	ldrh	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ec:	1c9a      	adds	r2, r3, #2
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003500:	e059      	b.n	80035b6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b02      	cmp	r3, #2
 800350e:	d11b      	bne.n	8003548 <HAL_SPI_TransmitReceive+0x162>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003514:	b29b      	uxth	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d016      	beq.n	8003548 <HAL_SPI_TransmitReceive+0x162>
 800351a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351c:	2b01      	cmp	r3, #1
 800351e:	d113      	bne.n	8003548 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003524:	881a      	ldrh	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003530:	1c9a      	adds	r2, r3, #2
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800353a:	b29b      	uxth	r3, r3
 800353c:	3b01      	subs	r3, #1
 800353e:	b29a      	uxth	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b01      	cmp	r3, #1
 8003554:	d119      	bne.n	800358a <HAL_SPI_TransmitReceive+0x1a4>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800355a:	b29b      	uxth	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	d014      	beq.n	800358a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800356a:	b292      	uxth	r2, r2
 800356c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003572:	1c9a      	adds	r2, r3, #2
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800357c:	b29b      	uxth	r3, r3
 800357e:	3b01      	subs	r3, #1
 8003580:	b29a      	uxth	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003586:	2301      	movs	r3, #1
 8003588:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800358a:	f7fe faf7 	bl	8001b7c <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003596:	429a      	cmp	r2, r3
 8003598:	d80d      	bhi.n	80035b6 <HAL_SPI_TransmitReceive+0x1d0>
 800359a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800359c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a0:	d009      	beq.n	80035b6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e0bc      	b.n	8003730 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1a0      	bne.n	8003502 <HAL_SPI_TransmitReceive+0x11c>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d19b      	bne.n	8003502 <HAL_SPI_TransmitReceive+0x11c>
 80035ca:	e082      	b.n	80036d2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <HAL_SPI_TransmitReceive+0x1f4>
 80035d4:	8afb      	ldrh	r3, [r7, #22]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d171      	bne.n	80036be <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	330c      	adds	r3, #12
 80035e4:	7812      	ldrb	r2, [r2, #0]
 80035e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ec:	1c5a      	adds	r2, r3, #1
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003600:	e05d      	b.n	80036be <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b02      	cmp	r3, #2
 800360e:	d11c      	bne.n	800364a <HAL_SPI_TransmitReceive+0x264>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003614:	b29b      	uxth	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d017      	beq.n	800364a <HAL_SPI_TransmitReceive+0x264>
 800361a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361c:	2b01      	cmp	r3, #1
 800361e:	d114      	bne.n	800364a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	330c      	adds	r3, #12
 800362a:	7812      	ldrb	r2, [r2, #0]
 800362c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800363c:	b29b      	uxth	r3, r3
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003646:	2300      	movs	r3, #0
 8003648:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b01      	cmp	r3, #1
 8003656:	d119      	bne.n	800368c <HAL_SPI_TransmitReceive+0x2a6>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800365c:	b29b      	uxth	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d014      	beq.n	800368c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800366c:	b2d2      	uxtb	r2, r2
 800366e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800367e:	b29b      	uxth	r3, r3
 8003680:	3b01      	subs	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003688:	2301      	movs	r3, #1
 800368a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800368c:	f7fe fa76 	bl	8001b7c <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003698:	429a      	cmp	r2, r3
 800369a:	d803      	bhi.n	80036a4 <HAL_SPI_TransmitReceive+0x2be>
 800369c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800369e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a2:	d102      	bne.n	80036aa <HAL_SPI_TransmitReceive+0x2c4>
 80036a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d109      	bne.n	80036be <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e038      	b.n	8003730 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d19c      	bne.n	8003602 <HAL_SPI_TransmitReceive+0x21c>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d197      	bne.n	8003602 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036d2:	6a3a      	ldr	r2, [r7, #32]
 80036d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 f916 	bl	8003908 <SPI_EndRxTxTransaction>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d008      	beq.n	80036f4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2220      	movs	r2, #32
 80036e6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e01d      	b.n	8003730 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10a      	bne.n	8003712 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036fc:	2300      	movs	r3, #0
 80036fe:	613b      	str	r3, [r7, #16]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	613b      	str	r3, [r7, #16]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	613b      	str	r3, [r7, #16]
 8003710:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e000      	b.n	8003730 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800372e:	2300      	movs	r3, #0
  }
}
 8003730:	4618      	mov	r0, r3
 8003732:	3728      	adds	r7, #40	@ 0x28
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003746:	b2db      	uxtb	r3, r3
}
 8003748:	4618      	mov	r0, r3
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	bc80      	pop	{r7}
 8003750:	4770      	bx	lr
	...

08003754 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b088      	sub	sp, #32
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	603b      	str	r3, [r7, #0]
 8003760:	4613      	mov	r3, r2
 8003762:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003764:	f7fe fa0a 	bl	8001b7c <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800376c:	1a9b      	subs	r3, r3, r2
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	4413      	add	r3, r2
 8003772:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003774:	f7fe fa02 	bl	8001b7c <HAL_GetTick>
 8003778:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800377a:	4b39      	ldr	r3, [pc, #228]	@ (8003860 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	015b      	lsls	r3, r3, #5
 8003780:	0d1b      	lsrs	r3, r3, #20
 8003782:	69fa      	ldr	r2, [r7, #28]
 8003784:	fb02 f303 	mul.w	r3, r2, r3
 8003788:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800378a:	e054      	b.n	8003836 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003792:	d050      	beq.n	8003836 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003794:	f7fe f9f2 	bl	8001b7c <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	69fa      	ldr	r2, [r7, #28]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d902      	bls.n	80037aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d13d      	bne.n	8003826 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80037b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037c2:	d111      	bne.n	80037e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037cc:	d004      	beq.n	80037d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037d6:	d107      	bne.n	80037e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037f0:	d10f      	bne.n	8003812 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003810:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e017      	b.n	8003856 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800382c:	2300      	movs	r3, #0
 800382e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	3b01      	subs	r3, #1
 8003834:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	4013      	ands	r3, r2
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	429a      	cmp	r2, r3
 8003844:	bf0c      	ite	eq
 8003846:	2301      	moveq	r3, #1
 8003848:	2300      	movne	r3, #0
 800384a:	b2db      	uxtb	r3, r3
 800384c:	461a      	mov	r2, r3
 800384e:	79fb      	ldrb	r3, [r7, #7]
 8003850:	429a      	cmp	r2, r3
 8003852:	d19b      	bne.n	800378c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3720      	adds	r7, #32
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	20000000 	.word	0x20000000

08003864 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af02      	add	r7, sp, #8
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003878:	d111      	bne.n	800389e <SPI_EndRxTransaction+0x3a>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003882:	d004      	beq.n	800388e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800388c:	d107      	bne.n	800389e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800389c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038a6:	d117      	bne.n	80038d8 <SPI_EndRxTransaction+0x74>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038b0:	d112      	bne.n	80038d8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2200      	movs	r2, #0
 80038ba:	2101      	movs	r1, #1
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f7ff ff49 	bl	8003754 <SPI_WaitFlagStateUntilTimeout>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d01a      	beq.n	80038fe <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038cc:	f043 0220 	orr.w	r2, r3, #32
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e013      	b.n	8003900 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	2200      	movs	r2, #0
 80038e0:	2180      	movs	r1, #128	@ 0x80
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f7ff ff36 	bl	8003754 <SPI_WaitFlagStateUntilTimeout>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d007      	beq.n	80038fe <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f2:	f043 0220 	orr.w	r2, r3, #32
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e000      	b.n	8003900 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af02      	add	r7, sp, #8
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	2201      	movs	r2, #1
 800391c:	2102      	movs	r1, #2
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f7ff ff18 	bl	8003754 <SPI_WaitFlagStateUntilTimeout>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d007      	beq.n	800393a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800392e:	f043 0220 	orr.w	r2, r3, #32
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e013      	b.n	8003962 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	2200      	movs	r2, #0
 8003942:	2180      	movs	r1, #128	@ 0x80
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f7ff ff05 	bl	8003754 <SPI_WaitFlagStateUntilTimeout>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d007      	beq.n	8003960 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003954:	f043 0220 	orr.w	r2, r3, #32
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e000      	b.n	8003962 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <__cvt>:
 800396a:	2b00      	cmp	r3, #0
 800396c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003970:	461d      	mov	r5, r3
 8003972:	bfbb      	ittet	lt
 8003974:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003978:	461d      	movlt	r5, r3
 800397a:	2300      	movge	r3, #0
 800397c:	232d      	movlt	r3, #45	@ 0x2d
 800397e:	b088      	sub	sp, #32
 8003980:	4614      	mov	r4, r2
 8003982:	bfb8      	it	lt
 8003984:	4614      	movlt	r4, r2
 8003986:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003988:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800398a:	7013      	strb	r3, [r2, #0]
 800398c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800398e:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003992:	f023 0820 	bic.w	r8, r3, #32
 8003996:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800399a:	d005      	beq.n	80039a8 <__cvt+0x3e>
 800399c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80039a0:	d100      	bne.n	80039a4 <__cvt+0x3a>
 80039a2:	3601      	adds	r6, #1
 80039a4:	2302      	movs	r3, #2
 80039a6:	e000      	b.n	80039aa <__cvt+0x40>
 80039a8:	2303      	movs	r3, #3
 80039aa:	aa07      	add	r2, sp, #28
 80039ac:	9204      	str	r2, [sp, #16]
 80039ae:	aa06      	add	r2, sp, #24
 80039b0:	e9cd a202 	strd	sl, r2, [sp, #8]
 80039b4:	e9cd 3600 	strd	r3, r6, [sp]
 80039b8:	4622      	mov	r2, r4
 80039ba:	462b      	mov	r3, r5
 80039bc:	f001 f88c 	bl	8004ad8 <_dtoa_r>
 80039c0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80039c4:	4607      	mov	r7, r0
 80039c6:	d119      	bne.n	80039fc <__cvt+0x92>
 80039c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80039ca:	07db      	lsls	r3, r3, #31
 80039cc:	d50e      	bpl.n	80039ec <__cvt+0x82>
 80039ce:	eb00 0906 	add.w	r9, r0, r6
 80039d2:	2200      	movs	r2, #0
 80039d4:	2300      	movs	r3, #0
 80039d6:	4620      	mov	r0, r4
 80039d8:	4629      	mov	r1, r5
 80039da:	f7fc ffe5 	bl	80009a8 <__aeabi_dcmpeq>
 80039de:	b108      	cbz	r0, 80039e4 <__cvt+0x7a>
 80039e0:	f8cd 901c 	str.w	r9, [sp, #28]
 80039e4:	2230      	movs	r2, #48	@ 0x30
 80039e6:	9b07      	ldr	r3, [sp, #28]
 80039e8:	454b      	cmp	r3, r9
 80039ea:	d31e      	bcc.n	8003a2a <__cvt+0xc0>
 80039ec:	4638      	mov	r0, r7
 80039ee:	9b07      	ldr	r3, [sp, #28]
 80039f0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80039f2:	1bdb      	subs	r3, r3, r7
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	b008      	add	sp, #32
 80039f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003a00:	eb00 0906 	add.w	r9, r0, r6
 8003a04:	d1e5      	bne.n	80039d2 <__cvt+0x68>
 8003a06:	7803      	ldrb	r3, [r0, #0]
 8003a08:	2b30      	cmp	r3, #48	@ 0x30
 8003a0a:	d10a      	bne.n	8003a22 <__cvt+0xb8>
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	2300      	movs	r3, #0
 8003a10:	4620      	mov	r0, r4
 8003a12:	4629      	mov	r1, r5
 8003a14:	f7fc ffc8 	bl	80009a8 <__aeabi_dcmpeq>
 8003a18:	b918      	cbnz	r0, 8003a22 <__cvt+0xb8>
 8003a1a:	f1c6 0601 	rsb	r6, r6, #1
 8003a1e:	f8ca 6000 	str.w	r6, [sl]
 8003a22:	f8da 3000 	ldr.w	r3, [sl]
 8003a26:	4499      	add	r9, r3
 8003a28:	e7d3      	b.n	80039d2 <__cvt+0x68>
 8003a2a:	1c59      	adds	r1, r3, #1
 8003a2c:	9107      	str	r1, [sp, #28]
 8003a2e:	701a      	strb	r2, [r3, #0]
 8003a30:	e7d9      	b.n	80039e6 <__cvt+0x7c>

08003a32 <__exponent>:
 8003a32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a34:	2900      	cmp	r1, #0
 8003a36:	bfb6      	itet	lt
 8003a38:	232d      	movlt	r3, #45	@ 0x2d
 8003a3a:	232b      	movge	r3, #43	@ 0x2b
 8003a3c:	4249      	neglt	r1, r1
 8003a3e:	2909      	cmp	r1, #9
 8003a40:	7002      	strb	r2, [r0, #0]
 8003a42:	7043      	strb	r3, [r0, #1]
 8003a44:	dd29      	ble.n	8003a9a <__exponent+0x68>
 8003a46:	f10d 0307 	add.w	r3, sp, #7
 8003a4a:	461d      	mov	r5, r3
 8003a4c:	270a      	movs	r7, #10
 8003a4e:	fbb1 f6f7 	udiv	r6, r1, r7
 8003a52:	461a      	mov	r2, r3
 8003a54:	fb07 1416 	mls	r4, r7, r6, r1
 8003a58:	3430      	adds	r4, #48	@ 0x30
 8003a5a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003a5e:	460c      	mov	r4, r1
 8003a60:	2c63      	cmp	r4, #99	@ 0x63
 8003a62:	4631      	mov	r1, r6
 8003a64:	f103 33ff 	add.w	r3, r3, #4294967295
 8003a68:	dcf1      	bgt.n	8003a4e <__exponent+0x1c>
 8003a6a:	3130      	adds	r1, #48	@ 0x30
 8003a6c:	1e94      	subs	r4, r2, #2
 8003a6e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003a72:	4623      	mov	r3, r4
 8003a74:	1c41      	adds	r1, r0, #1
 8003a76:	42ab      	cmp	r3, r5
 8003a78:	d30a      	bcc.n	8003a90 <__exponent+0x5e>
 8003a7a:	f10d 0309 	add.w	r3, sp, #9
 8003a7e:	1a9b      	subs	r3, r3, r2
 8003a80:	42ac      	cmp	r4, r5
 8003a82:	bf88      	it	hi
 8003a84:	2300      	movhi	r3, #0
 8003a86:	3302      	adds	r3, #2
 8003a88:	4403      	add	r3, r0
 8003a8a:	1a18      	subs	r0, r3, r0
 8003a8c:	b003      	add	sp, #12
 8003a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a90:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003a94:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003a98:	e7ed      	b.n	8003a76 <__exponent+0x44>
 8003a9a:	2330      	movs	r3, #48	@ 0x30
 8003a9c:	3130      	adds	r1, #48	@ 0x30
 8003a9e:	7083      	strb	r3, [r0, #2]
 8003aa0:	70c1      	strb	r1, [r0, #3]
 8003aa2:	1d03      	adds	r3, r0, #4
 8003aa4:	e7f1      	b.n	8003a8a <__exponent+0x58>
	...

08003aa8 <_printf_float>:
 8003aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aac:	b091      	sub	sp, #68	@ 0x44
 8003aae:	460c      	mov	r4, r1
 8003ab0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003ab4:	4616      	mov	r6, r2
 8003ab6:	461f      	mov	r7, r3
 8003ab8:	4605      	mov	r5, r0
 8003aba:	f000 feeb 	bl	8004894 <_localeconv_r>
 8003abe:	6803      	ldr	r3, [r0, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	9308      	str	r3, [sp, #32]
 8003ac4:	f7fc fb44 	bl	8000150 <strlen>
 8003ac8:	2300      	movs	r3, #0
 8003aca:	930e      	str	r3, [sp, #56]	@ 0x38
 8003acc:	f8d8 3000 	ldr.w	r3, [r8]
 8003ad0:	9009      	str	r0, [sp, #36]	@ 0x24
 8003ad2:	3307      	adds	r3, #7
 8003ad4:	f023 0307 	bic.w	r3, r3, #7
 8003ad8:	f103 0208 	add.w	r2, r3, #8
 8003adc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003ae0:	f8d4 b000 	ldr.w	fp, [r4]
 8003ae4:	f8c8 2000 	str.w	r2, [r8]
 8003ae8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003aec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003af0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003af2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003af6:	f04f 32ff 	mov.w	r2, #4294967295
 8003afa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003afe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003b02:	4b9c      	ldr	r3, [pc, #624]	@ (8003d74 <_printf_float+0x2cc>)
 8003b04:	f7fc ff82 	bl	8000a0c <__aeabi_dcmpun>
 8003b08:	bb70      	cbnz	r0, 8003b68 <_printf_float+0xc0>
 8003b0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003b12:	4b98      	ldr	r3, [pc, #608]	@ (8003d74 <_printf_float+0x2cc>)
 8003b14:	f7fc ff5c 	bl	80009d0 <__aeabi_dcmple>
 8003b18:	bb30      	cbnz	r0, 8003b68 <_printf_float+0xc0>
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	4640      	mov	r0, r8
 8003b20:	4649      	mov	r1, r9
 8003b22:	f7fc ff4b 	bl	80009bc <__aeabi_dcmplt>
 8003b26:	b110      	cbz	r0, 8003b2e <_printf_float+0x86>
 8003b28:	232d      	movs	r3, #45	@ 0x2d
 8003b2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b2e:	4a92      	ldr	r2, [pc, #584]	@ (8003d78 <_printf_float+0x2d0>)
 8003b30:	4b92      	ldr	r3, [pc, #584]	@ (8003d7c <_printf_float+0x2d4>)
 8003b32:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003b36:	bf8c      	ite	hi
 8003b38:	4690      	movhi	r8, r2
 8003b3a:	4698      	movls	r8, r3
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	f04f 0900 	mov.w	r9, #0
 8003b42:	6123      	str	r3, [r4, #16]
 8003b44:	f02b 0304 	bic.w	r3, fp, #4
 8003b48:	6023      	str	r3, [r4, #0]
 8003b4a:	4633      	mov	r3, r6
 8003b4c:	4621      	mov	r1, r4
 8003b4e:	4628      	mov	r0, r5
 8003b50:	9700      	str	r7, [sp, #0]
 8003b52:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003b54:	f000 f9d4 	bl	8003f00 <_printf_common>
 8003b58:	3001      	adds	r0, #1
 8003b5a:	f040 8090 	bne.w	8003c7e <_printf_float+0x1d6>
 8003b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b62:	b011      	add	sp, #68	@ 0x44
 8003b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b68:	4642      	mov	r2, r8
 8003b6a:	464b      	mov	r3, r9
 8003b6c:	4640      	mov	r0, r8
 8003b6e:	4649      	mov	r1, r9
 8003b70:	f7fc ff4c 	bl	8000a0c <__aeabi_dcmpun>
 8003b74:	b148      	cbz	r0, 8003b8a <_printf_float+0xe2>
 8003b76:	464b      	mov	r3, r9
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	bfb8      	it	lt
 8003b7c:	232d      	movlt	r3, #45	@ 0x2d
 8003b7e:	4a80      	ldr	r2, [pc, #512]	@ (8003d80 <_printf_float+0x2d8>)
 8003b80:	bfb8      	it	lt
 8003b82:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003b86:	4b7f      	ldr	r3, [pc, #508]	@ (8003d84 <_printf_float+0x2dc>)
 8003b88:	e7d3      	b.n	8003b32 <_printf_float+0x8a>
 8003b8a:	6863      	ldr	r3, [r4, #4]
 8003b8c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003b90:	1c5a      	adds	r2, r3, #1
 8003b92:	d13f      	bne.n	8003c14 <_printf_float+0x16c>
 8003b94:	2306      	movs	r3, #6
 8003b96:	6063      	str	r3, [r4, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003b9e:	6023      	str	r3, [r4, #0]
 8003ba0:	9206      	str	r2, [sp, #24]
 8003ba2:	aa0e      	add	r2, sp, #56	@ 0x38
 8003ba4:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003ba8:	aa0d      	add	r2, sp, #52	@ 0x34
 8003baa:	9203      	str	r2, [sp, #12]
 8003bac:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003bb0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003bb4:	6863      	ldr	r3, [r4, #4]
 8003bb6:	4642      	mov	r2, r8
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	4628      	mov	r0, r5
 8003bbc:	464b      	mov	r3, r9
 8003bbe:	910a      	str	r1, [sp, #40]	@ 0x28
 8003bc0:	f7ff fed3 	bl	800396a <__cvt>
 8003bc4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003bc6:	4680      	mov	r8, r0
 8003bc8:	2947      	cmp	r1, #71	@ 0x47
 8003bca:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003bcc:	d128      	bne.n	8003c20 <_printf_float+0x178>
 8003bce:	1cc8      	adds	r0, r1, #3
 8003bd0:	db02      	blt.n	8003bd8 <_printf_float+0x130>
 8003bd2:	6863      	ldr	r3, [r4, #4]
 8003bd4:	4299      	cmp	r1, r3
 8003bd6:	dd40      	ble.n	8003c5a <_printf_float+0x1b2>
 8003bd8:	f1aa 0a02 	sub.w	sl, sl, #2
 8003bdc:	fa5f fa8a 	uxtb.w	sl, sl
 8003be0:	4652      	mov	r2, sl
 8003be2:	3901      	subs	r1, #1
 8003be4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003be8:	910d      	str	r1, [sp, #52]	@ 0x34
 8003bea:	f7ff ff22 	bl	8003a32 <__exponent>
 8003bee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003bf0:	4681      	mov	r9, r0
 8003bf2:	1813      	adds	r3, r2, r0
 8003bf4:	2a01      	cmp	r2, #1
 8003bf6:	6123      	str	r3, [r4, #16]
 8003bf8:	dc02      	bgt.n	8003c00 <_printf_float+0x158>
 8003bfa:	6822      	ldr	r2, [r4, #0]
 8003bfc:	07d2      	lsls	r2, r2, #31
 8003bfe:	d501      	bpl.n	8003c04 <_printf_float+0x15c>
 8003c00:	3301      	adds	r3, #1
 8003c02:	6123      	str	r3, [r4, #16]
 8003c04:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d09e      	beq.n	8003b4a <_printf_float+0xa2>
 8003c0c:	232d      	movs	r3, #45	@ 0x2d
 8003c0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c12:	e79a      	b.n	8003b4a <_printf_float+0xa2>
 8003c14:	2947      	cmp	r1, #71	@ 0x47
 8003c16:	d1bf      	bne.n	8003b98 <_printf_float+0xf0>
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1bd      	bne.n	8003b98 <_printf_float+0xf0>
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e7ba      	b.n	8003b96 <_printf_float+0xee>
 8003c20:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003c24:	d9dc      	bls.n	8003be0 <_printf_float+0x138>
 8003c26:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003c2a:	d118      	bne.n	8003c5e <_printf_float+0x1b6>
 8003c2c:	2900      	cmp	r1, #0
 8003c2e:	6863      	ldr	r3, [r4, #4]
 8003c30:	dd0b      	ble.n	8003c4a <_printf_float+0x1a2>
 8003c32:	6121      	str	r1, [r4, #16]
 8003c34:	b913      	cbnz	r3, 8003c3c <_printf_float+0x194>
 8003c36:	6822      	ldr	r2, [r4, #0]
 8003c38:	07d0      	lsls	r0, r2, #31
 8003c3a:	d502      	bpl.n	8003c42 <_printf_float+0x19a>
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	440b      	add	r3, r1
 8003c40:	6123      	str	r3, [r4, #16]
 8003c42:	f04f 0900 	mov.w	r9, #0
 8003c46:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003c48:	e7dc      	b.n	8003c04 <_printf_float+0x15c>
 8003c4a:	b913      	cbnz	r3, 8003c52 <_printf_float+0x1aa>
 8003c4c:	6822      	ldr	r2, [r4, #0]
 8003c4e:	07d2      	lsls	r2, r2, #31
 8003c50:	d501      	bpl.n	8003c56 <_printf_float+0x1ae>
 8003c52:	3302      	adds	r3, #2
 8003c54:	e7f4      	b.n	8003c40 <_printf_float+0x198>
 8003c56:	2301      	movs	r3, #1
 8003c58:	e7f2      	b.n	8003c40 <_printf_float+0x198>
 8003c5a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003c5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003c60:	4299      	cmp	r1, r3
 8003c62:	db05      	blt.n	8003c70 <_printf_float+0x1c8>
 8003c64:	6823      	ldr	r3, [r4, #0]
 8003c66:	6121      	str	r1, [r4, #16]
 8003c68:	07d8      	lsls	r0, r3, #31
 8003c6a:	d5ea      	bpl.n	8003c42 <_printf_float+0x19a>
 8003c6c:	1c4b      	adds	r3, r1, #1
 8003c6e:	e7e7      	b.n	8003c40 <_printf_float+0x198>
 8003c70:	2900      	cmp	r1, #0
 8003c72:	bfcc      	ite	gt
 8003c74:	2201      	movgt	r2, #1
 8003c76:	f1c1 0202 	rsble	r2, r1, #2
 8003c7a:	4413      	add	r3, r2
 8003c7c:	e7e0      	b.n	8003c40 <_printf_float+0x198>
 8003c7e:	6823      	ldr	r3, [r4, #0]
 8003c80:	055a      	lsls	r2, r3, #21
 8003c82:	d407      	bmi.n	8003c94 <_printf_float+0x1ec>
 8003c84:	6923      	ldr	r3, [r4, #16]
 8003c86:	4642      	mov	r2, r8
 8003c88:	4631      	mov	r1, r6
 8003c8a:	4628      	mov	r0, r5
 8003c8c:	47b8      	blx	r7
 8003c8e:	3001      	adds	r0, #1
 8003c90:	d12b      	bne.n	8003cea <_printf_float+0x242>
 8003c92:	e764      	b.n	8003b5e <_printf_float+0xb6>
 8003c94:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003c98:	f240 80dc 	bls.w	8003e54 <_printf_float+0x3ac>
 8003c9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	f7fc fe80 	bl	80009a8 <__aeabi_dcmpeq>
 8003ca8:	2800      	cmp	r0, #0
 8003caa:	d033      	beq.n	8003d14 <_printf_float+0x26c>
 8003cac:	2301      	movs	r3, #1
 8003cae:	4631      	mov	r1, r6
 8003cb0:	4628      	mov	r0, r5
 8003cb2:	4a35      	ldr	r2, [pc, #212]	@ (8003d88 <_printf_float+0x2e0>)
 8003cb4:	47b8      	blx	r7
 8003cb6:	3001      	adds	r0, #1
 8003cb8:	f43f af51 	beq.w	8003b5e <_printf_float+0xb6>
 8003cbc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003cc0:	4543      	cmp	r3, r8
 8003cc2:	db02      	blt.n	8003cca <_printf_float+0x222>
 8003cc4:	6823      	ldr	r3, [r4, #0]
 8003cc6:	07d8      	lsls	r0, r3, #31
 8003cc8:	d50f      	bpl.n	8003cea <_printf_float+0x242>
 8003cca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003cce:	4631      	mov	r1, r6
 8003cd0:	4628      	mov	r0, r5
 8003cd2:	47b8      	blx	r7
 8003cd4:	3001      	adds	r0, #1
 8003cd6:	f43f af42 	beq.w	8003b5e <_printf_float+0xb6>
 8003cda:	f04f 0900 	mov.w	r9, #0
 8003cde:	f108 38ff 	add.w	r8, r8, #4294967295
 8003ce2:	f104 0a1a 	add.w	sl, r4, #26
 8003ce6:	45c8      	cmp	r8, r9
 8003ce8:	dc09      	bgt.n	8003cfe <_printf_float+0x256>
 8003cea:	6823      	ldr	r3, [r4, #0]
 8003cec:	079b      	lsls	r3, r3, #30
 8003cee:	f100 8102 	bmi.w	8003ef6 <_printf_float+0x44e>
 8003cf2:	68e0      	ldr	r0, [r4, #12]
 8003cf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003cf6:	4298      	cmp	r0, r3
 8003cf8:	bfb8      	it	lt
 8003cfa:	4618      	movlt	r0, r3
 8003cfc:	e731      	b.n	8003b62 <_printf_float+0xba>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	4652      	mov	r2, sl
 8003d02:	4631      	mov	r1, r6
 8003d04:	4628      	mov	r0, r5
 8003d06:	47b8      	blx	r7
 8003d08:	3001      	adds	r0, #1
 8003d0a:	f43f af28 	beq.w	8003b5e <_printf_float+0xb6>
 8003d0e:	f109 0901 	add.w	r9, r9, #1
 8003d12:	e7e8      	b.n	8003ce6 <_printf_float+0x23e>
 8003d14:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	dc38      	bgt.n	8003d8c <_printf_float+0x2e4>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	4631      	mov	r1, r6
 8003d1e:	4628      	mov	r0, r5
 8003d20:	4a19      	ldr	r2, [pc, #100]	@ (8003d88 <_printf_float+0x2e0>)
 8003d22:	47b8      	blx	r7
 8003d24:	3001      	adds	r0, #1
 8003d26:	f43f af1a 	beq.w	8003b5e <_printf_float+0xb6>
 8003d2a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003d2e:	ea59 0303 	orrs.w	r3, r9, r3
 8003d32:	d102      	bne.n	8003d3a <_printf_float+0x292>
 8003d34:	6823      	ldr	r3, [r4, #0]
 8003d36:	07d9      	lsls	r1, r3, #31
 8003d38:	d5d7      	bpl.n	8003cea <_printf_float+0x242>
 8003d3a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003d3e:	4631      	mov	r1, r6
 8003d40:	4628      	mov	r0, r5
 8003d42:	47b8      	blx	r7
 8003d44:	3001      	adds	r0, #1
 8003d46:	f43f af0a 	beq.w	8003b5e <_printf_float+0xb6>
 8003d4a:	f04f 0a00 	mov.w	sl, #0
 8003d4e:	f104 0b1a 	add.w	fp, r4, #26
 8003d52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003d54:	425b      	negs	r3, r3
 8003d56:	4553      	cmp	r3, sl
 8003d58:	dc01      	bgt.n	8003d5e <_printf_float+0x2b6>
 8003d5a:	464b      	mov	r3, r9
 8003d5c:	e793      	b.n	8003c86 <_printf_float+0x1de>
 8003d5e:	2301      	movs	r3, #1
 8003d60:	465a      	mov	r2, fp
 8003d62:	4631      	mov	r1, r6
 8003d64:	4628      	mov	r0, r5
 8003d66:	47b8      	blx	r7
 8003d68:	3001      	adds	r0, #1
 8003d6a:	f43f aef8 	beq.w	8003b5e <_printf_float+0xb6>
 8003d6e:	f10a 0a01 	add.w	sl, sl, #1
 8003d72:	e7ee      	b.n	8003d52 <_printf_float+0x2aa>
 8003d74:	7fefffff 	.word	0x7fefffff
 8003d78:	080080be 	.word	0x080080be
 8003d7c:	080080ba 	.word	0x080080ba
 8003d80:	080080c6 	.word	0x080080c6
 8003d84:	080080c2 	.word	0x080080c2
 8003d88:	080080ca 	.word	0x080080ca
 8003d8c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003d8e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003d92:	4553      	cmp	r3, sl
 8003d94:	bfa8      	it	ge
 8003d96:	4653      	movge	r3, sl
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	4699      	mov	r9, r3
 8003d9c:	dc36      	bgt.n	8003e0c <_printf_float+0x364>
 8003d9e:	f04f 0b00 	mov.w	fp, #0
 8003da2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003da6:	f104 021a 	add.w	r2, r4, #26
 8003daa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003dac:	930a      	str	r3, [sp, #40]	@ 0x28
 8003dae:	eba3 0309 	sub.w	r3, r3, r9
 8003db2:	455b      	cmp	r3, fp
 8003db4:	dc31      	bgt.n	8003e1a <_printf_float+0x372>
 8003db6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003db8:	459a      	cmp	sl, r3
 8003dba:	dc3a      	bgt.n	8003e32 <_printf_float+0x38a>
 8003dbc:	6823      	ldr	r3, [r4, #0]
 8003dbe:	07da      	lsls	r2, r3, #31
 8003dc0:	d437      	bmi.n	8003e32 <_printf_float+0x38a>
 8003dc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003dc4:	ebaa 0903 	sub.w	r9, sl, r3
 8003dc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003dca:	ebaa 0303 	sub.w	r3, sl, r3
 8003dce:	4599      	cmp	r9, r3
 8003dd0:	bfa8      	it	ge
 8003dd2:	4699      	movge	r9, r3
 8003dd4:	f1b9 0f00 	cmp.w	r9, #0
 8003dd8:	dc33      	bgt.n	8003e42 <_printf_float+0x39a>
 8003dda:	f04f 0800 	mov.w	r8, #0
 8003dde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003de2:	f104 0b1a 	add.w	fp, r4, #26
 8003de6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003de8:	ebaa 0303 	sub.w	r3, sl, r3
 8003dec:	eba3 0309 	sub.w	r3, r3, r9
 8003df0:	4543      	cmp	r3, r8
 8003df2:	f77f af7a 	ble.w	8003cea <_printf_float+0x242>
 8003df6:	2301      	movs	r3, #1
 8003df8:	465a      	mov	r2, fp
 8003dfa:	4631      	mov	r1, r6
 8003dfc:	4628      	mov	r0, r5
 8003dfe:	47b8      	blx	r7
 8003e00:	3001      	adds	r0, #1
 8003e02:	f43f aeac 	beq.w	8003b5e <_printf_float+0xb6>
 8003e06:	f108 0801 	add.w	r8, r8, #1
 8003e0a:	e7ec      	b.n	8003de6 <_printf_float+0x33e>
 8003e0c:	4642      	mov	r2, r8
 8003e0e:	4631      	mov	r1, r6
 8003e10:	4628      	mov	r0, r5
 8003e12:	47b8      	blx	r7
 8003e14:	3001      	adds	r0, #1
 8003e16:	d1c2      	bne.n	8003d9e <_printf_float+0x2f6>
 8003e18:	e6a1      	b.n	8003b5e <_printf_float+0xb6>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	4631      	mov	r1, r6
 8003e1e:	4628      	mov	r0, r5
 8003e20:	920a      	str	r2, [sp, #40]	@ 0x28
 8003e22:	47b8      	blx	r7
 8003e24:	3001      	adds	r0, #1
 8003e26:	f43f ae9a 	beq.w	8003b5e <_printf_float+0xb6>
 8003e2a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003e2c:	f10b 0b01 	add.w	fp, fp, #1
 8003e30:	e7bb      	b.n	8003daa <_printf_float+0x302>
 8003e32:	4631      	mov	r1, r6
 8003e34:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003e38:	4628      	mov	r0, r5
 8003e3a:	47b8      	blx	r7
 8003e3c:	3001      	adds	r0, #1
 8003e3e:	d1c0      	bne.n	8003dc2 <_printf_float+0x31a>
 8003e40:	e68d      	b.n	8003b5e <_printf_float+0xb6>
 8003e42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003e44:	464b      	mov	r3, r9
 8003e46:	4631      	mov	r1, r6
 8003e48:	4628      	mov	r0, r5
 8003e4a:	4442      	add	r2, r8
 8003e4c:	47b8      	blx	r7
 8003e4e:	3001      	adds	r0, #1
 8003e50:	d1c3      	bne.n	8003dda <_printf_float+0x332>
 8003e52:	e684      	b.n	8003b5e <_printf_float+0xb6>
 8003e54:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003e58:	f1ba 0f01 	cmp.w	sl, #1
 8003e5c:	dc01      	bgt.n	8003e62 <_printf_float+0x3ba>
 8003e5e:	07db      	lsls	r3, r3, #31
 8003e60:	d536      	bpl.n	8003ed0 <_printf_float+0x428>
 8003e62:	2301      	movs	r3, #1
 8003e64:	4642      	mov	r2, r8
 8003e66:	4631      	mov	r1, r6
 8003e68:	4628      	mov	r0, r5
 8003e6a:	47b8      	blx	r7
 8003e6c:	3001      	adds	r0, #1
 8003e6e:	f43f ae76 	beq.w	8003b5e <_printf_float+0xb6>
 8003e72:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003e76:	4631      	mov	r1, r6
 8003e78:	4628      	mov	r0, r5
 8003e7a:	47b8      	blx	r7
 8003e7c:	3001      	adds	r0, #1
 8003e7e:	f43f ae6e 	beq.w	8003b5e <_printf_float+0xb6>
 8003e82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003e86:	2200      	movs	r2, #0
 8003e88:	2300      	movs	r3, #0
 8003e8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003e8e:	f7fc fd8b 	bl	80009a8 <__aeabi_dcmpeq>
 8003e92:	b9c0      	cbnz	r0, 8003ec6 <_printf_float+0x41e>
 8003e94:	4653      	mov	r3, sl
 8003e96:	f108 0201 	add.w	r2, r8, #1
 8003e9a:	4631      	mov	r1, r6
 8003e9c:	4628      	mov	r0, r5
 8003e9e:	47b8      	blx	r7
 8003ea0:	3001      	adds	r0, #1
 8003ea2:	d10c      	bne.n	8003ebe <_printf_float+0x416>
 8003ea4:	e65b      	b.n	8003b5e <_printf_float+0xb6>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	465a      	mov	r2, fp
 8003eaa:	4631      	mov	r1, r6
 8003eac:	4628      	mov	r0, r5
 8003eae:	47b8      	blx	r7
 8003eb0:	3001      	adds	r0, #1
 8003eb2:	f43f ae54 	beq.w	8003b5e <_printf_float+0xb6>
 8003eb6:	f108 0801 	add.w	r8, r8, #1
 8003eba:	45d0      	cmp	r8, sl
 8003ebc:	dbf3      	blt.n	8003ea6 <_printf_float+0x3fe>
 8003ebe:	464b      	mov	r3, r9
 8003ec0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003ec4:	e6e0      	b.n	8003c88 <_printf_float+0x1e0>
 8003ec6:	f04f 0800 	mov.w	r8, #0
 8003eca:	f104 0b1a 	add.w	fp, r4, #26
 8003ece:	e7f4      	b.n	8003eba <_printf_float+0x412>
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	4642      	mov	r2, r8
 8003ed4:	e7e1      	b.n	8003e9a <_printf_float+0x3f2>
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	464a      	mov	r2, r9
 8003eda:	4631      	mov	r1, r6
 8003edc:	4628      	mov	r0, r5
 8003ede:	47b8      	blx	r7
 8003ee0:	3001      	adds	r0, #1
 8003ee2:	f43f ae3c 	beq.w	8003b5e <_printf_float+0xb6>
 8003ee6:	f108 0801 	add.w	r8, r8, #1
 8003eea:	68e3      	ldr	r3, [r4, #12]
 8003eec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003eee:	1a5b      	subs	r3, r3, r1
 8003ef0:	4543      	cmp	r3, r8
 8003ef2:	dcf0      	bgt.n	8003ed6 <_printf_float+0x42e>
 8003ef4:	e6fd      	b.n	8003cf2 <_printf_float+0x24a>
 8003ef6:	f04f 0800 	mov.w	r8, #0
 8003efa:	f104 0919 	add.w	r9, r4, #25
 8003efe:	e7f4      	b.n	8003eea <_printf_float+0x442>

08003f00 <_printf_common>:
 8003f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f04:	4616      	mov	r6, r2
 8003f06:	4698      	mov	r8, r3
 8003f08:	688a      	ldr	r2, [r1, #8]
 8003f0a:	690b      	ldr	r3, [r1, #16]
 8003f0c:	4607      	mov	r7, r0
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	bfb8      	it	lt
 8003f12:	4613      	movlt	r3, r2
 8003f14:	6033      	str	r3, [r6, #0]
 8003f16:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003f1a:	460c      	mov	r4, r1
 8003f1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003f20:	b10a      	cbz	r2, 8003f26 <_printf_common+0x26>
 8003f22:	3301      	adds	r3, #1
 8003f24:	6033      	str	r3, [r6, #0]
 8003f26:	6823      	ldr	r3, [r4, #0]
 8003f28:	0699      	lsls	r1, r3, #26
 8003f2a:	bf42      	ittt	mi
 8003f2c:	6833      	ldrmi	r3, [r6, #0]
 8003f2e:	3302      	addmi	r3, #2
 8003f30:	6033      	strmi	r3, [r6, #0]
 8003f32:	6825      	ldr	r5, [r4, #0]
 8003f34:	f015 0506 	ands.w	r5, r5, #6
 8003f38:	d106      	bne.n	8003f48 <_printf_common+0x48>
 8003f3a:	f104 0a19 	add.w	sl, r4, #25
 8003f3e:	68e3      	ldr	r3, [r4, #12]
 8003f40:	6832      	ldr	r2, [r6, #0]
 8003f42:	1a9b      	subs	r3, r3, r2
 8003f44:	42ab      	cmp	r3, r5
 8003f46:	dc2b      	bgt.n	8003fa0 <_printf_common+0xa0>
 8003f48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003f4c:	6822      	ldr	r2, [r4, #0]
 8003f4e:	3b00      	subs	r3, #0
 8003f50:	bf18      	it	ne
 8003f52:	2301      	movne	r3, #1
 8003f54:	0692      	lsls	r2, r2, #26
 8003f56:	d430      	bmi.n	8003fba <_printf_common+0xba>
 8003f58:	4641      	mov	r1, r8
 8003f5a:	4638      	mov	r0, r7
 8003f5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003f60:	47c8      	blx	r9
 8003f62:	3001      	adds	r0, #1
 8003f64:	d023      	beq.n	8003fae <_printf_common+0xae>
 8003f66:	6823      	ldr	r3, [r4, #0]
 8003f68:	6922      	ldr	r2, [r4, #16]
 8003f6a:	f003 0306 	and.w	r3, r3, #6
 8003f6e:	2b04      	cmp	r3, #4
 8003f70:	bf14      	ite	ne
 8003f72:	2500      	movne	r5, #0
 8003f74:	6833      	ldreq	r3, [r6, #0]
 8003f76:	f04f 0600 	mov.w	r6, #0
 8003f7a:	bf08      	it	eq
 8003f7c:	68e5      	ldreq	r5, [r4, #12]
 8003f7e:	f104 041a 	add.w	r4, r4, #26
 8003f82:	bf08      	it	eq
 8003f84:	1aed      	subeq	r5, r5, r3
 8003f86:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003f8a:	bf08      	it	eq
 8003f8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f90:	4293      	cmp	r3, r2
 8003f92:	bfc4      	itt	gt
 8003f94:	1a9b      	subgt	r3, r3, r2
 8003f96:	18ed      	addgt	r5, r5, r3
 8003f98:	42b5      	cmp	r5, r6
 8003f9a:	d11a      	bne.n	8003fd2 <_printf_common+0xd2>
 8003f9c:	2000      	movs	r0, #0
 8003f9e:	e008      	b.n	8003fb2 <_printf_common+0xb2>
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	4652      	mov	r2, sl
 8003fa4:	4641      	mov	r1, r8
 8003fa6:	4638      	mov	r0, r7
 8003fa8:	47c8      	blx	r9
 8003faa:	3001      	adds	r0, #1
 8003fac:	d103      	bne.n	8003fb6 <_printf_common+0xb6>
 8003fae:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fb6:	3501      	adds	r5, #1
 8003fb8:	e7c1      	b.n	8003f3e <_printf_common+0x3e>
 8003fba:	2030      	movs	r0, #48	@ 0x30
 8003fbc:	18e1      	adds	r1, r4, r3
 8003fbe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003fc2:	1c5a      	adds	r2, r3, #1
 8003fc4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003fc8:	4422      	add	r2, r4
 8003fca:	3302      	adds	r3, #2
 8003fcc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003fd0:	e7c2      	b.n	8003f58 <_printf_common+0x58>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	4622      	mov	r2, r4
 8003fd6:	4641      	mov	r1, r8
 8003fd8:	4638      	mov	r0, r7
 8003fda:	47c8      	blx	r9
 8003fdc:	3001      	adds	r0, #1
 8003fde:	d0e6      	beq.n	8003fae <_printf_common+0xae>
 8003fe0:	3601      	adds	r6, #1
 8003fe2:	e7d9      	b.n	8003f98 <_printf_common+0x98>

08003fe4 <_printf_i>:
 8003fe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fe8:	7e0f      	ldrb	r7, [r1, #24]
 8003fea:	4691      	mov	r9, r2
 8003fec:	2f78      	cmp	r7, #120	@ 0x78
 8003fee:	4680      	mov	r8, r0
 8003ff0:	460c      	mov	r4, r1
 8003ff2:	469a      	mov	sl, r3
 8003ff4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ff6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003ffa:	d807      	bhi.n	800400c <_printf_i+0x28>
 8003ffc:	2f62      	cmp	r7, #98	@ 0x62
 8003ffe:	d80a      	bhi.n	8004016 <_printf_i+0x32>
 8004000:	2f00      	cmp	r7, #0
 8004002:	f000 80d1 	beq.w	80041a8 <_printf_i+0x1c4>
 8004006:	2f58      	cmp	r7, #88	@ 0x58
 8004008:	f000 80b8 	beq.w	800417c <_printf_i+0x198>
 800400c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004010:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004014:	e03a      	b.n	800408c <_printf_i+0xa8>
 8004016:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800401a:	2b15      	cmp	r3, #21
 800401c:	d8f6      	bhi.n	800400c <_printf_i+0x28>
 800401e:	a101      	add	r1, pc, #4	@ (adr r1, 8004024 <_printf_i+0x40>)
 8004020:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004024:	0800407d 	.word	0x0800407d
 8004028:	08004091 	.word	0x08004091
 800402c:	0800400d 	.word	0x0800400d
 8004030:	0800400d 	.word	0x0800400d
 8004034:	0800400d 	.word	0x0800400d
 8004038:	0800400d 	.word	0x0800400d
 800403c:	08004091 	.word	0x08004091
 8004040:	0800400d 	.word	0x0800400d
 8004044:	0800400d 	.word	0x0800400d
 8004048:	0800400d 	.word	0x0800400d
 800404c:	0800400d 	.word	0x0800400d
 8004050:	0800418f 	.word	0x0800418f
 8004054:	080040bb 	.word	0x080040bb
 8004058:	08004149 	.word	0x08004149
 800405c:	0800400d 	.word	0x0800400d
 8004060:	0800400d 	.word	0x0800400d
 8004064:	080041b1 	.word	0x080041b1
 8004068:	0800400d 	.word	0x0800400d
 800406c:	080040bb 	.word	0x080040bb
 8004070:	0800400d 	.word	0x0800400d
 8004074:	0800400d 	.word	0x0800400d
 8004078:	08004151 	.word	0x08004151
 800407c:	6833      	ldr	r3, [r6, #0]
 800407e:	1d1a      	adds	r2, r3, #4
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6032      	str	r2, [r6, #0]
 8004084:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004088:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800408c:	2301      	movs	r3, #1
 800408e:	e09c      	b.n	80041ca <_printf_i+0x1e6>
 8004090:	6833      	ldr	r3, [r6, #0]
 8004092:	6820      	ldr	r0, [r4, #0]
 8004094:	1d19      	adds	r1, r3, #4
 8004096:	6031      	str	r1, [r6, #0]
 8004098:	0606      	lsls	r6, r0, #24
 800409a:	d501      	bpl.n	80040a0 <_printf_i+0xbc>
 800409c:	681d      	ldr	r5, [r3, #0]
 800409e:	e003      	b.n	80040a8 <_printf_i+0xc4>
 80040a0:	0645      	lsls	r5, r0, #25
 80040a2:	d5fb      	bpl.n	800409c <_printf_i+0xb8>
 80040a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80040a8:	2d00      	cmp	r5, #0
 80040aa:	da03      	bge.n	80040b4 <_printf_i+0xd0>
 80040ac:	232d      	movs	r3, #45	@ 0x2d
 80040ae:	426d      	negs	r5, r5
 80040b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040b4:	230a      	movs	r3, #10
 80040b6:	4858      	ldr	r0, [pc, #352]	@ (8004218 <_printf_i+0x234>)
 80040b8:	e011      	b.n	80040de <_printf_i+0xfa>
 80040ba:	6821      	ldr	r1, [r4, #0]
 80040bc:	6833      	ldr	r3, [r6, #0]
 80040be:	0608      	lsls	r0, r1, #24
 80040c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80040c4:	d402      	bmi.n	80040cc <_printf_i+0xe8>
 80040c6:	0649      	lsls	r1, r1, #25
 80040c8:	bf48      	it	mi
 80040ca:	b2ad      	uxthmi	r5, r5
 80040cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80040ce:	6033      	str	r3, [r6, #0]
 80040d0:	bf14      	ite	ne
 80040d2:	230a      	movne	r3, #10
 80040d4:	2308      	moveq	r3, #8
 80040d6:	4850      	ldr	r0, [pc, #320]	@ (8004218 <_printf_i+0x234>)
 80040d8:	2100      	movs	r1, #0
 80040da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80040de:	6866      	ldr	r6, [r4, #4]
 80040e0:	2e00      	cmp	r6, #0
 80040e2:	60a6      	str	r6, [r4, #8]
 80040e4:	db05      	blt.n	80040f2 <_printf_i+0x10e>
 80040e6:	6821      	ldr	r1, [r4, #0]
 80040e8:	432e      	orrs	r6, r5
 80040ea:	f021 0104 	bic.w	r1, r1, #4
 80040ee:	6021      	str	r1, [r4, #0]
 80040f0:	d04b      	beq.n	800418a <_printf_i+0x1a6>
 80040f2:	4616      	mov	r6, r2
 80040f4:	fbb5 f1f3 	udiv	r1, r5, r3
 80040f8:	fb03 5711 	mls	r7, r3, r1, r5
 80040fc:	5dc7      	ldrb	r7, [r0, r7]
 80040fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004102:	462f      	mov	r7, r5
 8004104:	42bb      	cmp	r3, r7
 8004106:	460d      	mov	r5, r1
 8004108:	d9f4      	bls.n	80040f4 <_printf_i+0x110>
 800410a:	2b08      	cmp	r3, #8
 800410c:	d10b      	bne.n	8004126 <_printf_i+0x142>
 800410e:	6823      	ldr	r3, [r4, #0]
 8004110:	07df      	lsls	r7, r3, #31
 8004112:	d508      	bpl.n	8004126 <_printf_i+0x142>
 8004114:	6923      	ldr	r3, [r4, #16]
 8004116:	6861      	ldr	r1, [r4, #4]
 8004118:	4299      	cmp	r1, r3
 800411a:	bfde      	ittt	le
 800411c:	2330      	movle	r3, #48	@ 0x30
 800411e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004122:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004126:	1b92      	subs	r2, r2, r6
 8004128:	6122      	str	r2, [r4, #16]
 800412a:	464b      	mov	r3, r9
 800412c:	4621      	mov	r1, r4
 800412e:	4640      	mov	r0, r8
 8004130:	f8cd a000 	str.w	sl, [sp]
 8004134:	aa03      	add	r2, sp, #12
 8004136:	f7ff fee3 	bl	8003f00 <_printf_common>
 800413a:	3001      	adds	r0, #1
 800413c:	d14a      	bne.n	80041d4 <_printf_i+0x1f0>
 800413e:	f04f 30ff 	mov.w	r0, #4294967295
 8004142:	b004      	add	sp, #16
 8004144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004148:	6823      	ldr	r3, [r4, #0]
 800414a:	f043 0320 	orr.w	r3, r3, #32
 800414e:	6023      	str	r3, [r4, #0]
 8004150:	2778      	movs	r7, #120	@ 0x78
 8004152:	4832      	ldr	r0, [pc, #200]	@ (800421c <_printf_i+0x238>)
 8004154:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004158:	6823      	ldr	r3, [r4, #0]
 800415a:	6831      	ldr	r1, [r6, #0]
 800415c:	061f      	lsls	r7, r3, #24
 800415e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004162:	d402      	bmi.n	800416a <_printf_i+0x186>
 8004164:	065f      	lsls	r7, r3, #25
 8004166:	bf48      	it	mi
 8004168:	b2ad      	uxthmi	r5, r5
 800416a:	6031      	str	r1, [r6, #0]
 800416c:	07d9      	lsls	r1, r3, #31
 800416e:	bf44      	itt	mi
 8004170:	f043 0320 	orrmi.w	r3, r3, #32
 8004174:	6023      	strmi	r3, [r4, #0]
 8004176:	b11d      	cbz	r5, 8004180 <_printf_i+0x19c>
 8004178:	2310      	movs	r3, #16
 800417a:	e7ad      	b.n	80040d8 <_printf_i+0xf4>
 800417c:	4826      	ldr	r0, [pc, #152]	@ (8004218 <_printf_i+0x234>)
 800417e:	e7e9      	b.n	8004154 <_printf_i+0x170>
 8004180:	6823      	ldr	r3, [r4, #0]
 8004182:	f023 0320 	bic.w	r3, r3, #32
 8004186:	6023      	str	r3, [r4, #0]
 8004188:	e7f6      	b.n	8004178 <_printf_i+0x194>
 800418a:	4616      	mov	r6, r2
 800418c:	e7bd      	b.n	800410a <_printf_i+0x126>
 800418e:	6833      	ldr	r3, [r6, #0]
 8004190:	6825      	ldr	r5, [r4, #0]
 8004192:	1d18      	adds	r0, r3, #4
 8004194:	6961      	ldr	r1, [r4, #20]
 8004196:	6030      	str	r0, [r6, #0]
 8004198:	062e      	lsls	r6, r5, #24
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	d501      	bpl.n	80041a2 <_printf_i+0x1be>
 800419e:	6019      	str	r1, [r3, #0]
 80041a0:	e002      	b.n	80041a8 <_printf_i+0x1c4>
 80041a2:	0668      	lsls	r0, r5, #25
 80041a4:	d5fb      	bpl.n	800419e <_printf_i+0x1ba>
 80041a6:	8019      	strh	r1, [r3, #0]
 80041a8:	2300      	movs	r3, #0
 80041aa:	4616      	mov	r6, r2
 80041ac:	6123      	str	r3, [r4, #16]
 80041ae:	e7bc      	b.n	800412a <_printf_i+0x146>
 80041b0:	6833      	ldr	r3, [r6, #0]
 80041b2:	2100      	movs	r1, #0
 80041b4:	1d1a      	adds	r2, r3, #4
 80041b6:	6032      	str	r2, [r6, #0]
 80041b8:	681e      	ldr	r6, [r3, #0]
 80041ba:	6862      	ldr	r2, [r4, #4]
 80041bc:	4630      	mov	r0, r6
 80041be:	f000 fbe0 	bl	8004982 <memchr>
 80041c2:	b108      	cbz	r0, 80041c8 <_printf_i+0x1e4>
 80041c4:	1b80      	subs	r0, r0, r6
 80041c6:	6060      	str	r0, [r4, #4]
 80041c8:	6863      	ldr	r3, [r4, #4]
 80041ca:	6123      	str	r3, [r4, #16]
 80041cc:	2300      	movs	r3, #0
 80041ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041d2:	e7aa      	b.n	800412a <_printf_i+0x146>
 80041d4:	4632      	mov	r2, r6
 80041d6:	4649      	mov	r1, r9
 80041d8:	4640      	mov	r0, r8
 80041da:	6923      	ldr	r3, [r4, #16]
 80041dc:	47d0      	blx	sl
 80041de:	3001      	adds	r0, #1
 80041e0:	d0ad      	beq.n	800413e <_printf_i+0x15a>
 80041e2:	6823      	ldr	r3, [r4, #0]
 80041e4:	079b      	lsls	r3, r3, #30
 80041e6:	d413      	bmi.n	8004210 <_printf_i+0x22c>
 80041e8:	68e0      	ldr	r0, [r4, #12]
 80041ea:	9b03      	ldr	r3, [sp, #12]
 80041ec:	4298      	cmp	r0, r3
 80041ee:	bfb8      	it	lt
 80041f0:	4618      	movlt	r0, r3
 80041f2:	e7a6      	b.n	8004142 <_printf_i+0x15e>
 80041f4:	2301      	movs	r3, #1
 80041f6:	4632      	mov	r2, r6
 80041f8:	4649      	mov	r1, r9
 80041fa:	4640      	mov	r0, r8
 80041fc:	47d0      	blx	sl
 80041fe:	3001      	adds	r0, #1
 8004200:	d09d      	beq.n	800413e <_printf_i+0x15a>
 8004202:	3501      	adds	r5, #1
 8004204:	68e3      	ldr	r3, [r4, #12]
 8004206:	9903      	ldr	r1, [sp, #12]
 8004208:	1a5b      	subs	r3, r3, r1
 800420a:	42ab      	cmp	r3, r5
 800420c:	dcf2      	bgt.n	80041f4 <_printf_i+0x210>
 800420e:	e7eb      	b.n	80041e8 <_printf_i+0x204>
 8004210:	2500      	movs	r5, #0
 8004212:	f104 0619 	add.w	r6, r4, #25
 8004216:	e7f5      	b.n	8004204 <_printf_i+0x220>
 8004218:	080080cc 	.word	0x080080cc
 800421c:	080080dd 	.word	0x080080dd

08004220 <_scanf_float>:
 8004220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004224:	b087      	sub	sp, #28
 8004226:	9303      	str	r3, [sp, #12]
 8004228:	688b      	ldr	r3, [r1, #8]
 800422a:	4691      	mov	r9, r2
 800422c:	1e5a      	subs	r2, r3, #1
 800422e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004232:	bf82      	ittt	hi
 8004234:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004238:	eb03 0b05 	addhi.w	fp, r3, r5
 800423c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004240:	460a      	mov	r2, r1
 8004242:	f04f 0500 	mov.w	r5, #0
 8004246:	bf88      	it	hi
 8004248:	608b      	strhi	r3, [r1, #8]
 800424a:	680b      	ldr	r3, [r1, #0]
 800424c:	4680      	mov	r8, r0
 800424e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004252:	f842 3b1c 	str.w	r3, [r2], #28
 8004256:	460c      	mov	r4, r1
 8004258:	bf98      	it	ls
 800425a:	f04f 0b00 	movls.w	fp, #0
 800425e:	4616      	mov	r6, r2
 8004260:	46aa      	mov	sl, r5
 8004262:	462f      	mov	r7, r5
 8004264:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004268:	9201      	str	r2, [sp, #4]
 800426a:	9502      	str	r5, [sp, #8]
 800426c:	68a2      	ldr	r2, [r4, #8]
 800426e:	b15a      	cbz	r2, 8004288 <_scanf_float+0x68>
 8004270:	f8d9 3000 	ldr.w	r3, [r9]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	2b4e      	cmp	r3, #78	@ 0x4e
 8004278:	d862      	bhi.n	8004340 <_scanf_float+0x120>
 800427a:	2b40      	cmp	r3, #64	@ 0x40
 800427c:	d83a      	bhi.n	80042f4 <_scanf_float+0xd4>
 800427e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004282:	b2c8      	uxtb	r0, r1
 8004284:	280e      	cmp	r0, #14
 8004286:	d938      	bls.n	80042fa <_scanf_float+0xda>
 8004288:	b11f      	cbz	r7, 8004292 <_scanf_float+0x72>
 800428a:	6823      	ldr	r3, [r4, #0]
 800428c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004290:	6023      	str	r3, [r4, #0]
 8004292:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004296:	f1ba 0f01 	cmp.w	sl, #1
 800429a:	f200 8114 	bhi.w	80044c6 <_scanf_float+0x2a6>
 800429e:	9b01      	ldr	r3, [sp, #4]
 80042a0:	429e      	cmp	r6, r3
 80042a2:	f200 8105 	bhi.w	80044b0 <_scanf_float+0x290>
 80042a6:	2001      	movs	r0, #1
 80042a8:	b007      	add	sp, #28
 80042aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042ae:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80042b2:	2a0d      	cmp	r2, #13
 80042b4:	d8e8      	bhi.n	8004288 <_scanf_float+0x68>
 80042b6:	a101      	add	r1, pc, #4	@ (adr r1, 80042bc <_scanf_float+0x9c>)
 80042b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80042bc:	08004405 	.word	0x08004405
 80042c0:	08004289 	.word	0x08004289
 80042c4:	08004289 	.word	0x08004289
 80042c8:	08004289 	.word	0x08004289
 80042cc:	08004461 	.word	0x08004461
 80042d0:	0800443b 	.word	0x0800443b
 80042d4:	08004289 	.word	0x08004289
 80042d8:	08004289 	.word	0x08004289
 80042dc:	08004413 	.word	0x08004413
 80042e0:	08004289 	.word	0x08004289
 80042e4:	08004289 	.word	0x08004289
 80042e8:	08004289 	.word	0x08004289
 80042ec:	08004289 	.word	0x08004289
 80042f0:	080043cf 	.word	0x080043cf
 80042f4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80042f8:	e7db      	b.n	80042b2 <_scanf_float+0x92>
 80042fa:	290e      	cmp	r1, #14
 80042fc:	d8c4      	bhi.n	8004288 <_scanf_float+0x68>
 80042fe:	a001      	add	r0, pc, #4	@ (adr r0, 8004304 <_scanf_float+0xe4>)
 8004300:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004304:	080043bf 	.word	0x080043bf
 8004308:	08004289 	.word	0x08004289
 800430c:	080043bf 	.word	0x080043bf
 8004310:	0800444f 	.word	0x0800444f
 8004314:	08004289 	.word	0x08004289
 8004318:	08004361 	.word	0x08004361
 800431c:	080043a5 	.word	0x080043a5
 8004320:	080043a5 	.word	0x080043a5
 8004324:	080043a5 	.word	0x080043a5
 8004328:	080043a5 	.word	0x080043a5
 800432c:	080043a5 	.word	0x080043a5
 8004330:	080043a5 	.word	0x080043a5
 8004334:	080043a5 	.word	0x080043a5
 8004338:	080043a5 	.word	0x080043a5
 800433c:	080043a5 	.word	0x080043a5
 8004340:	2b6e      	cmp	r3, #110	@ 0x6e
 8004342:	d809      	bhi.n	8004358 <_scanf_float+0x138>
 8004344:	2b60      	cmp	r3, #96	@ 0x60
 8004346:	d8b2      	bhi.n	80042ae <_scanf_float+0x8e>
 8004348:	2b54      	cmp	r3, #84	@ 0x54
 800434a:	d07b      	beq.n	8004444 <_scanf_float+0x224>
 800434c:	2b59      	cmp	r3, #89	@ 0x59
 800434e:	d19b      	bne.n	8004288 <_scanf_float+0x68>
 8004350:	2d07      	cmp	r5, #7
 8004352:	d199      	bne.n	8004288 <_scanf_float+0x68>
 8004354:	2508      	movs	r5, #8
 8004356:	e02f      	b.n	80043b8 <_scanf_float+0x198>
 8004358:	2b74      	cmp	r3, #116	@ 0x74
 800435a:	d073      	beq.n	8004444 <_scanf_float+0x224>
 800435c:	2b79      	cmp	r3, #121	@ 0x79
 800435e:	e7f6      	b.n	800434e <_scanf_float+0x12e>
 8004360:	6821      	ldr	r1, [r4, #0]
 8004362:	05c8      	lsls	r0, r1, #23
 8004364:	d51e      	bpl.n	80043a4 <_scanf_float+0x184>
 8004366:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800436a:	6021      	str	r1, [r4, #0]
 800436c:	3701      	adds	r7, #1
 800436e:	f1bb 0f00 	cmp.w	fp, #0
 8004372:	d003      	beq.n	800437c <_scanf_float+0x15c>
 8004374:	3201      	adds	r2, #1
 8004376:	f10b 3bff 	add.w	fp, fp, #4294967295
 800437a:	60a2      	str	r2, [r4, #8]
 800437c:	68a3      	ldr	r3, [r4, #8]
 800437e:	3b01      	subs	r3, #1
 8004380:	60a3      	str	r3, [r4, #8]
 8004382:	6923      	ldr	r3, [r4, #16]
 8004384:	3301      	adds	r3, #1
 8004386:	6123      	str	r3, [r4, #16]
 8004388:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800438c:	3b01      	subs	r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	f8c9 3004 	str.w	r3, [r9, #4]
 8004394:	f340 8083 	ble.w	800449e <_scanf_float+0x27e>
 8004398:	f8d9 3000 	ldr.w	r3, [r9]
 800439c:	3301      	adds	r3, #1
 800439e:	f8c9 3000 	str.w	r3, [r9]
 80043a2:	e763      	b.n	800426c <_scanf_float+0x4c>
 80043a4:	eb1a 0105 	adds.w	r1, sl, r5
 80043a8:	f47f af6e 	bne.w	8004288 <_scanf_float+0x68>
 80043ac:	460d      	mov	r5, r1
 80043ae:	468a      	mov	sl, r1
 80043b0:	6822      	ldr	r2, [r4, #0]
 80043b2:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80043b6:	6022      	str	r2, [r4, #0]
 80043b8:	f806 3b01 	strb.w	r3, [r6], #1
 80043bc:	e7de      	b.n	800437c <_scanf_float+0x15c>
 80043be:	6822      	ldr	r2, [r4, #0]
 80043c0:	0610      	lsls	r0, r2, #24
 80043c2:	f57f af61 	bpl.w	8004288 <_scanf_float+0x68>
 80043c6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043ca:	6022      	str	r2, [r4, #0]
 80043cc:	e7f4      	b.n	80043b8 <_scanf_float+0x198>
 80043ce:	f1ba 0f00 	cmp.w	sl, #0
 80043d2:	d10c      	bne.n	80043ee <_scanf_float+0x1ce>
 80043d4:	b977      	cbnz	r7, 80043f4 <_scanf_float+0x1d4>
 80043d6:	6822      	ldr	r2, [r4, #0]
 80043d8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80043dc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80043e0:	d108      	bne.n	80043f4 <_scanf_float+0x1d4>
 80043e2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80043e6:	f04f 0a01 	mov.w	sl, #1
 80043ea:	6022      	str	r2, [r4, #0]
 80043ec:	e7e4      	b.n	80043b8 <_scanf_float+0x198>
 80043ee:	f1ba 0f02 	cmp.w	sl, #2
 80043f2:	d051      	beq.n	8004498 <_scanf_float+0x278>
 80043f4:	2d01      	cmp	r5, #1
 80043f6:	d002      	beq.n	80043fe <_scanf_float+0x1de>
 80043f8:	2d04      	cmp	r5, #4
 80043fa:	f47f af45 	bne.w	8004288 <_scanf_float+0x68>
 80043fe:	3501      	adds	r5, #1
 8004400:	b2ed      	uxtb	r5, r5
 8004402:	e7d9      	b.n	80043b8 <_scanf_float+0x198>
 8004404:	f1ba 0f01 	cmp.w	sl, #1
 8004408:	f47f af3e 	bne.w	8004288 <_scanf_float+0x68>
 800440c:	f04f 0a02 	mov.w	sl, #2
 8004410:	e7d2      	b.n	80043b8 <_scanf_float+0x198>
 8004412:	b975      	cbnz	r5, 8004432 <_scanf_float+0x212>
 8004414:	2f00      	cmp	r7, #0
 8004416:	f47f af38 	bne.w	800428a <_scanf_float+0x6a>
 800441a:	6822      	ldr	r2, [r4, #0]
 800441c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004420:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004424:	f040 80ff 	bne.w	8004626 <_scanf_float+0x406>
 8004428:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800442c:	2501      	movs	r5, #1
 800442e:	6022      	str	r2, [r4, #0]
 8004430:	e7c2      	b.n	80043b8 <_scanf_float+0x198>
 8004432:	2d03      	cmp	r5, #3
 8004434:	d0e3      	beq.n	80043fe <_scanf_float+0x1de>
 8004436:	2d05      	cmp	r5, #5
 8004438:	e7df      	b.n	80043fa <_scanf_float+0x1da>
 800443a:	2d02      	cmp	r5, #2
 800443c:	f47f af24 	bne.w	8004288 <_scanf_float+0x68>
 8004440:	2503      	movs	r5, #3
 8004442:	e7b9      	b.n	80043b8 <_scanf_float+0x198>
 8004444:	2d06      	cmp	r5, #6
 8004446:	f47f af1f 	bne.w	8004288 <_scanf_float+0x68>
 800444a:	2507      	movs	r5, #7
 800444c:	e7b4      	b.n	80043b8 <_scanf_float+0x198>
 800444e:	6822      	ldr	r2, [r4, #0]
 8004450:	0591      	lsls	r1, r2, #22
 8004452:	f57f af19 	bpl.w	8004288 <_scanf_float+0x68>
 8004456:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800445a:	6022      	str	r2, [r4, #0]
 800445c:	9702      	str	r7, [sp, #8]
 800445e:	e7ab      	b.n	80043b8 <_scanf_float+0x198>
 8004460:	6822      	ldr	r2, [r4, #0]
 8004462:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004466:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800446a:	d005      	beq.n	8004478 <_scanf_float+0x258>
 800446c:	0550      	lsls	r0, r2, #21
 800446e:	f57f af0b 	bpl.w	8004288 <_scanf_float+0x68>
 8004472:	2f00      	cmp	r7, #0
 8004474:	f000 80d7 	beq.w	8004626 <_scanf_float+0x406>
 8004478:	0591      	lsls	r1, r2, #22
 800447a:	bf58      	it	pl
 800447c:	9902      	ldrpl	r1, [sp, #8]
 800447e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004482:	bf58      	it	pl
 8004484:	1a79      	subpl	r1, r7, r1
 8004486:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800448a:	f04f 0700 	mov.w	r7, #0
 800448e:	bf58      	it	pl
 8004490:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004494:	6022      	str	r2, [r4, #0]
 8004496:	e78f      	b.n	80043b8 <_scanf_float+0x198>
 8004498:	f04f 0a03 	mov.w	sl, #3
 800449c:	e78c      	b.n	80043b8 <_scanf_float+0x198>
 800449e:	4649      	mov	r1, r9
 80044a0:	4640      	mov	r0, r8
 80044a2:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80044a6:	4798      	blx	r3
 80044a8:	2800      	cmp	r0, #0
 80044aa:	f43f aedf 	beq.w	800426c <_scanf_float+0x4c>
 80044ae:	e6eb      	b.n	8004288 <_scanf_float+0x68>
 80044b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80044b4:	464a      	mov	r2, r9
 80044b6:	4640      	mov	r0, r8
 80044b8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80044bc:	4798      	blx	r3
 80044be:	6923      	ldr	r3, [r4, #16]
 80044c0:	3b01      	subs	r3, #1
 80044c2:	6123      	str	r3, [r4, #16]
 80044c4:	e6eb      	b.n	800429e <_scanf_float+0x7e>
 80044c6:	1e6b      	subs	r3, r5, #1
 80044c8:	2b06      	cmp	r3, #6
 80044ca:	d824      	bhi.n	8004516 <_scanf_float+0x2f6>
 80044cc:	2d02      	cmp	r5, #2
 80044ce:	d836      	bhi.n	800453e <_scanf_float+0x31e>
 80044d0:	9b01      	ldr	r3, [sp, #4]
 80044d2:	429e      	cmp	r6, r3
 80044d4:	f67f aee7 	bls.w	80042a6 <_scanf_float+0x86>
 80044d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80044dc:	464a      	mov	r2, r9
 80044de:	4640      	mov	r0, r8
 80044e0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80044e4:	4798      	blx	r3
 80044e6:	6923      	ldr	r3, [r4, #16]
 80044e8:	3b01      	subs	r3, #1
 80044ea:	6123      	str	r3, [r4, #16]
 80044ec:	e7f0      	b.n	80044d0 <_scanf_float+0x2b0>
 80044ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80044f2:	464a      	mov	r2, r9
 80044f4:	4640      	mov	r0, r8
 80044f6:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80044fa:	4798      	blx	r3
 80044fc:	6923      	ldr	r3, [r4, #16]
 80044fe:	3b01      	subs	r3, #1
 8004500:	6123      	str	r3, [r4, #16]
 8004502:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004506:	fa5f fa8a 	uxtb.w	sl, sl
 800450a:	f1ba 0f02 	cmp.w	sl, #2
 800450e:	d1ee      	bne.n	80044ee <_scanf_float+0x2ce>
 8004510:	3d03      	subs	r5, #3
 8004512:	b2ed      	uxtb	r5, r5
 8004514:	1b76      	subs	r6, r6, r5
 8004516:	6823      	ldr	r3, [r4, #0]
 8004518:	05da      	lsls	r2, r3, #23
 800451a:	d530      	bpl.n	800457e <_scanf_float+0x35e>
 800451c:	055b      	lsls	r3, r3, #21
 800451e:	d511      	bpl.n	8004544 <_scanf_float+0x324>
 8004520:	9b01      	ldr	r3, [sp, #4]
 8004522:	429e      	cmp	r6, r3
 8004524:	f67f aebf 	bls.w	80042a6 <_scanf_float+0x86>
 8004528:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800452c:	464a      	mov	r2, r9
 800452e:	4640      	mov	r0, r8
 8004530:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004534:	4798      	blx	r3
 8004536:	6923      	ldr	r3, [r4, #16]
 8004538:	3b01      	subs	r3, #1
 800453a:	6123      	str	r3, [r4, #16]
 800453c:	e7f0      	b.n	8004520 <_scanf_float+0x300>
 800453e:	46aa      	mov	sl, r5
 8004540:	46b3      	mov	fp, r6
 8004542:	e7de      	b.n	8004502 <_scanf_float+0x2e2>
 8004544:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004548:	6923      	ldr	r3, [r4, #16]
 800454a:	2965      	cmp	r1, #101	@ 0x65
 800454c:	f103 33ff 	add.w	r3, r3, #4294967295
 8004550:	f106 35ff 	add.w	r5, r6, #4294967295
 8004554:	6123      	str	r3, [r4, #16]
 8004556:	d00c      	beq.n	8004572 <_scanf_float+0x352>
 8004558:	2945      	cmp	r1, #69	@ 0x45
 800455a:	d00a      	beq.n	8004572 <_scanf_float+0x352>
 800455c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004560:	464a      	mov	r2, r9
 8004562:	4640      	mov	r0, r8
 8004564:	4798      	blx	r3
 8004566:	6923      	ldr	r3, [r4, #16]
 8004568:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800456c:	3b01      	subs	r3, #1
 800456e:	1eb5      	subs	r5, r6, #2
 8004570:	6123      	str	r3, [r4, #16]
 8004572:	464a      	mov	r2, r9
 8004574:	4640      	mov	r0, r8
 8004576:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800457a:	4798      	blx	r3
 800457c:	462e      	mov	r6, r5
 800457e:	6822      	ldr	r2, [r4, #0]
 8004580:	f012 0210 	ands.w	r2, r2, #16
 8004584:	d001      	beq.n	800458a <_scanf_float+0x36a>
 8004586:	2000      	movs	r0, #0
 8004588:	e68e      	b.n	80042a8 <_scanf_float+0x88>
 800458a:	7032      	strb	r2, [r6, #0]
 800458c:	6823      	ldr	r3, [r4, #0]
 800458e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004592:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004596:	d125      	bne.n	80045e4 <_scanf_float+0x3c4>
 8004598:	9b02      	ldr	r3, [sp, #8]
 800459a:	429f      	cmp	r7, r3
 800459c:	d00a      	beq.n	80045b4 <_scanf_float+0x394>
 800459e:	1bda      	subs	r2, r3, r7
 80045a0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80045a4:	429e      	cmp	r6, r3
 80045a6:	bf28      	it	cs
 80045a8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80045ac:	4630      	mov	r0, r6
 80045ae:	491f      	ldr	r1, [pc, #124]	@ (800462c <_scanf_float+0x40c>)
 80045b0:	f000 f902 	bl	80047b8 <siprintf>
 80045b4:	2200      	movs	r2, #0
 80045b6:	4640      	mov	r0, r8
 80045b8:	9901      	ldr	r1, [sp, #4]
 80045ba:	f002 fbf9 	bl	8006db0 <_strtod_r>
 80045be:	9b03      	ldr	r3, [sp, #12]
 80045c0:	6825      	ldr	r5, [r4, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f015 0f02 	tst.w	r5, #2
 80045c8:	4606      	mov	r6, r0
 80045ca:	460f      	mov	r7, r1
 80045cc:	f103 0204 	add.w	r2, r3, #4
 80045d0:	d015      	beq.n	80045fe <_scanf_float+0x3de>
 80045d2:	9903      	ldr	r1, [sp, #12]
 80045d4:	600a      	str	r2, [r1, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	e9c3 6700 	strd	r6, r7, [r3]
 80045dc:	68e3      	ldr	r3, [r4, #12]
 80045de:	3301      	adds	r3, #1
 80045e0:	60e3      	str	r3, [r4, #12]
 80045e2:	e7d0      	b.n	8004586 <_scanf_float+0x366>
 80045e4:	9b04      	ldr	r3, [sp, #16]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0e4      	beq.n	80045b4 <_scanf_float+0x394>
 80045ea:	9905      	ldr	r1, [sp, #20]
 80045ec:	230a      	movs	r3, #10
 80045ee:	4640      	mov	r0, r8
 80045f0:	3101      	adds	r1, #1
 80045f2:	f002 fc5d 	bl	8006eb0 <_strtol_r>
 80045f6:	9b04      	ldr	r3, [sp, #16]
 80045f8:	9e05      	ldr	r6, [sp, #20]
 80045fa:	1ac2      	subs	r2, r0, r3
 80045fc:	e7d0      	b.n	80045a0 <_scanf_float+0x380>
 80045fe:	076d      	lsls	r5, r5, #29
 8004600:	d4e7      	bmi.n	80045d2 <_scanf_float+0x3b2>
 8004602:	9d03      	ldr	r5, [sp, #12]
 8004604:	602a      	str	r2, [r5, #0]
 8004606:	681d      	ldr	r5, [r3, #0]
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	f7fc f9fe 	bl	8000a0c <__aeabi_dcmpun>
 8004610:	b120      	cbz	r0, 800461c <_scanf_float+0x3fc>
 8004612:	4807      	ldr	r0, [pc, #28]	@ (8004630 <_scanf_float+0x410>)
 8004614:	f000 f9d2 	bl	80049bc <nanf>
 8004618:	6028      	str	r0, [r5, #0]
 800461a:	e7df      	b.n	80045dc <_scanf_float+0x3bc>
 800461c:	4630      	mov	r0, r6
 800461e:	4639      	mov	r1, r7
 8004620:	f7fc fa52 	bl	8000ac8 <__aeabi_d2f>
 8004624:	e7f8      	b.n	8004618 <_scanf_float+0x3f8>
 8004626:	2700      	movs	r7, #0
 8004628:	e633      	b.n	8004292 <_scanf_float+0x72>
 800462a:	bf00      	nop
 800462c:	080080ee 	.word	0x080080ee
 8004630:	0800822f 	.word	0x0800822f

08004634 <std>:
 8004634:	2300      	movs	r3, #0
 8004636:	b510      	push	{r4, lr}
 8004638:	4604      	mov	r4, r0
 800463a:	e9c0 3300 	strd	r3, r3, [r0]
 800463e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004642:	6083      	str	r3, [r0, #8]
 8004644:	8181      	strh	r1, [r0, #12]
 8004646:	6643      	str	r3, [r0, #100]	@ 0x64
 8004648:	81c2      	strh	r2, [r0, #14]
 800464a:	6183      	str	r3, [r0, #24]
 800464c:	4619      	mov	r1, r3
 800464e:	2208      	movs	r2, #8
 8004650:	305c      	adds	r0, #92	@ 0x5c
 8004652:	f000 f916 	bl	8004882 <memset>
 8004656:	4b0d      	ldr	r3, [pc, #52]	@ (800468c <std+0x58>)
 8004658:	6224      	str	r4, [r4, #32]
 800465a:	6263      	str	r3, [r4, #36]	@ 0x24
 800465c:	4b0c      	ldr	r3, [pc, #48]	@ (8004690 <std+0x5c>)
 800465e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004660:	4b0c      	ldr	r3, [pc, #48]	@ (8004694 <std+0x60>)
 8004662:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004664:	4b0c      	ldr	r3, [pc, #48]	@ (8004698 <std+0x64>)
 8004666:	6323      	str	r3, [r4, #48]	@ 0x30
 8004668:	4b0c      	ldr	r3, [pc, #48]	@ (800469c <std+0x68>)
 800466a:	429c      	cmp	r4, r3
 800466c:	d006      	beq.n	800467c <std+0x48>
 800466e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004672:	4294      	cmp	r4, r2
 8004674:	d002      	beq.n	800467c <std+0x48>
 8004676:	33d0      	adds	r3, #208	@ 0xd0
 8004678:	429c      	cmp	r4, r3
 800467a:	d105      	bne.n	8004688 <std+0x54>
 800467c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004684:	f000 b97a 	b.w	800497c <__retarget_lock_init_recursive>
 8004688:	bd10      	pop	{r4, pc}
 800468a:	bf00      	nop
 800468c:	080047fd 	.word	0x080047fd
 8004690:	0800481f 	.word	0x0800481f
 8004694:	08004857 	.word	0x08004857
 8004698:	0800487b 	.word	0x0800487b
 800469c:	200002ac 	.word	0x200002ac

080046a0 <stdio_exit_handler>:
 80046a0:	4a02      	ldr	r2, [pc, #8]	@ (80046ac <stdio_exit_handler+0xc>)
 80046a2:	4903      	ldr	r1, [pc, #12]	@ (80046b0 <stdio_exit_handler+0x10>)
 80046a4:	4803      	ldr	r0, [pc, #12]	@ (80046b4 <stdio_exit_handler+0x14>)
 80046a6:	f000 b869 	b.w	800477c <_fwalk_sglue>
 80046aa:	bf00      	nop
 80046ac:	2000000c 	.word	0x2000000c
 80046b0:	08007265 	.word	0x08007265
 80046b4:	2000001c 	.word	0x2000001c

080046b8 <cleanup_stdio>:
 80046b8:	6841      	ldr	r1, [r0, #4]
 80046ba:	4b0c      	ldr	r3, [pc, #48]	@ (80046ec <cleanup_stdio+0x34>)
 80046bc:	b510      	push	{r4, lr}
 80046be:	4299      	cmp	r1, r3
 80046c0:	4604      	mov	r4, r0
 80046c2:	d001      	beq.n	80046c8 <cleanup_stdio+0x10>
 80046c4:	f002 fdce 	bl	8007264 <_fflush_r>
 80046c8:	68a1      	ldr	r1, [r4, #8]
 80046ca:	4b09      	ldr	r3, [pc, #36]	@ (80046f0 <cleanup_stdio+0x38>)
 80046cc:	4299      	cmp	r1, r3
 80046ce:	d002      	beq.n	80046d6 <cleanup_stdio+0x1e>
 80046d0:	4620      	mov	r0, r4
 80046d2:	f002 fdc7 	bl	8007264 <_fflush_r>
 80046d6:	68e1      	ldr	r1, [r4, #12]
 80046d8:	4b06      	ldr	r3, [pc, #24]	@ (80046f4 <cleanup_stdio+0x3c>)
 80046da:	4299      	cmp	r1, r3
 80046dc:	d004      	beq.n	80046e8 <cleanup_stdio+0x30>
 80046de:	4620      	mov	r0, r4
 80046e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046e4:	f002 bdbe 	b.w	8007264 <_fflush_r>
 80046e8:	bd10      	pop	{r4, pc}
 80046ea:	bf00      	nop
 80046ec:	200002ac 	.word	0x200002ac
 80046f0:	20000314 	.word	0x20000314
 80046f4:	2000037c 	.word	0x2000037c

080046f8 <global_stdio_init.part.0>:
 80046f8:	b510      	push	{r4, lr}
 80046fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004728 <global_stdio_init.part.0+0x30>)
 80046fc:	4c0b      	ldr	r4, [pc, #44]	@ (800472c <global_stdio_init.part.0+0x34>)
 80046fe:	4a0c      	ldr	r2, [pc, #48]	@ (8004730 <global_stdio_init.part.0+0x38>)
 8004700:	4620      	mov	r0, r4
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	2104      	movs	r1, #4
 8004706:	2200      	movs	r2, #0
 8004708:	f7ff ff94 	bl	8004634 <std>
 800470c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004710:	2201      	movs	r2, #1
 8004712:	2109      	movs	r1, #9
 8004714:	f7ff ff8e 	bl	8004634 <std>
 8004718:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800471c:	2202      	movs	r2, #2
 800471e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004722:	2112      	movs	r1, #18
 8004724:	f7ff bf86 	b.w	8004634 <std>
 8004728:	200003e4 	.word	0x200003e4
 800472c:	200002ac 	.word	0x200002ac
 8004730:	080046a1 	.word	0x080046a1

08004734 <__sfp_lock_acquire>:
 8004734:	4801      	ldr	r0, [pc, #4]	@ (800473c <__sfp_lock_acquire+0x8>)
 8004736:	f000 b922 	b.w	800497e <__retarget_lock_acquire_recursive>
 800473a:	bf00      	nop
 800473c:	200003ed 	.word	0x200003ed

08004740 <__sfp_lock_release>:
 8004740:	4801      	ldr	r0, [pc, #4]	@ (8004748 <__sfp_lock_release+0x8>)
 8004742:	f000 b91d 	b.w	8004980 <__retarget_lock_release_recursive>
 8004746:	bf00      	nop
 8004748:	200003ed 	.word	0x200003ed

0800474c <__sinit>:
 800474c:	b510      	push	{r4, lr}
 800474e:	4604      	mov	r4, r0
 8004750:	f7ff fff0 	bl	8004734 <__sfp_lock_acquire>
 8004754:	6a23      	ldr	r3, [r4, #32]
 8004756:	b11b      	cbz	r3, 8004760 <__sinit+0x14>
 8004758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800475c:	f7ff bff0 	b.w	8004740 <__sfp_lock_release>
 8004760:	4b04      	ldr	r3, [pc, #16]	@ (8004774 <__sinit+0x28>)
 8004762:	6223      	str	r3, [r4, #32]
 8004764:	4b04      	ldr	r3, [pc, #16]	@ (8004778 <__sinit+0x2c>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1f5      	bne.n	8004758 <__sinit+0xc>
 800476c:	f7ff ffc4 	bl	80046f8 <global_stdio_init.part.0>
 8004770:	e7f2      	b.n	8004758 <__sinit+0xc>
 8004772:	bf00      	nop
 8004774:	080046b9 	.word	0x080046b9
 8004778:	200003e4 	.word	0x200003e4

0800477c <_fwalk_sglue>:
 800477c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004780:	4607      	mov	r7, r0
 8004782:	4688      	mov	r8, r1
 8004784:	4614      	mov	r4, r2
 8004786:	2600      	movs	r6, #0
 8004788:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800478c:	f1b9 0901 	subs.w	r9, r9, #1
 8004790:	d505      	bpl.n	800479e <_fwalk_sglue+0x22>
 8004792:	6824      	ldr	r4, [r4, #0]
 8004794:	2c00      	cmp	r4, #0
 8004796:	d1f7      	bne.n	8004788 <_fwalk_sglue+0xc>
 8004798:	4630      	mov	r0, r6
 800479a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800479e:	89ab      	ldrh	r3, [r5, #12]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d907      	bls.n	80047b4 <_fwalk_sglue+0x38>
 80047a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047a8:	3301      	adds	r3, #1
 80047aa:	d003      	beq.n	80047b4 <_fwalk_sglue+0x38>
 80047ac:	4629      	mov	r1, r5
 80047ae:	4638      	mov	r0, r7
 80047b0:	47c0      	blx	r8
 80047b2:	4306      	orrs	r6, r0
 80047b4:	3568      	adds	r5, #104	@ 0x68
 80047b6:	e7e9      	b.n	800478c <_fwalk_sglue+0x10>

080047b8 <siprintf>:
 80047b8:	b40e      	push	{r1, r2, r3}
 80047ba:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80047be:	b510      	push	{r4, lr}
 80047c0:	2400      	movs	r4, #0
 80047c2:	b09d      	sub	sp, #116	@ 0x74
 80047c4:	ab1f      	add	r3, sp, #124	@ 0x7c
 80047c6:	9002      	str	r0, [sp, #8]
 80047c8:	9006      	str	r0, [sp, #24]
 80047ca:	9107      	str	r1, [sp, #28]
 80047cc:	9104      	str	r1, [sp, #16]
 80047ce:	4809      	ldr	r0, [pc, #36]	@ (80047f4 <siprintf+0x3c>)
 80047d0:	4909      	ldr	r1, [pc, #36]	@ (80047f8 <siprintf+0x40>)
 80047d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80047d6:	9105      	str	r1, [sp, #20]
 80047d8:	6800      	ldr	r0, [r0, #0]
 80047da:	a902      	add	r1, sp, #8
 80047dc:	9301      	str	r3, [sp, #4]
 80047de:	941b      	str	r4, [sp, #108]	@ 0x6c
 80047e0:	f002 fbc4 	bl	8006f6c <_svfiprintf_r>
 80047e4:	9b02      	ldr	r3, [sp, #8]
 80047e6:	701c      	strb	r4, [r3, #0]
 80047e8:	b01d      	add	sp, #116	@ 0x74
 80047ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047ee:	b003      	add	sp, #12
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	20000018 	.word	0x20000018
 80047f8:	ffff0208 	.word	0xffff0208

080047fc <__sread>:
 80047fc:	b510      	push	{r4, lr}
 80047fe:	460c      	mov	r4, r1
 8004800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004804:	f000 f86c 	bl	80048e0 <_read_r>
 8004808:	2800      	cmp	r0, #0
 800480a:	bfab      	itete	ge
 800480c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800480e:	89a3      	ldrhlt	r3, [r4, #12]
 8004810:	181b      	addge	r3, r3, r0
 8004812:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004816:	bfac      	ite	ge
 8004818:	6563      	strge	r3, [r4, #84]	@ 0x54
 800481a:	81a3      	strhlt	r3, [r4, #12]
 800481c:	bd10      	pop	{r4, pc}

0800481e <__swrite>:
 800481e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004822:	461f      	mov	r7, r3
 8004824:	898b      	ldrh	r3, [r1, #12]
 8004826:	4605      	mov	r5, r0
 8004828:	05db      	lsls	r3, r3, #23
 800482a:	460c      	mov	r4, r1
 800482c:	4616      	mov	r6, r2
 800482e:	d505      	bpl.n	800483c <__swrite+0x1e>
 8004830:	2302      	movs	r3, #2
 8004832:	2200      	movs	r2, #0
 8004834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004838:	f000 f840 	bl	80048bc <_lseek_r>
 800483c:	89a3      	ldrh	r3, [r4, #12]
 800483e:	4632      	mov	r2, r6
 8004840:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004844:	81a3      	strh	r3, [r4, #12]
 8004846:	4628      	mov	r0, r5
 8004848:	463b      	mov	r3, r7
 800484a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800484e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004852:	f000 b857 	b.w	8004904 <_write_r>

08004856 <__sseek>:
 8004856:	b510      	push	{r4, lr}
 8004858:	460c      	mov	r4, r1
 800485a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800485e:	f000 f82d 	bl	80048bc <_lseek_r>
 8004862:	1c43      	adds	r3, r0, #1
 8004864:	89a3      	ldrh	r3, [r4, #12]
 8004866:	bf15      	itete	ne
 8004868:	6560      	strne	r0, [r4, #84]	@ 0x54
 800486a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800486e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004872:	81a3      	strheq	r3, [r4, #12]
 8004874:	bf18      	it	ne
 8004876:	81a3      	strhne	r3, [r4, #12]
 8004878:	bd10      	pop	{r4, pc}

0800487a <__sclose>:
 800487a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800487e:	f000 b80d 	b.w	800489c <_close_r>

08004882 <memset>:
 8004882:	4603      	mov	r3, r0
 8004884:	4402      	add	r2, r0
 8004886:	4293      	cmp	r3, r2
 8004888:	d100      	bne.n	800488c <memset+0xa>
 800488a:	4770      	bx	lr
 800488c:	f803 1b01 	strb.w	r1, [r3], #1
 8004890:	e7f9      	b.n	8004886 <memset+0x4>
	...

08004894 <_localeconv_r>:
 8004894:	4800      	ldr	r0, [pc, #0]	@ (8004898 <_localeconv_r+0x4>)
 8004896:	4770      	bx	lr
 8004898:	20000158 	.word	0x20000158

0800489c <_close_r>:
 800489c:	b538      	push	{r3, r4, r5, lr}
 800489e:	2300      	movs	r3, #0
 80048a0:	4d05      	ldr	r5, [pc, #20]	@ (80048b8 <_close_r+0x1c>)
 80048a2:	4604      	mov	r4, r0
 80048a4:	4608      	mov	r0, r1
 80048a6:	602b      	str	r3, [r5, #0]
 80048a8:	f7fd f87d 	bl	80019a6 <_close>
 80048ac:	1c43      	adds	r3, r0, #1
 80048ae:	d102      	bne.n	80048b6 <_close_r+0x1a>
 80048b0:	682b      	ldr	r3, [r5, #0]
 80048b2:	b103      	cbz	r3, 80048b6 <_close_r+0x1a>
 80048b4:	6023      	str	r3, [r4, #0]
 80048b6:	bd38      	pop	{r3, r4, r5, pc}
 80048b8:	200003e8 	.word	0x200003e8

080048bc <_lseek_r>:
 80048bc:	b538      	push	{r3, r4, r5, lr}
 80048be:	4604      	mov	r4, r0
 80048c0:	4608      	mov	r0, r1
 80048c2:	4611      	mov	r1, r2
 80048c4:	2200      	movs	r2, #0
 80048c6:	4d05      	ldr	r5, [pc, #20]	@ (80048dc <_lseek_r+0x20>)
 80048c8:	602a      	str	r2, [r5, #0]
 80048ca:	461a      	mov	r2, r3
 80048cc:	f7fd f88f 	bl	80019ee <_lseek>
 80048d0:	1c43      	adds	r3, r0, #1
 80048d2:	d102      	bne.n	80048da <_lseek_r+0x1e>
 80048d4:	682b      	ldr	r3, [r5, #0]
 80048d6:	b103      	cbz	r3, 80048da <_lseek_r+0x1e>
 80048d8:	6023      	str	r3, [r4, #0]
 80048da:	bd38      	pop	{r3, r4, r5, pc}
 80048dc:	200003e8 	.word	0x200003e8

080048e0 <_read_r>:
 80048e0:	b538      	push	{r3, r4, r5, lr}
 80048e2:	4604      	mov	r4, r0
 80048e4:	4608      	mov	r0, r1
 80048e6:	4611      	mov	r1, r2
 80048e8:	2200      	movs	r2, #0
 80048ea:	4d05      	ldr	r5, [pc, #20]	@ (8004900 <_read_r+0x20>)
 80048ec:	602a      	str	r2, [r5, #0]
 80048ee:	461a      	mov	r2, r3
 80048f0:	f7fd f820 	bl	8001934 <_read>
 80048f4:	1c43      	adds	r3, r0, #1
 80048f6:	d102      	bne.n	80048fe <_read_r+0x1e>
 80048f8:	682b      	ldr	r3, [r5, #0]
 80048fa:	b103      	cbz	r3, 80048fe <_read_r+0x1e>
 80048fc:	6023      	str	r3, [r4, #0]
 80048fe:	bd38      	pop	{r3, r4, r5, pc}
 8004900:	200003e8 	.word	0x200003e8

08004904 <_write_r>:
 8004904:	b538      	push	{r3, r4, r5, lr}
 8004906:	4604      	mov	r4, r0
 8004908:	4608      	mov	r0, r1
 800490a:	4611      	mov	r1, r2
 800490c:	2200      	movs	r2, #0
 800490e:	4d05      	ldr	r5, [pc, #20]	@ (8004924 <_write_r+0x20>)
 8004910:	602a      	str	r2, [r5, #0]
 8004912:	461a      	mov	r2, r3
 8004914:	f7fd f82b 	bl	800196e <_write>
 8004918:	1c43      	adds	r3, r0, #1
 800491a:	d102      	bne.n	8004922 <_write_r+0x1e>
 800491c:	682b      	ldr	r3, [r5, #0]
 800491e:	b103      	cbz	r3, 8004922 <_write_r+0x1e>
 8004920:	6023      	str	r3, [r4, #0]
 8004922:	bd38      	pop	{r3, r4, r5, pc}
 8004924:	200003e8 	.word	0x200003e8

08004928 <__errno>:
 8004928:	4b01      	ldr	r3, [pc, #4]	@ (8004930 <__errno+0x8>)
 800492a:	6818      	ldr	r0, [r3, #0]
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	20000018 	.word	0x20000018

08004934 <__libc_init_array>:
 8004934:	b570      	push	{r4, r5, r6, lr}
 8004936:	2600      	movs	r6, #0
 8004938:	4d0c      	ldr	r5, [pc, #48]	@ (800496c <__libc_init_array+0x38>)
 800493a:	4c0d      	ldr	r4, [pc, #52]	@ (8004970 <__libc_init_array+0x3c>)
 800493c:	1b64      	subs	r4, r4, r5
 800493e:	10a4      	asrs	r4, r4, #2
 8004940:	42a6      	cmp	r6, r4
 8004942:	d109      	bne.n	8004958 <__libc_init_array+0x24>
 8004944:	f003 fb6c 	bl	8008020 <_init>
 8004948:	2600      	movs	r6, #0
 800494a:	4d0a      	ldr	r5, [pc, #40]	@ (8004974 <__libc_init_array+0x40>)
 800494c:	4c0a      	ldr	r4, [pc, #40]	@ (8004978 <__libc_init_array+0x44>)
 800494e:	1b64      	subs	r4, r4, r5
 8004950:	10a4      	asrs	r4, r4, #2
 8004952:	42a6      	cmp	r6, r4
 8004954:	d105      	bne.n	8004962 <__libc_init_array+0x2e>
 8004956:	bd70      	pop	{r4, r5, r6, pc}
 8004958:	f855 3b04 	ldr.w	r3, [r5], #4
 800495c:	4798      	blx	r3
 800495e:	3601      	adds	r6, #1
 8004960:	e7ee      	b.n	8004940 <__libc_init_array+0xc>
 8004962:	f855 3b04 	ldr.w	r3, [r5], #4
 8004966:	4798      	blx	r3
 8004968:	3601      	adds	r6, #1
 800496a:	e7f2      	b.n	8004952 <__libc_init_array+0x1e>
 800496c:	080084ec 	.word	0x080084ec
 8004970:	080084ec 	.word	0x080084ec
 8004974:	080084ec 	.word	0x080084ec
 8004978:	080084f0 	.word	0x080084f0

0800497c <__retarget_lock_init_recursive>:
 800497c:	4770      	bx	lr

0800497e <__retarget_lock_acquire_recursive>:
 800497e:	4770      	bx	lr

08004980 <__retarget_lock_release_recursive>:
 8004980:	4770      	bx	lr

08004982 <memchr>:
 8004982:	4603      	mov	r3, r0
 8004984:	b510      	push	{r4, lr}
 8004986:	b2c9      	uxtb	r1, r1
 8004988:	4402      	add	r2, r0
 800498a:	4293      	cmp	r3, r2
 800498c:	4618      	mov	r0, r3
 800498e:	d101      	bne.n	8004994 <memchr+0x12>
 8004990:	2000      	movs	r0, #0
 8004992:	e003      	b.n	800499c <memchr+0x1a>
 8004994:	7804      	ldrb	r4, [r0, #0]
 8004996:	3301      	adds	r3, #1
 8004998:	428c      	cmp	r4, r1
 800499a:	d1f6      	bne.n	800498a <memchr+0x8>
 800499c:	bd10      	pop	{r4, pc}

0800499e <memcpy>:
 800499e:	440a      	add	r2, r1
 80049a0:	4291      	cmp	r1, r2
 80049a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80049a6:	d100      	bne.n	80049aa <memcpy+0xc>
 80049a8:	4770      	bx	lr
 80049aa:	b510      	push	{r4, lr}
 80049ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049b0:	4291      	cmp	r1, r2
 80049b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049b6:	d1f9      	bne.n	80049ac <memcpy+0xe>
 80049b8:	bd10      	pop	{r4, pc}
	...

080049bc <nanf>:
 80049bc:	4800      	ldr	r0, [pc, #0]	@ (80049c0 <nanf+0x4>)
 80049be:	4770      	bx	lr
 80049c0:	7fc00000 	.word	0x7fc00000

080049c4 <quorem>:
 80049c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049c8:	6903      	ldr	r3, [r0, #16]
 80049ca:	690c      	ldr	r4, [r1, #16]
 80049cc:	4607      	mov	r7, r0
 80049ce:	42a3      	cmp	r3, r4
 80049d0:	db7e      	blt.n	8004ad0 <quorem+0x10c>
 80049d2:	3c01      	subs	r4, #1
 80049d4:	00a3      	lsls	r3, r4, #2
 80049d6:	f100 0514 	add.w	r5, r0, #20
 80049da:	f101 0814 	add.w	r8, r1, #20
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80049e4:	9301      	str	r3, [sp, #4]
 80049e6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80049ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80049ee:	3301      	adds	r3, #1
 80049f0:	429a      	cmp	r2, r3
 80049f2:	fbb2 f6f3 	udiv	r6, r2, r3
 80049f6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80049fa:	d32e      	bcc.n	8004a5a <quorem+0x96>
 80049fc:	f04f 0a00 	mov.w	sl, #0
 8004a00:	46c4      	mov	ip, r8
 8004a02:	46ae      	mov	lr, r5
 8004a04:	46d3      	mov	fp, sl
 8004a06:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004a0a:	b298      	uxth	r0, r3
 8004a0c:	fb06 a000 	mla	r0, r6, r0, sl
 8004a10:	0c1b      	lsrs	r3, r3, #16
 8004a12:	0c02      	lsrs	r2, r0, #16
 8004a14:	fb06 2303 	mla	r3, r6, r3, r2
 8004a18:	f8de 2000 	ldr.w	r2, [lr]
 8004a1c:	b280      	uxth	r0, r0
 8004a1e:	b292      	uxth	r2, r2
 8004a20:	1a12      	subs	r2, r2, r0
 8004a22:	445a      	add	r2, fp
 8004a24:	f8de 0000 	ldr.w	r0, [lr]
 8004a28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004a32:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004a36:	b292      	uxth	r2, r2
 8004a38:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004a3c:	45e1      	cmp	r9, ip
 8004a3e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004a42:	f84e 2b04 	str.w	r2, [lr], #4
 8004a46:	d2de      	bcs.n	8004a06 <quorem+0x42>
 8004a48:	9b00      	ldr	r3, [sp, #0]
 8004a4a:	58eb      	ldr	r3, [r5, r3]
 8004a4c:	b92b      	cbnz	r3, 8004a5a <quorem+0x96>
 8004a4e:	9b01      	ldr	r3, [sp, #4]
 8004a50:	3b04      	subs	r3, #4
 8004a52:	429d      	cmp	r5, r3
 8004a54:	461a      	mov	r2, r3
 8004a56:	d32f      	bcc.n	8004ab8 <quorem+0xf4>
 8004a58:	613c      	str	r4, [r7, #16]
 8004a5a:	4638      	mov	r0, r7
 8004a5c:	f001 f9ca 	bl	8005df4 <__mcmp>
 8004a60:	2800      	cmp	r0, #0
 8004a62:	db25      	blt.n	8004ab0 <quorem+0xec>
 8004a64:	4629      	mov	r1, r5
 8004a66:	2000      	movs	r0, #0
 8004a68:	f858 2b04 	ldr.w	r2, [r8], #4
 8004a6c:	f8d1 c000 	ldr.w	ip, [r1]
 8004a70:	fa1f fe82 	uxth.w	lr, r2
 8004a74:	fa1f f38c 	uxth.w	r3, ip
 8004a78:	eba3 030e 	sub.w	r3, r3, lr
 8004a7c:	4403      	add	r3, r0
 8004a7e:	0c12      	lsrs	r2, r2, #16
 8004a80:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004a84:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a8e:	45c1      	cmp	r9, r8
 8004a90:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004a94:	f841 3b04 	str.w	r3, [r1], #4
 8004a98:	d2e6      	bcs.n	8004a68 <quorem+0xa4>
 8004a9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004aa2:	b922      	cbnz	r2, 8004aae <quorem+0xea>
 8004aa4:	3b04      	subs	r3, #4
 8004aa6:	429d      	cmp	r5, r3
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	d30b      	bcc.n	8004ac4 <quorem+0x100>
 8004aac:	613c      	str	r4, [r7, #16]
 8004aae:	3601      	adds	r6, #1
 8004ab0:	4630      	mov	r0, r6
 8004ab2:	b003      	add	sp, #12
 8004ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ab8:	6812      	ldr	r2, [r2, #0]
 8004aba:	3b04      	subs	r3, #4
 8004abc:	2a00      	cmp	r2, #0
 8004abe:	d1cb      	bne.n	8004a58 <quorem+0x94>
 8004ac0:	3c01      	subs	r4, #1
 8004ac2:	e7c6      	b.n	8004a52 <quorem+0x8e>
 8004ac4:	6812      	ldr	r2, [r2, #0]
 8004ac6:	3b04      	subs	r3, #4
 8004ac8:	2a00      	cmp	r2, #0
 8004aca:	d1ef      	bne.n	8004aac <quorem+0xe8>
 8004acc:	3c01      	subs	r4, #1
 8004ace:	e7ea      	b.n	8004aa6 <quorem+0xe2>
 8004ad0:	2000      	movs	r0, #0
 8004ad2:	e7ee      	b.n	8004ab2 <quorem+0xee>
 8004ad4:	0000      	movs	r0, r0
	...

08004ad8 <_dtoa_r>:
 8004ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004adc:	4614      	mov	r4, r2
 8004ade:	461d      	mov	r5, r3
 8004ae0:	69c7      	ldr	r7, [r0, #28]
 8004ae2:	b097      	sub	sp, #92	@ 0x5c
 8004ae4:	4681      	mov	r9, r0
 8004ae6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004aea:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004aec:	b97f      	cbnz	r7, 8004b0e <_dtoa_r+0x36>
 8004aee:	2010      	movs	r0, #16
 8004af0:	f000 fe0e 	bl	8005710 <malloc>
 8004af4:	4602      	mov	r2, r0
 8004af6:	f8c9 001c 	str.w	r0, [r9, #28]
 8004afa:	b920      	cbnz	r0, 8004b06 <_dtoa_r+0x2e>
 8004afc:	21ef      	movs	r1, #239	@ 0xef
 8004afe:	4bac      	ldr	r3, [pc, #688]	@ (8004db0 <_dtoa_r+0x2d8>)
 8004b00:	48ac      	ldr	r0, [pc, #688]	@ (8004db4 <_dtoa_r+0x2dc>)
 8004b02:	f002 fc19 	bl	8007338 <__assert_func>
 8004b06:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004b0a:	6007      	str	r7, [r0, #0]
 8004b0c:	60c7      	str	r7, [r0, #12]
 8004b0e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004b12:	6819      	ldr	r1, [r3, #0]
 8004b14:	b159      	cbz	r1, 8004b2e <_dtoa_r+0x56>
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	2301      	movs	r3, #1
 8004b1a:	4093      	lsls	r3, r2
 8004b1c:	604a      	str	r2, [r1, #4]
 8004b1e:	608b      	str	r3, [r1, #8]
 8004b20:	4648      	mov	r0, r9
 8004b22:	f000 feeb 	bl	80058fc <_Bfree>
 8004b26:	2200      	movs	r2, #0
 8004b28:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	1e2b      	subs	r3, r5, #0
 8004b30:	bfaf      	iteee	ge
 8004b32:	2300      	movge	r3, #0
 8004b34:	2201      	movlt	r2, #1
 8004b36:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004b3a:	9307      	strlt	r3, [sp, #28]
 8004b3c:	bfa8      	it	ge
 8004b3e:	6033      	strge	r3, [r6, #0]
 8004b40:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8004b44:	4b9c      	ldr	r3, [pc, #624]	@ (8004db8 <_dtoa_r+0x2e0>)
 8004b46:	bfb8      	it	lt
 8004b48:	6032      	strlt	r2, [r6, #0]
 8004b4a:	ea33 0308 	bics.w	r3, r3, r8
 8004b4e:	d112      	bne.n	8004b76 <_dtoa_r+0x9e>
 8004b50:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004b54:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004b5c:	4323      	orrs	r3, r4
 8004b5e:	f000 855e 	beq.w	800561e <_dtoa_r+0xb46>
 8004b62:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004b64:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004dbc <_dtoa_r+0x2e4>
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 8560 	beq.w	800562e <_dtoa_r+0xb56>
 8004b6e:	f10a 0303 	add.w	r3, sl, #3
 8004b72:	f000 bd5a 	b.w	800562a <_dtoa_r+0xb52>
 8004b76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004b7a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004b7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004b82:	2200      	movs	r2, #0
 8004b84:	2300      	movs	r3, #0
 8004b86:	f7fb ff0f 	bl	80009a8 <__aeabi_dcmpeq>
 8004b8a:	4607      	mov	r7, r0
 8004b8c:	b158      	cbz	r0, 8004ba6 <_dtoa_r+0xce>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004b92:	6013      	str	r3, [r2, #0]
 8004b94:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004b96:	b113      	cbz	r3, 8004b9e <_dtoa_r+0xc6>
 8004b98:	4b89      	ldr	r3, [pc, #548]	@ (8004dc0 <_dtoa_r+0x2e8>)
 8004b9a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004b9c:	6013      	str	r3, [r2, #0]
 8004b9e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8004dc4 <_dtoa_r+0x2ec>
 8004ba2:	f000 bd44 	b.w	800562e <_dtoa_r+0xb56>
 8004ba6:	ab14      	add	r3, sp, #80	@ 0x50
 8004ba8:	9301      	str	r3, [sp, #4]
 8004baa:	ab15      	add	r3, sp, #84	@ 0x54
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	4648      	mov	r0, r9
 8004bb0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004bb4:	f001 fa36 	bl	8006024 <__d2b>
 8004bb8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004bbc:	9003      	str	r0, [sp, #12]
 8004bbe:	2e00      	cmp	r6, #0
 8004bc0:	d078      	beq.n	8004cb4 <_dtoa_r+0x1dc>
 8004bc2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004bc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004bc8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004bcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bd0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004bd4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004bd8:	9712      	str	r7, [sp, #72]	@ 0x48
 8004bda:	4619      	mov	r1, r3
 8004bdc:	2200      	movs	r2, #0
 8004bde:	4b7a      	ldr	r3, [pc, #488]	@ (8004dc8 <_dtoa_r+0x2f0>)
 8004be0:	f7fb fac2 	bl	8000168 <__aeabi_dsub>
 8004be4:	a36c      	add	r3, pc, #432	@ (adr r3, 8004d98 <_dtoa_r+0x2c0>)
 8004be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bea:	f7fb fc75 	bl	80004d8 <__aeabi_dmul>
 8004bee:	a36c      	add	r3, pc, #432	@ (adr r3, 8004da0 <_dtoa_r+0x2c8>)
 8004bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf4:	f7fb faba 	bl	800016c <__adddf3>
 8004bf8:	4604      	mov	r4, r0
 8004bfa:	4630      	mov	r0, r6
 8004bfc:	460d      	mov	r5, r1
 8004bfe:	f7fb fc01 	bl	8000404 <__aeabi_i2d>
 8004c02:	a369      	add	r3, pc, #420	@ (adr r3, 8004da8 <_dtoa_r+0x2d0>)
 8004c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c08:	f7fb fc66 	bl	80004d8 <__aeabi_dmul>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	460b      	mov	r3, r1
 8004c10:	4620      	mov	r0, r4
 8004c12:	4629      	mov	r1, r5
 8004c14:	f7fb faaa 	bl	800016c <__adddf3>
 8004c18:	4604      	mov	r4, r0
 8004c1a:	460d      	mov	r5, r1
 8004c1c:	f7fb ff0c 	bl	8000a38 <__aeabi_d2iz>
 8004c20:	2200      	movs	r2, #0
 8004c22:	4607      	mov	r7, r0
 8004c24:	2300      	movs	r3, #0
 8004c26:	4620      	mov	r0, r4
 8004c28:	4629      	mov	r1, r5
 8004c2a:	f7fb fec7 	bl	80009bc <__aeabi_dcmplt>
 8004c2e:	b140      	cbz	r0, 8004c42 <_dtoa_r+0x16a>
 8004c30:	4638      	mov	r0, r7
 8004c32:	f7fb fbe7 	bl	8000404 <__aeabi_i2d>
 8004c36:	4622      	mov	r2, r4
 8004c38:	462b      	mov	r3, r5
 8004c3a:	f7fb feb5 	bl	80009a8 <__aeabi_dcmpeq>
 8004c3e:	b900      	cbnz	r0, 8004c42 <_dtoa_r+0x16a>
 8004c40:	3f01      	subs	r7, #1
 8004c42:	2f16      	cmp	r7, #22
 8004c44:	d854      	bhi.n	8004cf0 <_dtoa_r+0x218>
 8004c46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004c4a:	4b60      	ldr	r3, [pc, #384]	@ (8004dcc <_dtoa_r+0x2f4>)
 8004c4c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c54:	f7fb feb2 	bl	80009bc <__aeabi_dcmplt>
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	d04b      	beq.n	8004cf4 <_dtoa_r+0x21c>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	3f01      	subs	r7, #1
 8004c60:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004c62:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004c64:	1b9b      	subs	r3, r3, r6
 8004c66:	1e5a      	subs	r2, r3, #1
 8004c68:	bf49      	itett	mi
 8004c6a:	f1c3 0301 	rsbmi	r3, r3, #1
 8004c6e:	2300      	movpl	r3, #0
 8004c70:	9304      	strmi	r3, [sp, #16]
 8004c72:	2300      	movmi	r3, #0
 8004c74:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c76:	bf54      	ite	pl
 8004c78:	9304      	strpl	r3, [sp, #16]
 8004c7a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004c7c:	2f00      	cmp	r7, #0
 8004c7e:	db3b      	blt.n	8004cf8 <_dtoa_r+0x220>
 8004c80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c82:	970e      	str	r7, [sp, #56]	@ 0x38
 8004c84:	443b      	add	r3, r7
 8004c86:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c88:	2300      	movs	r3, #0
 8004c8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c8c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004c8e:	2b09      	cmp	r3, #9
 8004c90:	d865      	bhi.n	8004d5e <_dtoa_r+0x286>
 8004c92:	2b05      	cmp	r3, #5
 8004c94:	bfc4      	itt	gt
 8004c96:	3b04      	subgt	r3, #4
 8004c98:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004c9a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004c9c:	bfc8      	it	gt
 8004c9e:	2400      	movgt	r4, #0
 8004ca0:	f1a3 0302 	sub.w	r3, r3, #2
 8004ca4:	bfd8      	it	le
 8004ca6:	2401      	movle	r4, #1
 8004ca8:	2b03      	cmp	r3, #3
 8004caa:	d864      	bhi.n	8004d76 <_dtoa_r+0x29e>
 8004cac:	e8df f003 	tbb	[pc, r3]
 8004cb0:	2c385553 	.word	0x2c385553
 8004cb4:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004cb8:	441e      	add	r6, r3
 8004cba:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004cbe:	2b20      	cmp	r3, #32
 8004cc0:	bfc1      	itttt	gt
 8004cc2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004cc6:	fa08 f803 	lslgt.w	r8, r8, r3
 8004cca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004cce:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004cd2:	bfd6      	itet	le
 8004cd4:	f1c3 0320 	rsble	r3, r3, #32
 8004cd8:	ea48 0003 	orrgt.w	r0, r8, r3
 8004cdc:	fa04 f003 	lslle.w	r0, r4, r3
 8004ce0:	f7fb fb80 	bl	80003e4 <__aeabi_ui2d>
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004cea:	3e01      	subs	r6, #1
 8004cec:	9212      	str	r2, [sp, #72]	@ 0x48
 8004cee:	e774      	b.n	8004bda <_dtoa_r+0x102>
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e7b5      	b.n	8004c60 <_dtoa_r+0x188>
 8004cf4:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004cf6:	e7b4      	b.n	8004c62 <_dtoa_r+0x18a>
 8004cf8:	9b04      	ldr	r3, [sp, #16]
 8004cfa:	1bdb      	subs	r3, r3, r7
 8004cfc:	9304      	str	r3, [sp, #16]
 8004cfe:	427b      	negs	r3, r7
 8004d00:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d02:	2300      	movs	r3, #0
 8004d04:	930e      	str	r3, [sp, #56]	@ 0x38
 8004d06:	e7c1      	b.n	8004c8c <_dtoa_r+0x1b4>
 8004d08:	2301      	movs	r3, #1
 8004d0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d0c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004d0e:	eb07 0b03 	add.w	fp, r7, r3
 8004d12:	f10b 0301 	add.w	r3, fp, #1
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	9308      	str	r3, [sp, #32]
 8004d1a:	bfb8      	it	lt
 8004d1c:	2301      	movlt	r3, #1
 8004d1e:	e006      	b.n	8004d2e <_dtoa_r+0x256>
 8004d20:	2301      	movs	r3, #1
 8004d22:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d24:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	dd28      	ble.n	8004d7c <_dtoa_r+0x2a4>
 8004d2a:	469b      	mov	fp, r3
 8004d2c:	9308      	str	r3, [sp, #32]
 8004d2e:	2100      	movs	r1, #0
 8004d30:	2204      	movs	r2, #4
 8004d32:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8004d36:	f102 0514 	add.w	r5, r2, #20
 8004d3a:	429d      	cmp	r5, r3
 8004d3c:	d926      	bls.n	8004d8c <_dtoa_r+0x2b4>
 8004d3e:	6041      	str	r1, [r0, #4]
 8004d40:	4648      	mov	r0, r9
 8004d42:	f000 fd9b 	bl	800587c <_Balloc>
 8004d46:	4682      	mov	sl, r0
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	d143      	bne.n	8004dd4 <_dtoa_r+0x2fc>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	f240 11af 	movw	r1, #431	@ 0x1af
 8004d52:	4b1f      	ldr	r3, [pc, #124]	@ (8004dd0 <_dtoa_r+0x2f8>)
 8004d54:	e6d4      	b.n	8004b00 <_dtoa_r+0x28>
 8004d56:	2300      	movs	r3, #0
 8004d58:	e7e3      	b.n	8004d22 <_dtoa_r+0x24a>
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	e7d5      	b.n	8004d0a <_dtoa_r+0x232>
 8004d5e:	2401      	movs	r4, #1
 8004d60:	2300      	movs	r3, #0
 8004d62:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004d64:	9320      	str	r3, [sp, #128]	@ 0x80
 8004d66:	f04f 3bff 	mov.w	fp, #4294967295
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	2312      	movs	r3, #18
 8004d6e:	f8cd b020 	str.w	fp, [sp, #32]
 8004d72:	9221      	str	r2, [sp, #132]	@ 0x84
 8004d74:	e7db      	b.n	8004d2e <_dtoa_r+0x256>
 8004d76:	2301      	movs	r3, #1
 8004d78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d7a:	e7f4      	b.n	8004d66 <_dtoa_r+0x28e>
 8004d7c:	f04f 0b01 	mov.w	fp, #1
 8004d80:	465b      	mov	r3, fp
 8004d82:	f8cd b020 	str.w	fp, [sp, #32]
 8004d86:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8004d8a:	e7d0      	b.n	8004d2e <_dtoa_r+0x256>
 8004d8c:	3101      	adds	r1, #1
 8004d8e:	0052      	lsls	r2, r2, #1
 8004d90:	e7d1      	b.n	8004d36 <_dtoa_r+0x25e>
 8004d92:	bf00      	nop
 8004d94:	f3af 8000 	nop.w
 8004d98:	636f4361 	.word	0x636f4361
 8004d9c:	3fd287a7 	.word	0x3fd287a7
 8004da0:	8b60c8b3 	.word	0x8b60c8b3
 8004da4:	3fc68a28 	.word	0x3fc68a28
 8004da8:	509f79fb 	.word	0x509f79fb
 8004dac:	3fd34413 	.word	0x3fd34413
 8004db0:	08008100 	.word	0x08008100
 8004db4:	08008117 	.word	0x08008117
 8004db8:	7ff00000 	.word	0x7ff00000
 8004dbc:	080080fc 	.word	0x080080fc
 8004dc0:	080080cb 	.word	0x080080cb
 8004dc4:	080080ca 	.word	0x080080ca
 8004dc8:	3ff80000 	.word	0x3ff80000
 8004dcc:	080082c8 	.word	0x080082c8
 8004dd0:	0800816f 	.word	0x0800816f
 8004dd4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004dd8:	6018      	str	r0, [r3, #0]
 8004dda:	9b08      	ldr	r3, [sp, #32]
 8004ddc:	2b0e      	cmp	r3, #14
 8004dde:	f200 80a1 	bhi.w	8004f24 <_dtoa_r+0x44c>
 8004de2:	2c00      	cmp	r4, #0
 8004de4:	f000 809e 	beq.w	8004f24 <_dtoa_r+0x44c>
 8004de8:	2f00      	cmp	r7, #0
 8004dea:	dd33      	ble.n	8004e54 <_dtoa_r+0x37c>
 8004dec:	4b9c      	ldr	r3, [pc, #624]	@ (8005060 <_dtoa_r+0x588>)
 8004dee:	f007 020f 	and.w	r2, r7, #15
 8004df2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004df6:	05f8      	lsls	r0, r7, #23
 8004df8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004dfc:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8004e00:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004e04:	d516      	bpl.n	8004e34 <_dtoa_r+0x35c>
 8004e06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004e0a:	4b96      	ldr	r3, [pc, #600]	@ (8005064 <_dtoa_r+0x58c>)
 8004e0c:	2603      	movs	r6, #3
 8004e0e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e12:	f7fb fc8b 	bl	800072c <__aeabi_ddiv>
 8004e16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004e1a:	f004 040f 	and.w	r4, r4, #15
 8004e1e:	4d91      	ldr	r5, [pc, #580]	@ (8005064 <_dtoa_r+0x58c>)
 8004e20:	b954      	cbnz	r4, 8004e38 <_dtoa_r+0x360>
 8004e22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004e26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e2a:	f7fb fc7f 	bl	800072c <__aeabi_ddiv>
 8004e2e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004e32:	e028      	b.n	8004e86 <_dtoa_r+0x3ae>
 8004e34:	2602      	movs	r6, #2
 8004e36:	e7f2      	b.n	8004e1e <_dtoa_r+0x346>
 8004e38:	07e1      	lsls	r1, r4, #31
 8004e3a:	d508      	bpl.n	8004e4e <_dtoa_r+0x376>
 8004e3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004e40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004e44:	f7fb fb48 	bl	80004d8 <__aeabi_dmul>
 8004e48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004e4c:	3601      	adds	r6, #1
 8004e4e:	1064      	asrs	r4, r4, #1
 8004e50:	3508      	adds	r5, #8
 8004e52:	e7e5      	b.n	8004e20 <_dtoa_r+0x348>
 8004e54:	f000 80af 	beq.w	8004fb6 <_dtoa_r+0x4de>
 8004e58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004e5c:	427c      	negs	r4, r7
 8004e5e:	4b80      	ldr	r3, [pc, #512]	@ (8005060 <_dtoa_r+0x588>)
 8004e60:	f004 020f 	and.w	r2, r4, #15
 8004e64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6c:	f7fb fb34 	bl	80004d8 <__aeabi_dmul>
 8004e70:	2602      	movs	r6, #2
 8004e72:	2300      	movs	r3, #0
 8004e74:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004e78:	4d7a      	ldr	r5, [pc, #488]	@ (8005064 <_dtoa_r+0x58c>)
 8004e7a:	1124      	asrs	r4, r4, #4
 8004e7c:	2c00      	cmp	r4, #0
 8004e7e:	f040 808f 	bne.w	8004fa0 <_dtoa_r+0x4c8>
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1d3      	bne.n	8004e2e <_dtoa_r+0x356>
 8004e86:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004e8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 8094 	beq.w	8004fba <_dtoa_r+0x4e2>
 8004e92:	2200      	movs	r2, #0
 8004e94:	4620      	mov	r0, r4
 8004e96:	4629      	mov	r1, r5
 8004e98:	4b73      	ldr	r3, [pc, #460]	@ (8005068 <_dtoa_r+0x590>)
 8004e9a:	f7fb fd8f 	bl	80009bc <__aeabi_dcmplt>
 8004e9e:	2800      	cmp	r0, #0
 8004ea0:	f000 808b 	beq.w	8004fba <_dtoa_r+0x4e2>
 8004ea4:	9b08      	ldr	r3, [sp, #32]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f000 8087 	beq.w	8004fba <_dtoa_r+0x4e2>
 8004eac:	f1bb 0f00 	cmp.w	fp, #0
 8004eb0:	dd34      	ble.n	8004f1c <_dtoa_r+0x444>
 8004eb2:	4620      	mov	r0, r4
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	4629      	mov	r1, r5
 8004eb8:	4b6c      	ldr	r3, [pc, #432]	@ (800506c <_dtoa_r+0x594>)
 8004eba:	f7fb fb0d 	bl	80004d8 <__aeabi_dmul>
 8004ebe:	465c      	mov	r4, fp
 8004ec0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004ec4:	f107 38ff 	add.w	r8, r7, #4294967295
 8004ec8:	3601      	adds	r6, #1
 8004eca:	4630      	mov	r0, r6
 8004ecc:	f7fb fa9a 	bl	8000404 <__aeabi_i2d>
 8004ed0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ed4:	f7fb fb00 	bl	80004d8 <__aeabi_dmul>
 8004ed8:	2200      	movs	r2, #0
 8004eda:	4b65      	ldr	r3, [pc, #404]	@ (8005070 <_dtoa_r+0x598>)
 8004edc:	f7fb f946 	bl	800016c <__adddf3>
 8004ee0:	4605      	mov	r5, r0
 8004ee2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004ee6:	2c00      	cmp	r4, #0
 8004ee8:	d16a      	bne.n	8004fc0 <_dtoa_r+0x4e8>
 8004eea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	4b60      	ldr	r3, [pc, #384]	@ (8005074 <_dtoa_r+0x59c>)
 8004ef2:	f7fb f939 	bl	8000168 <__aeabi_dsub>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	460b      	mov	r3, r1
 8004efa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004efe:	462a      	mov	r2, r5
 8004f00:	4633      	mov	r3, r6
 8004f02:	f7fb fd79 	bl	80009f8 <__aeabi_dcmpgt>
 8004f06:	2800      	cmp	r0, #0
 8004f08:	f040 8298 	bne.w	800543c <_dtoa_r+0x964>
 8004f0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f10:	462a      	mov	r2, r5
 8004f12:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004f16:	f7fb fd51 	bl	80009bc <__aeabi_dcmplt>
 8004f1a:	bb38      	cbnz	r0, 8004f6c <_dtoa_r+0x494>
 8004f1c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004f20:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004f24:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f2c0 8157 	blt.w	80051da <_dtoa_r+0x702>
 8004f2c:	2f0e      	cmp	r7, #14
 8004f2e:	f300 8154 	bgt.w	80051da <_dtoa_r+0x702>
 8004f32:	4b4b      	ldr	r3, [pc, #300]	@ (8005060 <_dtoa_r+0x588>)
 8004f34:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004f38:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004f3c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004f40:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f280 80e5 	bge.w	8005112 <_dtoa_r+0x63a>
 8004f48:	9b08      	ldr	r3, [sp, #32]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f300 80e1 	bgt.w	8005112 <_dtoa_r+0x63a>
 8004f50:	d10c      	bne.n	8004f6c <_dtoa_r+0x494>
 8004f52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f56:	2200      	movs	r2, #0
 8004f58:	4b46      	ldr	r3, [pc, #280]	@ (8005074 <_dtoa_r+0x59c>)
 8004f5a:	f7fb fabd 	bl	80004d8 <__aeabi_dmul>
 8004f5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004f62:	f7fb fd3f 	bl	80009e4 <__aeabi_dcmpge>
 8004f66:	2800      	cmp	r0, #0
 8004f68:	f000 8266 	beq.w	8005438 <_dtoa_r+0x960>
 8004f6c:	2400      	movs	r4, #0
 8004f6e:	4625      	mov	r5, r4
 8004f70:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004f72:	4656      	mov	r6, sl
 8004f74:	ea6f 0803 	mvn.w	r8, r3
 8004f78:	2700      	movs	r7, #0
 8004f7a:	4621      	mov	r1, r4
 8004f7c:	4648      	mov	r0, r9
 8004f7e:	f000 fcbd 	bl	80058fc <_Bfree>
 8004f82:	2d00      	cmp	r5, #0
 8004f84:	f000 80bd 	beq.w	8005102 <_dtoa_r+0x62a>
 8004f88:	b12f      	cbz	r7, 8004f96 <_dtoa_r+0x4be>
 8004f8a:	42af      	cmp	r7, r5
 8004f8c:	d003      	beq.n	8004f96 <_dtoa_r+0x4be>
 8004f8e:	4639      	mov	r1, r7
 8004f90:	4648      	mov	r0, r9
 8004f92:	f000 fcb3 	bl	80058fc <_Bfree>
 8004f96:	4629      	mov	r1, r5
 8004f98:	4648      	mov	r0, r9
 8004f9a:	f000 fcaf 	bl	80058fc <_Bfree>
 8004f9e:	e0b0      	b.n	8005102 <_dtoa_r+0x62a>
 8004fa0:	07e2      	lsls	r2, r4, #31
 8004fa2:	d505      	bpl.n	8004fb0 <_dtoa_r+0x4d8>
 8004fa4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004fa8:	f7fb fa96 	bl	80004d8 <__aeabi_dmul>
 8004fac:	2301      	movs	r3, #1
 8004fae:	3601      	adds	r6, #1
 8004fb0:	1064      	asrs	r4, r4, #1
 8004fb2:	3508      	adds	r5, #8
 8004fb4:	e762      	b.n	8004e7c <_dtoa_r+0x3a4>
 8004fb6:	2602      	movs	r6, #2
 8004fb8:	e765      	b.n	8004e86 <_dtoa_r+0x3ae>
 8004fba:	46b8      	mov	r8, r7
 8004fbc:	9c08      	ldr	r4, [sp, #32]
 8004fbe:	e784      	b.n	8004eca <_dtoa_r+0x3f2>
 8004fc0:	4b27      	ldr	r3, [pc, #156]	@ (8005060 <_dtoa_r+0x588>)
 8004fc2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004fc4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004fc8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004fcc:	4454      	add	r4, sl
 8004fce:	2900      	cmp	r1, #0
 8004fd0:	d054      	beq.n	800507c <_dtoa_r+0x5a4>
 8004fd2:	2000      	movs	r0, #0
 8004fd4:	4928      	ldr	r1, [pc, #160]	@ (8005078 <_dtoa_r+0x5a0>)
 8004fd6:	f7fb fba9 	bl	800072c <__aeabi_ddiv>
 8004fda:	4633      	mov	r3, r6
 8004fdc:	462a      	mov	r2, r5
 8004fde:	f7fb f8c3 	bl	8000168 <__aeabi_dsub>
 8004fe2:	4656      	mov	r6, sl
 8004fe4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004fe8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fec:	f7fb fd24 	bl	8000a38 <__aeabi_d2iz>
 8004ff0:	4605      	mov	r5, r0
 8004ff2:	f7fb fa07 	bl	8000404 <__aeabi_i2d>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ffe:	f7fb f8b3 	bl	8000168 <__aeabi_dsub>
 8005002:	4602      	mov	r2, r0
 8005004:	460b      	mov	r3, r1
 8005006:	3530      	adds	r5, #48	@ 0x30
 8005008:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800500c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005010:	f806 5b01 	strb.w	r5, [r6], #1
 8005014:	f7fb fcd2 	bl	80009bc <__aeabi_dcmplt>
 8005018:	2800      	cmp	r0, #0
 800501a:	d172      	bne.n	8005102 <_dtoa_r+0x62a>
 800501c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005020:	2000      	movs	r0, #0
 8005022:	4911      	ldr	r1, [pc, #68]	@ (8005068 <_dtoa_r+0x590>)
 8005024:	f7fb f8a0 	bl	8000168 <__aeabi_dsub>
 8005028:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800502c:	f7fb fcc6 	bl	80009bc <__aeabi_dcmplt>
 8005030:	2800      	cmp	r0, #0
 8005032:	f040 80b4 	bne.w	800519e <_dtoa_r+0x6c6>
 8005036:	42a6      	cmp	r6, r4
 8005038:	f43f af70 	beq.w	8004f1c <_dtoa_r+0x444>
 800503c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005040:	2200      	movs	r2, #0
 8005042:	4b0a      	ldr	r3, [pc, #40]	@ (800506c <_dtoa_r+0x594>)
 8005044:	f7fb fa48 	bl	80004d8 <__aeabi_dmul>
 8005048:	2200      	movs	r2, #0
 800504a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800504e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005052:	4b06      	ldr	r3, [pc, #24]	@ (800506c <_dtoa_r+0x594>)
 8005054:	f7fb fa40 	bl	80004d8 <__aeabi_dmul>
 8005058:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800505c:	e7c4      	b.n	8004fe8 <_dtoa_r+0x510>
 800505e:	bf00      	nop
 8005060:	080082c8 	.word	0x080082c8
 8005064:	080082a0 	.word	0x080082a0
 8005068:	3ff00000 	.word	0x3ff00000
 800506c:	40240000 	.word	0x40240000
 8005070:	401c0000 	.word	0x401c0000
 8005074:	40140000 	.word	0x40140000
 8005078:	3fe00000 	.word	0x3fe00000
 800507c:	4631      	mov	r1, r6
 800507e:	4628      	mov	r0, r5
 8005080:	f7fb fa2a 	bl	80004d8 <__aeabi_dmul>
 8005084:	4656      	mov	r6, sl
 8005086:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800508a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800508c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005090:	f7fb fcd2 	bl	8000a38 <__aeabi_d2iz>
 8005094:	4605      	mov	r5, r0
 8005096:	f7fb f9b5 	bl	8000404 <__aeabi_i2d>
 800509a:	4602      	mov	r2, r0
 800509c:	460b      	mov	r3, r1
 800509e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050a2:	f7fb f861 	bl	8000168 <__aeabi_dsub>
 80050a6:	4602      	mov	r2, r0
 80050a8:	460b      	mov	r3, r1
 80050aa:	3530      	adds	r5, #48	@ 0x30
 80050ac:	f806 5b01 	strb.w	r5, [r6], #1
 80050b0:	42a6      	cmp	r6, r4
 80050b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80050b6:	f04f 0200 	mov.w	r2, #0
 80050ba:	d124      	bne.n	8005106 <_dtoa_r+0x62e>
 80050bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80050c0:	4bae      	ldr	r3, [pc, #696]	@ (800537c <_dtoa_r+0x8a4>)
 80050c2:	f7fb f853 	bl	800016c <__adddf3>
 80050c6:	4602      	mov	r2, r0
 80050c8:	460b      	mov	r3, r1
 80050ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050ce:	f7fb fc93 	bl	80009f8 <__aeabi_dcmpgt>
 80050d2:	2800      	cmp	r0, #0
 80050d4:	d163      	bne.n	800519e <_dtoa_r+0x6c6>
 80050d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80050da:	2000      	movs	r0, #0
 80050dc:	49a7      	ldr	r1, [pc, #668]	@ (800537c <_dtoa_r+0x8a4>)
 80050de:	f7fb f843 	bl	8000168 <__aeabi_dsub>
 80050e2:	4602      	mov	r2, r0
 80050e4:	460b      	mov	r3, r1
 80050e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050ea:	f7fb fc67 	bl	80009bc <__aeabi_dcmplt>
 80050ee:	2800      	cmp	r0, #0
 80050f0:	f43f af14 	beq.w	8004f1c <_dtoa_r+0x444>
 80050f4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80050f6:	1e73      	subs	r3, r6, #1
 80050f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80050fa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80050fe:	2b30      	cmp	r3, #48	@ 0x30
 8005100:	d0f8      	beq.n	80050f4 <_dtoa_r+0x61c>
 8005102:	4647      	mov	r7, r8
 8005104:	e03b      	b.n	800517e <_dtoa_r+0x6a6>
 8005106:	4b9e      	ldr	r3, [pc, #632]	@ (8005380 <_dtoa_r+0x8a8>)
 8005108:	f7fb f9e6 	bl	80004d8 <__aeabi_dmul>
 800510c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005110:	e7bc      	b.n	800508c <_dtoa_r+0x5b4>
 8005112:	4656      	mov	r6, sl
 8005114:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005118:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800511c:	4620      	mov	r0, r4
 800511e:	4629      	mov	r1, r5
 8005120:	f7fb fb04 	bl	800072c <__aeabi_ddiv>
 8005124:	f7fb fc88 	bl	8000a38 <__aeabi_d2iz>
 8005128:	4680      	mov	r8, r0
 800512a:	f7fb f96b 	bl	8000404 <__aeabi_i2d>
 800512e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005132:	f7fb f9d1 	bl	80004d8 <__aeabi_dmul>
 8005136:	4602      	mov	r2, r0
 8005138:	460b      	mov	r3, r1
 800513a:	4620      	mov	r0, r4
 800513c:	4629      	mov	r1, r5
 800513e:	f7fb f813 	bl	8000168 <__aeabi_dsub>
 8005142:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005146:	9d08      	ldr	r5, [sp, #32]
 8005148:	f806 4b01 	strb.w	r4, [r6], #1
 800514c:	eba6 040a 	sub.w	r4, r6, sl
 8005150:	42a5      	cmp	r5, r4
 8005152:	4602      	mov	r2, r0
 8005154:	460b      	mov	r3, r1
 8005156:	d133      	bne.n	80051c0 <_dtoa_r+0x6e8>
 8005158:	f7fb f808 	bl	800016c <__adddf3>
 800515c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005160:	4604      	mov	r4, r0
 8005162:	460d      	mov	r5, r1
 8005164:	f7fb fc48 	bl	80009f8 <__aeabi_dcmpgt>
 8005168:	b9c0      	cbnz	r0, 800519c <_dtoa_r+0x6c4>
 800516a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800516e:	4620      	mov	r0, r4
 8005170:	4629      	mov	r1, r5
 8005172:	f7fb fc19 	bl	80009a8 <__aeabi_dcmpeq>
 8005176:	b110      	cbz	r0, 800517e <_dtoa_r+0x6a6>
 8005178:	f018 0f01 	tst.w	r8, #1
 800517c:	d10e      	bne.n	800519c <_dtoa_r+0x6c4>
 800517e:	4648      	mov	r0, r9
 8005180:	9903      	ldr	r1, [sp, #12]
 8005182:	f000 fbbb 	bl	80058fc <_Bfree>
 8005186:	2300      	movs	r3, #0
 8005188:	7033      	strb	r3, [r6, #0]
 800518a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800518c:	3701      	adds	r7, #1
 800518e:	601f      	str	r7, [r3, #0]
 8005190:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005192:	2b00      	cmp	r3, #0
 8005194:	f000 824b 	beq.w	800562e <_dtoa_r+0xb56>
 8005198:	601e      	str	r6, [r3, #0]
 800519a:	e248      	b.n	800562e <_dtoa_r+0xb56>
 800519c:	46b8      	mov	r8, r7
 800519e:	4633      	mov	r3, r6
 80051a0:	461e      	mov	r6, r3
 80051a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80051a6:	2a39      	cmp	r2, #57	@ 0x39
 80051a8:	d106      	bne.n	80051b8 <_dtoa_r+0x6e0>
 80051aa:	459a      	cmp	sl, r3
 80051ac:	d1f8      	bne.n	80051a0 <_dtoa_r+0x6c8>
 80051ae:	2230      	movs	r2, #48	@ 0x30
 80051b0:	f108 0801 	add.w	r8, r8, #1
 80051b4:	f88a 2000 	strb.w	r2, [sl]
 80051b8:	781a      	ldrb	r2, [r3, #0]
 80051ba:	3201      	adds	r2, #1
 80051bc:	701a      	strb	r2, [r3, #0]
 80051be:	e7a0      	b.n	8005102 <_dtoa_r+0x62a>
 80051c0:	2200      	movs	r2, #0
 80051c2:	4b6f      	ldr	r3, [pc, #444]	@ (8005380 <_dtoa_r+0x8a8>)
 80051c4:	f7fb f988 	bl	80004d8 <__aeabi_dmul>
 80051c8:	2200      	movs	r2, #0
 80051ca:	2300      	movs	r3, #0
 80051cc:	4604      	mov	r4, r0
 80051ce:	460d      	mov	r5, r1
 80051d0:	f7fb fbea 	bl	80009a8 <__aeabi_dcmpeq>
 80051d4:	2800      	cmp	r0, #0
 80051d6:	d09f      	beq.n	8005118 <_dtoa_r+0x640>
 80051d8:	e7d1      	b.n	800517e <_dtoa_r+0x6a6>
 80051da:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80051dc:	2a00      	cmp	r2, #0
 80051de:	f000 80ea 	beq.w	80053b6 <_dtoa_r+0x8de>
 80051e2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80051e4:	2a01      	cmp	r2, #1
 80051e6:	f300 80cd 	bgt.w	8005384 <_dtoa_r+0x8ac>
 80051ea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80051ec:	2a00      	cmp	r2, #0
 80051ee:	f000 80c1 	beq.w	8005374 <_dtoa_r+0x89c>
 80051f2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80051f6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80051f8:	9e04      	ldr	r6, [sp, #16]
 80051fa:	9a04      	ldr	r2, [sp, #16]
 80051fc:	2101      	movs	r1, #1
 80051fe:	441a      	add	r2, r3
 8005200:	9204      	str	r2, [sp, #16]
 8005202:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005204:	4648      	mov	r0, r9
 8005206:	441a      	add	r2, r3
 8005208:	9209      	str	r2, [sp, #36]	@ 0x24
 800520a:	f000 fc75 	bl	8005af8 <__i2b>
 800520e:	4605      	mov	r5, r0
 8005210:	b166      	cbz	r6, 800522c <_dtoa_r+0x754>
 8005212:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005214:	2b00      	cmp	r3, #0
 8005216:	dd09      	ble.n	800522c <_dtoa_r+0x754>
 8005218:	42b3      	cmp	r3, r6
 800521a:	bfa8      	it	ge
 800521c:	4633      	movge	r3, r6
 800521e:	9a04      	ldr	r2, [sp, #16]
 8005220:	1af6      	subs	r6, r6, r3
 8005222:	1ad2      	subs	r2, r2, r3
 8005224:	9204      	str	r2, [sp, #16]
 8005226:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	9309      	str	r3, [sp, #36]	@ 0x24
 800522c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800522e:	b30b      	cbz	r3, 8005274 <_dtoa_r+0x79c>
 8005230:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005232:	2b00      	cmp	r3, #0
 8005234:	f000 80c6 	beq.w	80053c4 <_dtoa_r+0x8ec>
 8005238:	2c00      	cmp	r4, #0
 800523a:	f000 80c0 	beq.w	80053be <_dtoa_r+0x8e6>
 800523e:	4629      	mov	r1, r5
 8005240:	4622      	mov	r2, r4
 8005242:	4648      	mov	r0, r9
 8005244:	f000 fd10 	bl	8005c68 <__pow5mult>
 8005248:	9a03      	ldr	r2, [sp, #12]
 800524a:	4601      	mov	r1, r0
 800524c:	4605      	mov	r5, r0
 800524e:	4648      	mov	r0, r9
 8005250:	f000 fc68 	bl	8005b24 <__multiply>
 8005254:	9903      	ldr	r1, [sp, #12]
 8005256:	4680      	mov	r8, r0
 8005258:	4648      	mov	r0, r9
 800525a:	f000 fb4f 	bl	80058fc <_Bfree>
 800525e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005260:	1b1b      	subs	r3, r3, r4
 8005262:	930a      	str	r3, [sp, #40]	@ 0x28
 8005264:	f000 80b1 	beq.w	80053ca <_dtoa_r+0x8f2>
 8005268:	4641      	mov	r1, r8
 800526a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800526c:	4648      	mov	r0, r9
 800526e:	f000 fcfb 	bl	8005c68 <__pow5mult>
 8005272:	9003      	str	r0, [sp, #12]
 8005274:	2101      	movs	r1, #1
 8005276:	4648      	mov	r0, r9
 8005278:	f000 fc3e 	bl	8005af8 <__i2b>
 800527c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800527e:	4604      	mov	r4, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 81d8 	beq.w	8005636 <_dtoa_r+0xb5e>
 8005286:	461a      	mov	r2, r3
 8005288:	4601      	mov	r1, r0
 800528a:	4648      	mov	r0, r9
 800528c:	f000 fcec 	bl	8005c68 <__pow5mult>
 8005290:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005292:	4604      	mov	r4, r0
 8005294:	2b01      	cmp	r3, #1
 8005296:	f300 809f 	bgt.w	80053d8 <_dtoa_r+0x900>
 800529a:	9b06      	ldr	r3, [sp, #24]
 800529c:	2b00      	cmp	r3, #0
 800529e:	f040 8097 	bne.w	80053d0 <_dtoa_r+0x8f8>
 80052a2:	9b07      	ldr	r3, [sp, #28]
 80052a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f040 8093 	bne.w	80053d4 <_dtoa_r+0x8fc>
 80052ae:	9b07      	ldr	r3, [sp, #28]
 80052b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80052b4:	0d1b      	lsrs	r3, r3, #20
 80052b6:	051b      	lsls	r3, r3, #20
 80052b8:	b133      	cbz	r3, 80052c8 <_dtoa_r+0x7f0>
 80052ba:	9b04      	ldr	r3, [sp, #16]
 80052bc:	3301      	adds	r3, #1
 80052be:	9304      	str	r3, [sp, #16]
 80052c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052c2:	3301      	adds	r3, #1
 80052c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80052c6:	2301      	movs	r3, #1
 80052c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80052ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 81b8 	beq.w	8005642 <_dtoa_r+0xb6a>
 80052d2:	6923      	ldr	r3, [r4, #16]
 80052d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80052d8:	6918      	ldr	r0, [r3, #16]
 80052da:	f000 fbc1 	bl	8005a60 <__hi0bits>
 80052de:	f1c0 0020 	rsb	r0, r0, #32
 80052e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052e4:	4418      	add	r0, r3
 80052e6:	f010 001f 	ands.w	r0, r0, #31
 80052ea:	f000 8082 	beq.w	80053f2 <_dtoa_r+0x91a>
 80052ee:	f1c0 0320 	rsb	r3, r0, #32
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	dd73      	ble.n	80053de <_dtoa_r+0x906>
 80052f6:	9b04      	ldr	r3, [sp, #16]
 80052f8:	f1c0 001c 	rsb	r0, r0, #28
 80052fc:	4403      	add	r3, r0
 80052fe:	9304      	str	r3, [sp, #16]
 8005300:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005302:	4406      	add	r6, r0
 8005304:	4403      	add	r3, r0
 8005306:	9309      	str	r3, [sp, #36]	@ 0x24
 8005308:	9b04      	ldr	r3, [sp, #16]
 800530a:	2b00      	cmp	r3, #0
 800530c:	dd05      	ble.n	800531a <_dtoa_r+0x842>
 800530e:	461a      	mov	r2, r3
 8005310:	4648      	mov	r0, r9
 8005312:	9903      	ldr	r1, [sp, #12]
 8005314:	f000 fd02 	bl	8005d1c <__lshift>
 8005318:	9003      	str	r0, [sp, #12]
 800531a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800531c:	2b00      	cmp	r3, #0
 800531e:	dd05      	ble.n	800532c <_dtoa_r+0x854>
 8005320:	4621      	mov	r1, r4
 8005322:	461a      	mov	r2, r3
 8005324:	4648      	mov	r0, r9
 8005326:	f000 fcf9 	bl	8005d1c <__lshift>
 800532a:	4604      	mov	r4, r0
 800532c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800532e:	2b00      	cmp	r3, #0
 8005330:	d061      	beq.n	80053f6 <_dtoa_r+0x91e>
 8005332:	4621      	mov	r1, r4
 8005334:	9803      	ldr	r0, [sp, #12]
 8005336:	f000 fd5d 	bl	8005df4 <__mcmp>
 800533a:	2800      	cmp	r0, #0
 800533c:	da5b      	bge.n	80053f6 <_dtoa_r+0x91e>
 800533e:	2300      	movs	r3, #0
 8005340:	220a      	movs	r2, #10
 8005342:	4648      	mov	r0, r9
 8005344:	9903      	ldr	r1, [sp, #12]
 8005346:	f000 fafb 	bl	8005940 <__multadd>
 800534a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800534c:	f107 38ff 	add.w	r8, r7, #4294967295
 8005350:	9003      	str	r0, [sp, #12]
 8005352:	2b00      	cmp	r3, #0
 8005354:	f000 8177 	beq.w	8005646 <_dtoa_r+0xb6e>
 8005358:	4629      	mov	r1, r5
 800535a:	2300      	movs	r3, #0
 800535c:	220a      	movs	r2, #10
 800535e:	4648      	mov	r0, r9
 8005360:	f000 faee 	bl	8005940 <__multadd>
 8005364:	f1bb 0f00 	cmp.w	fp, #0
 8005368:	4605      	mov	r5, r0
 800536a:	dc6f      	bgt.n	800544c <_dtoa_r+0x974>
 800536c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800536e:	2b02      	cmp	r3, #2
 8005370:	dc49      	bgt.n	8005406 <_dtoa_r+0x92e>
 8005372:	e06b      	b.n	800544c <_dtoa_r+0x974>
 8005374:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005376:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800537a:	e73c      	b.n	80051f6 <_dtoa_r+0x71e>
 800537c:	3fe00000 	.word	0x3fe00000
 8005380:	40240000 	.word	0x40240000
 8005384:	9b08      	ldr	r3, [sp, #32]
 8005386:	1e5c      	subs	r4, r3, #1
 8005388:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800538a:	42a3      	cmp	r3, r4
 800538c:	db09      	blt.n	80053a2 <_dtoa_r+0x8ca>
 800538e:	1b1c      	subs	r4, r3, r4
 8005390:	9b08      	ldr	r3, [sp, #32]
 8005392:	2b00      	cmp	r3, #0
 8005394:	f6bf af30 	bge.w	80051f8 <_dtoa_r+0x720>
 8005398:	9b04      	ldr	r3, [sp, #16]
 800539a:	9a08      	ldr	r2, [sp, #32]
 800539c:	1a9e      	subs	r6, r3, r2
 800539e:	2300      	movs	r3, #0
 80053a0:	e72b      	b.n	80051fa <_dtoa_r+0x722>
 80053a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80053a6:	1ae3      	subs	r3, r4, r3
 80053a8:	441a      	add	r2, r3
 80053aa:	940a      	str	r4, [sp, #40]	@ 0x28
 80053ac:	9e04      	ldr	r6, [sp, #16]
 80053ae:	2400      	movs	r4, #0
 80053b0:	9b08      	ldr	r3, [sp, #32]
 80053b2:	920e      	str	r2, [sp, #56]	@ 0x38
 80053b4:	e721      	b.n	80051fa <_dtoa_r+0x722>
 80053b6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80053b8:	9e04      	ldr	r6, [sp, #16]
 80053ba:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80053bc:	e728      	b.n	8005210 <_dtoa_r+0x738>
 80053be:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80053c2:	e751      	b.n	8005268 <_dtoa_r+0x790>
 80053c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80053c6:	9903      	ldr	r1, [sp, #12]
 80053c8:	e750      	b.n	800526c <_dtoa_r+0x794>
 80053ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80053ce:	e751      	b.n	8005274 <_dtoa_r+0x79c>
 80053d0:	2300      	movs	r3, #0
 80053d2:	e779      	b.n	80052c8 <_dtoa_r+0x7f0>
 80053d4:	9b06      	ldr	r3, [sp, #24]
 80053d6:	e777      	b.n	80052c8 <_dtoa_r+0x7f0>
 80053d8:	2300      	movs	r3, #0
 80053da:	930a      	str	r3, [sp, #40]	@ 0x28
 80053dc:	e779      	b.n	80052d2 <_dtoa_r+0x7fa>
 80053de:	d093      	beq.n	8005308 <_dtoa_r+0x830>
 80053e0:	9a04      	ldr	r2, [sp, #16]
 80053e2:	331c      	adds	r3, #28
 80053e4:	441a      	add	r2, r3
 80053e6:	9204      	str	r2, [sp, #16]
 80053e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053ea:	441e      	add	r6, r3
 80053ec:	441a      	add	r2, r3
 80053ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80053f0:	e78a      	b.n	8005308 <_dtoa_r+0x830>
 80053f2:	4603      	mov	r3, r0
 80053f4:	e7f4      	b.n	80053e0 <_dtoa_r+0x908>
 80053f6:	9b08      	ldr	r3, [sp, #32]
 80053f8:	46b8      	mov	r8, r7
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	dc20      	bgt.n	8005440 <_dtoa_r+0x968>
 80053fe:	469b      	mov	fp, r3
 8005400:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005402:	2b02      	cmp	r3, #2
 8005404:	dd1e      	ble.n	8005444 <_dtoa_r+0x96c>
 8005406:	f1bb 0f00 	cmp.w	fp, #0
 800540a:	f47f adb1 	bne.w	8004f70 <_dtoa_r+0x498>
 800540e:	4621      	mov	r1, r4
 8005410:	465b      	mov	r3, fp
 8005412:	2205      	movs	r2, #5
 8005414:	4648      	mov	r0, r9
 8005416:	f000 fa93 	bl	8005940 <__multadd>
 800541a:	4601      	mov	r1, r0
 800541c:	4604      	mov	r4, r0
 800541e:	9803      	ldr	r0, [sp, #12]
 8005420:	f000 fce8 	bl	8005df4 <__mcmp>
 8005424:	2800      	cmp	r0, #0
 8005426:	f77f ada3 	ble.w	8004f70 <_dtoa_r+0x498>
 800542a:	4656      	mov	r6, sl
 800542c:	2331      	movs	r3, #49	@ 0x31
 800542e:	f108 0801 	add.w	r8, r8, #1
 8005432:	f806 3b01 	strb.w	r3, [r6], #1
 8005436:	e59f      	b.n	8004f78 <_dtoa_r+0x4a0>
 8005438:	46b8      	mov	r8, r7
 800543a:	9c08      	ldr	r4, [sp, #32]
 800543c:	4625      	mov	r5, r4
 800543e:	e7f4      	b.n	800542a <_dtoa_r+0x952>
 8005440:	f8dd b020 	ldr.w	fp, [sp, #32]
 8005444:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005446:	2b00      	cmp	r3, #0
 8005448:	f000 8101 	beq.w	800564e <_dtoa_r+0xb76>
 800544c:	2e00      	cmp	r6, #0
 800544e:	dd05      	ble.n	800545c <_dtoa_r+0x984>
 8005450:	4629      	mov	r1, r5
 8005452:	4632      	mov	r2, r6
 8005454:	4648      	mov	r0, r9
 8005456:	f000 fc61 	bl	8005d1c <__lshift>
 800545a:	4605      	mov	r5, r0
 800545c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800545e:	2b00      	cmp	r3, #0
 8005460:	d05c      	beq.n	800551c <_dtoa_r+0xa44>
 8005462:	4648      	mov	r0, r9
 8005464:	6869      	ldr	r1, [r5, #4]
 8005466:	f000 fa09 	bl	800587c <_Balloc>
 800546a:	4606      	mov	r6, r0
 800546c:	b928      	cbnz	r0, 800547a <_dtoa_r+0x9a2>
 800546e:	4602      	mov	r2, r0
 8005470:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005474:	4b80      	ldr	r3, [pc, #512]	@ (8005678 <_dtoa_r+0xba0>)
 8005476:	f7ff bb43 	b.w	8004b00 <_dtoa_r+0x28>
 800547a:	692a      	ldr	r2, [r5, #16]
 800547c:	f105 010c 	add.w	r1, r5, #12
 8005480:	3202      	adds	r2, #2
 8005482:	0092      	lsls	r2, r2, #2
 8005484:	300c      	adds	r0, #12
 8005486:	f7ff fa8a 	bl	800499e <memcpy>
 800548a:	2201      	movs	r2, #1
 800548c:	4631      	mov	r1, r6
 800548e:	4648      	mov	r0, r9
 8005490:	f000 fc44 	bl	8005d1c <__lshift>
 8005494:	462f      	mov	r7, r5
 8005496:	4605      	mov	r5, r0
 8005498:	f10a 0301 	add.w	r3, sl, #1
 800549c:	9304      	str	r3, [sp, #16]
 800549e:	eb0a 030b 	add.w	r3, sl, fp
 80054a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80054a4:	9b06      	ldr	r3, [sp, #24]
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80054ac:	9b04      	ldr	r3, [sp, #16]
 80054ae:	4621      	mov	r1, r4
 80054b0:	9803      	ldr	r0, [sp, #12]
 80054b2:	f103 3bff 	add.w	fp, r3, #4294967295
 80054b6:	f7ff fa85 	bl	80049c4 <quorem>
 80054ba:	4603      	mov	r3, r0
 80054bc:	4639      	mov	r1, r7
 80054be:	3330      	adds	r3, #48	@ 0x30
 80054c0:	9006      	str	r0, [sp, #24]
 80054c2:	9803      	ldr	r0, [sp, #12]
 80054c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80054c6:	f000 fc95 	bl	8005df4 <__mcmp>
 80054ca:	462a      	mov	r2, r5
 80054cc:	9008      	str	r0, [sp, #32]
 80054ce:	4621      	mov	r1, r4
 80054d0:	4648      	mov	r0, r9
 80054d2:	f000 fcab 	bl	8005e2c <__mdiff>
 80054d6:	68c2      	ldr	r2, [r0, #12]
 80054d8:	4606      	mov	r6, r0
 80054da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80054dc:	bb02      	cbnz	r2, 8005520 <_dtoa_r+0xa48>
 80054de:	4601      	mov	r1, r0
 80054e0:	9803      	ldr	r0, [sp, #12]
 80054e2:	f000 fc87 	bl	8005df4 <__mcmp>
 80054e6:	4602      	mov	r2, r0
 80054e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80054ea:	4631      	mov	r1, r6
 80054ec:	4648      	mov	r0, r9
 80054ee:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80054f2:	f000 fa03 	bl	80058fc <_Bfree>
 80054f6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80054f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80054fa:	9e04      	ldr	r6, [sp, #16]
 80054fc:	ea42 0103 	orr.w	r1, r2, r3
 8005500:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005502:	4319      	orrs	r1, r3
 8005504:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005506:	d10d      	bne.n	8005524 <_dtoa_r+0xa4c>
 8005508:	2b39      	cmp	r3, #57	@ 0x39
 800550a:	d027      	beq.n	800555c <_dtoa_r+0xa84>
 800550c:	9a08      	ldr	r2, [sp, #32]
 800550e:	2a00      	cmp	r2, #0
 8005510:	dd01      	ble.n	8005516 <_dtoa_r+0xa3e>
 8005512:	9b06      	ldr	r3, [sp, #24]
 8005514:	3331      	adds	r3, #49	@ 0x31
 8005516:	f88b 3000 	strb.w	r3, [fp]
 800551a:	e52e      	b.n	8004f7a <_dtoa_r+0x4a2>
 800551c:	4628      	mov	r0, r5
 800551e:	e7b9      	b.n	8005494 <_dtoa_r+0x9bc>
 8005520:	2201      	movs	r2, #1
 8005522:	e7e2      	b.n	80054ea <_dtoa_r+0xa12>
 8005524:	9908      	ldr	r1, [sp, #32]
 8005526:	2900      	cmp	r1, #0
 8005528:	db04      	blt.n	8005534 <_dtoa_r+0xa5c>
 800552a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800552c:	4301      	orrs	r1, r0
 800552e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005530:	4301      	orrs	r1, r0
 8005532:	d120      	bne.n	8005576 <_dtoa_r+0xa9e>
 8005534:	2a00      	cmp	r2, #0
 8005536:	ddee      	ble.n	8005516 <_dtoa_r+0xa3e>
 8005538:	2201      	movs	r2, #1
 800553a:	9903      	ldr	r1, [sp, #12]
 800553c:	4648      	mov	r0, r9
 800553e:	9304      	str	r3, [sp, #16]
 8005540:	f000 fbec 	bl	8005d1c <__lshift>
 8005544:	4621      	mov	r1, r4
 8005546:	9003      	str	r0, [sp, #12]
 8005548:	f000 fc54 	bl	8005df4 <__mcmp>
 800554c:	2800      	cmp	r0, #0
 800554e:	9b04      	ldr	r3, [sp, #16]
 8005550:	dc02      	bgt.n	8005558 <_dtoa_r+0xa80>
 8005552:	d1e0      	bne.n	8005516 <_dtoa_r+0xa3e>
 8005554:	07da      	lsls	r2, r3, #31
 8005556:	d5de      	bpl.n	8005516 <_dtoa_r+0xa3e>
 8005558:	2b39      	cmp	r3, #57	@ 0x39
 800555a:	d1da      	bne.n	8005512 <_dtoa_r+0xa3a>
 800555c:	2339      	movs	r3, #57	@ 0x39
 800555e:	f88b 3000 	strb.w	r3, [fp]
 8005562:	4633      	mov	r3, r6
 8005564:	461e      	mov	r6, r3
 8005566:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800556a:	3b01      	subs	r3, #1
 800556c:	2a39      	cmp	r2, #57	@ 0x39
 800556e:	d04e      	beq.n	800560e <_dtoa_r+0xb36>
 8005570:	3201      	adds	r2, #1
 8005572:	701a      	strb	r2, [r3, #0]
 8005574:	e501      	b.n	8004f7a <_dtoa_r+0x4a2>
 8005576:	2a00      	cmp	r2, #0
 8005578:	dd03      	ble.n	8005582 <_dtoa_r+0xaaa>
 800557a:	2b39      	cmp	r3, #57	@ 0x39
 800557c:	d0ee      	beq.n	800555c <_dtoa_r+0xa84>
 800557e:	3301      	adds	r3, #1
 8005580:	e7c9      	b.n	8005516 <_dtoa_r+0xa3e>
 8005582:	9a04      	ldr	r2, [sp, #16]
 8005584:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005586:	f802 3c01 	strb.w	r3, [r2, #-1]
 800558a:	428a      	cmp	r2, r1
 800558c:	d028      	beq.n	80055e0 <_dtoa_r+0xb08>
 800558e:	2300      	movs	r3, #0
 8005590:	220a      	movs	r2, #10
 8005592:	9903      	ldr	r1, [sp, #12]
 8005594:	4648      	mov	r0, r9
 8005596:	f000 f9d3 	bl	8005940 <__multadd>
 800559a:	42af      	cmp	r7, r5
 800559c:	9003      	str	r0, [sp, #12]
 800559e:	f04f 0300 	mov.w	r3, #0
 80055a2:	f04f 020a 	mov.w	r2, #10
 80055a6:	4639      	mov	r1, r7
 80055a8:	4648      	mov	r0, r9
 80055aa:	d107      	bne.n	80055bc <_dtoa_r+0xae4>
 80055ac:	f000 f9c8 	bl	8005940 <__multadd>
 80055b0:	4607      	mov	r7, r0
 80055b2:	4605      	mov	r5, r0
 80055b4:	9b04      	ldr	r3, [sp, #16]
 80055b6:	3301      	adds	r3, #1
 80055b8:	9304      	str	r3, [sp, #16]
 80055ba:	e777      	b.n	80054ac <_dtoa_r+0x9d4>
 80055bc:	f000 f9c0 	bl	8005940 <__multadd>
 80055c0:	4629      	mov	r1, r5
 80055c2:	4607      	mov	r7, r0
 80055c4:	2300      	movs	r3, #0
 80055c6:	220a      	movs	r2, #10
 80055c8:	4648      	mov	r0, r9
 80055ca:	f000 f9b9 	bl	8005940 <__multadd>
 80055ce:	4605      	mov	r5, r0
 80055d0:	e7f0      	b.n	80055b4 <_dtoa_r+0xadc>
 80055d2:	f1bb 0f00 	cmp.w	fp, #0
 80055d6:	bfcc      	ite	gt
 80055d8:	465e      	movgt	r6, fp
 80055da:	2601      	movle	r6, #1
 80055dc:	2700      	movs	r7, #0
 80055de:	4456      	add	r6, sl
 80055e0:	2201      	movs	r2, #1
 80055e2:	9903      	ldr	r1, [sp, #12]
 80055e4:	4648      	mov	r0, r9
 80055e6:	9304      	str	r3, [sp, #16]
 80055e8:	f000 fb98 	bl	8005d1c <__lshift>
 80055ec:	4621      	mov	r1, r4
 80055ee:	9003      	str	r0, [sp, #12]
 80055f0:	f000 fc00 	bl	8005df4 <__mcmp>
 80055f4:	2800      	cmp	r0, #0
 80055f6:	dcb4      	bgt.n	8005562 <_dtoa_r+0xa8a>
 80055f8:	d102      	bne.n	8005600 <_dtoa_r+0xb28>
 80055fa:	9b04      	ldr	r3, [sp, #16]
 80055fc:	07db      	lsls	r3, r3, #31
 80055fe:	d4b0      	bmi.n	8005562 <_dtoa_r+0xa8a>
 8005600:	4633      	mov	r3, r6
 8005602:	461e      	mov	r6, r3
 8005604:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005608:	2a30      	cmp	r2, #48	@ 0x30
 800560a:	d0fa      	beq.n	8005602 <_dtoa_r+0xb2a>
 800560c:	e4b5      	b.n	8004f7a <_dtoa_r+0x4a2>
 800560e:	459a      	cmp	sl, r3
 8005610:	d1a8      	bne.n	8005564 <_dtoa_r+0xa8c>
 8005612:	2331      	movs	r3, #49	@ 0x31
 8005614:	f108 0801 	add.w	r8, r8, #1
 8005618:	f88a 3000 	strb.w	r3, [sl]
 800561c:	e4ad      	b.n	8004f7a <_dtoa_r+0x4a2>
 800561e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005620:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800567c <_dtoa_r+0xba4>
 8005624:	b11b      	cbz	r3, 800562e <_dtoa_r+0xb56>
 8005626:	f10a 0308 	add.w	r3, sl, #8
 800562a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800562c:	6013      	str	r3, [r2, #0]
 800562e:	4650      	mov	r0, sl
 8005630:	b017      	add	sp, #92	@ 0x5c
 8005632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005636:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005638:	2b01      	cmp	r3, #1
 800563a:	f77f ae2e 	ble.w	800529a <_dtoa_r+0x7c2>
 800563e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005640:	930a      	str	r3, [sp, #40]	@ 0x28
 8005642:	2001      	movs	r0, #1
 8005644:	e64d      	b.n	80052e2 <_dtoa_r+0x80a>
 8005646:	f1bb 0f00 	cmp.w	fp, #0
 800564a:	f77f aed9 	ble.w	8005400 <_dtoa_r+0x928>
 800564e:	4656      	mov	r6, sl
 8005650:	4621      	mov	r1, r4
 8005652:	9803      	ldr	r0, [sp, #12]
 8005654:	f7ff f9b6 	bl	80049c4 <quorem>
 8005658:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800565c:	f806 3b01 	strb.w	r3, [r6], #1
 8005660:	eba6 020a 	sub.w	r2, r6, sl
 8005664:	4593      	cmp	fp, r2
 8005666:	ddb4      	ble.n	80055d2 <_dtoa_r+0xafa>
 8005668:	2300      	movs	r3, #0
 800566a:	220a      	movs	r2, #10
 800566c:	4648      	mov	r0, r9
 800566e:	9903      	ldr	r1, [sp, #12]
 8005670:	f000 f966 	bl	8005940 <__multadd>
 8005674:	9003      	str	r0, [sp, #12]
 8005676:	e7eb      	b.n	8005650 <_dtoa_r+0xb78>
 8005678:	0800816f 	.word	0x0800816f
 800567c:	080080f3 	.word	0x080080f3

08005680 <_free_r>:
 8005680:	b538      	push	{r3, r4, r5, lr}
 8005682:	4605      	mov	r5, r0
 8005684:	2900      	cmp	r1, #0
 8005686:	d040      	beq.n	800570a <_free_r+0x8a>
 8005688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800568c:	1f0c      	subs	r4, r1, #4
 800568e:	2b00      	cmp	r3, #0
 8005690:	bfb8      	it	lt
 8005692:	18e4      	addlt	r4, r4, r3
 8005694:	f000 f8e6 	bl	8005864 <__malloc_lock>
 8005698:	4a1c      	ldr	r2, [pc, #112]	@ (800570c <_free_r+0x8c>)
 800569a:	6813      	ldr	r3, [r2, #0]
 800569c:	b933      	cbnz	r3, 80056ac <_free_r+0x2c>
 800569e:	6063      	str	r3, [r4, #4]
 80056a0:	6014      	str	r4, [r2, #0]
 80056a2:	4628      	mov	r0, r5
 80056a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056a8:	f000 b8e2 	b.w	8005870 <__malloc_unlock>
 80056ac:	42a3      	cmp	r3, r4
 80056ae:	d908      	bls.n	80056c2 <_free_r+0x42>
 80056b0:	6820      	ldr	r0, [r4, #0]
 80056b2:	1821      	adds	r1, r4, r0
 80056b4:	428b      	cmp	r3, r1
 80056b6:	bf01      	itttt	eq
 80056b8:	6819      	ldreq	r1, [r3, #0]
 80056ba:	685b      	ldreq	r3, [r3, #4]
 80056bc:	1809      	addeq	r1, r1, r0
 80056be:	6021      	streq	r1, [r4, #0]
 80056c0:	e7ed      	b.n	800569e <_free_r+0x1e>
 80056c2:	461a      	mov	r2, r3
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	b10b      	cbz	r3, 80056cc <_free_r+0x4c>
 80056c8:	42a3      	cmp	r3, r4
 80056ca:	d9fa      	bls.n	80056c2 <_free_r+0x42>
 80056cc:	6811      	ldr	r1, [r2, #0]
 80056ce:	1850      	adds	r0, r2, r1
 80056d0:	42a0      	cmp	r0, r4
 80056d2:	d10b      	bne.n	80056ec <_free_r+0x6c>
 80056d4:	6820      	ldr	r0, [r4, #0]
 80056d6:	4401      	add	r1, r0
 80056d8:	1850      	adds	r0, r2, r1
 80056da:	4283      	cmp	r3, r0
 80056dc:	6011      	str	r1, [r2, #0]
 80056de:	d1e0      	bne.n	80056a2 <_free_r+0x22>
 80056e0:	6818      	ldr	r0, [r3, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	4408      	add	r0, r1
 80056e6:	6010      	str	r0, [r2, #0]
 80056e8:	6053      	str	r3, [r2, #4]
 80056ea:	e7da      	b.n	80056a2 <_free_r+0x22>
 80056ec:	d902      	bls.n	80056f4 <_free_r+0x74>
 80056ee:	230c      	movs	r3, #12
 80056f0:	602b      	str	r3, [r5, #0]
 80056f2:	e7d6      	b.n	80056a2 <_free_r+0x22>
 80056f4:	6820      	ldr	r0, [r4, #0]
 80056f6:	1821      	adds	r1, r4, r0
 80056f8:	428b      	cmp	r3, r1
 80056fa:	bf01      	itttt	eq
 80056fc:	6819      	ldreq	r1, [r3, #0]
 80056fe:	685b      	ldreq	r3, [r3, #4]
 8005700:	1809      	addeq	r1, r1, r0
 8005702:	6021      	streq	r1, [r4, #0]
 8005704:	6063      	str	r3, [r4, #4]
 8005706:	6054      	str	r4, [r2, #4]
 8005708:	e7cb      	b.n	80056a2 <_free_r+0x22>
 800570a:	bd38      	pop	{r3, r4, r5, pc}
 800570c:	200003f4 	.word	0x200003f4

08005710 <malloc>:
 8005710:	4b02      	ldr	r3, [pc, #8]	@ (800571c <malloc+0xc>)
 8005712:	4601      	mov	r1, r0
 8005714:	6818      	ldr	r0, [r3, #0]
 8005716:	f000 b825 	b.w	8005764 <_malloc_r>
 800571a:	bf00      	nop
 800571c:	20000018 	.word	0x20000018

08005720 <sbrk_aligned>:
 8005720:	b570      	push	{r4, r5, r6, lr}
 8005722:	4e0f      	ldr	r6, [pc, #60]	@ (8005760 <sbrk_aligned+0x40>)
 8005724:	460c      	mov	r4, r1
 8005726:	6831      	ldr	r1, [r6, #0]
 8005728:	4605      	mov	r5, r0
 800572a:	b911      	cbnz	r1, 8005732 <sbrk_aligned+0x12>
 800572c:	f001 fdee 	bl	800730c <_sbrk_r>
 8005730:	6030      	str	r0, [r6, #0]
 8005732:	4621      	mov	r1, r4
 8005734:	4628      	mov	r0, r5
 8005736:	f001 fde9 	bl	800730c <_sbrk_r>
 800573a:	1c43      	adds	r3, r0, #1
 800573c:	d103      	bne.n	8005746 <sbrk_aligned+0x26>
 800573e:	f04f 34ff 	mov.w	r4, #4294967295
 8005742:	4620      	mov	r0, r4
 8005744:	bd70      	pop	{r4, r5, r6, pc}
 8005746:	1cc4      	adds	r4, r0, #3
 8005748:	f024 0403 	bic.w	r4, r4, #3
 800574c:	42a0      	cmp	r0, r4
 800574e:	d0f8      	beq.n	8005742 <sbrk_aligned+0x22>
 8005750:	1a21      	subs	r1, r4, r0
 8005752:	4628      	mov	r0, r5
 8005754:	f001 fdda 	bl	800730c <_sbrk_r>
 8005758:	3001      	adds	r0, #1
 800575a:	d1f2      	bne.n	8005742 <sbrk_aligned+0x22>
 800575c:	e7ef      	b.n	800573e <sbrk_aligned+0x1e>
 800575e:	bf00      	nop
 8005760:	200003f0 	.word	0x200003f0

08005764 <_malloc_r>:
 8005764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005768:	1ccd      	adds	r5, r1, #3
 800576a:	f025 0503 	bic.w	r5, r5, #3
 800576e:	3508      	adds	r5, #8
 8005770:	2d0c      	cmp	r5, #12
 8005772:	bf38      	it	cc
 8005774:	250c      	movcc	r5, #12
 8005776:	2d00      	cmp	r5, #0
 8005778:	4606      	mov	r6, r0
 800577a:	db01      	blt.n	8005780 <_malloc_r+0x1c>
 800577c:	42a9      	cmp	r1, r5
 800577e:	d904      	bls.n	800578a <_malloc_r+0x26>
 8005780:	230c      	movs	r3, #12
 8005782:	6033      	str	r3, [r6, #0]
 8005784:	2000      	movs	r0, #0
 8005786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800578a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005860 <_malloc_r+0xfc>
 800578e:	f000 f869 	bl	8005864 <__malloc_lock>
 8005792:	f8d8 3000 	ldr.w	r3, [r8]
 8005796:	461c      	mov	r4, r3
 8005798:	bb44      	cbnz	r4, 80057ec <_malloc_r+0x88>
 800579a:	4629      	mov	r1, r5
 800579c:	4630      	mov	r0, r6
 800579e:	f7ff ffbf 	bl	8005720 <sbrk_aligned>
 80057a2:	1c43      	adds	r3, r0, #1
 80057a4:	4604      	mov	r4, r0
 80057a6:	d158      	bne.n	800585a <_malloc_r+0xf6>
 80057a8:	f8d8 4000 	ldr.w	r4, [r8]
 80057ac:	4627      	mov	r7, r4
 80057ae:	2f00      	cmp	r7, #0
 80057b0:	d143      	bne.n	800583a <_malloc_r+0xd6>
 80057b2:	2c00      	cmp	r4, #0
 80057b4:	d04b      	beq.n	800584e <_malloc_r+0xea>
 80057b6:	6823      	ldr	r3, [r4, #0]
 80057b8:	4639      	mov	r1, r7
 80057ba:	4630      	mov	r0, r6
 80057bc:	eb04 0903 	add.w	r9, r4, r3
 80057c0:	f001 fda4 	bl	800730c <_sbrk_r>
 80057c4:	4581      	cmp	r9, r0
 80057c6:	d142      	bne.n	800584e <_malloc_r+0xea>
 80057c8:	6821      	ldr	r1, [r4, #0]
 80057ca:	4630      	mov	r0, r6
 80057cc:	1a6d      	subs	r5, r5, r1
 80057ce:	4629      	mov	r1, r5
 80057d0:	f7ff ffa6 	bl	8005720 <sbrk_aligned>
 80057d4:	3001      	adds	r0, #1
 80057d6:	d03a      	beq.n	800584e <_malloc_r+0xea>
 80057d8:	6823      	ldr	r3, [r4, #0]
 80057da:	442b      	add	r3, r5
 80057dc:	6023      	str	r3, [r4, #0]
 80057de:	f8d8 3000 	ldr.w	r3, [r8]
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	bb62      	cbnz	r2, 8005840 <_malloc_r+0xdc>
 80057e6:	f8c8 7000 	str.w	r7, [r8]
 80057ea:	e00f      	b.n	800580c <_malloc_r+0xa8>
 80057ec:	6822      	ldr	r2, [r4, #0]
 80057ee:	1b52      	subs	r2, r2, r5
 80057f0:	d420      	bmi.n	8005834 <_malloc_r+0xd0>
 80057f2:	2a0b      	cmp	r2, #11
 80057f4:	d917      	bls.n	8005826 <_malloc_r+0xc2>
 80057f6:	1961      	adds	r1, r4, r5
 80057f8:	42a3      	cmp	r3, r4
 80057fa:	6025      	str	r5, [r4, #0]
 80057fc:	bf18      	it	ne
 80057fe:	6059      	strne	r1, [r3, #4]
 8005800:	6863      	ldr	r3, [r4, #4]
 8005802:	bf08      	it	eq
 8005804:	f8c8 1000 	streq.w	r1, [r8]
 8005808:	5162      	str	r2, [r4, r5]
 800580a:	604b      	str	r3, [r1, #4]
 800580c:	4630      	mov	r0, r6
 800580e:	f000 f82f 	bl	8005870 <__malloc_unlock>
 8005812:	f104 000b 	add.w	r0, r4, #11
 8005816:	1d23      	adds	r3, r4, #4
 8005818:	f020 0007 	bic.w	r0, r0, #7
 800581c:	1ac2      	subs	r2, r0, r3
 800581e:	bf1c      	itt	ne
 8005820:	1a1b      	subne	r3, r3, r0
 8005822:	50a3      	strne	r3, [r4, r2]
 8005824:	e7af      	b.n	8005786 <_malloc_r+0x22>
 8005826:	6862      	ldr	r2, [r4, #4]
 8005828:	42a3      	cmp	r3, r4
 800582a:	bf0c      	ite	eq
 800582c:	f8c8 2000 	streq.w	r2, [r8]
 8005830:	605a      	strne	r2, [r3, #4]
 8005832:	e7eb      	b.n	800580c <_malloc_r+0xa8>
 8005834:	4623      	mov	r3, r4
 8005836:	6864      	ldr	r4, [r4, #4]
 8005838:	e7ae      	b.n	8005798 <_malloc_r+0x34>
 800583a:	463c      	mov	r4, r7
 800583c:	687f      	ldr	r7, [r7, #4]
 800583e:	e7b6      	b.n	80057ae <_malloc_r+0x4a>
 8005840:	461a      	mov	r2, r3
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	42a3      	cmp	r3, r4
 8005846:	d1fb      	bne.n	8005840 <_malloc_r+0xdc>
 8005848:	2300      	movs	r3, #0
 800584a:	6053      	str	r3, [r2, #4]
 800584c:	e7de      	b.n	800580c <_malloc_r+0xa8>
 800584e:	230c      	movs	r3, #12
 8005850:	4630      	mov	r0, r6
 8005852:	6033      	str	r3, [r6, #0]
 8005854:	f000 f80c 	bl	8005870 <__malloc_unlock>
 8005858:	e794      	b.n	8005784 <_malloc_r+0x20>
 800585a:	6005      	str	r5, [r0, #0]
 800585c:	e7d6      	b.n	800580c <_malloc_r+0xa8>
 800585e:	bf00      	nop
 8005860:	200003f4 	.word	0x200003f4

08005864 <__malloc_lock>:
 8005864:	4801      	ldr	r0, [pc, #4]	@ (800586c <__malloc_lock+0x8>)
 8005866:	f7ff b88a 	b.w	800497e <__retarget_lock_acquire_recursive>
 800586a:	bf00      	nop
 800586c:	200003ec 	.word	0x200003ec

08005870 <__malloc_unlock>:
 8005870:	4801      	ldr	r0, [pc, #4]	@ (8005878 <__malloc_unlock+0x8>)
 8005872:	f7ff b885 	b.w	8004980 <__retarget_lock_release_recursive>
 8005876:	bf00      	nop
 8005878:	200003ec 	.word	0x200003ec

0800587c <_Balloc>:
 800587c:	b570      	push	{r4, r5, r6, lr}
 800587e:	69c6      	ldr	r6, [r0, #28]
 8005880:	4604      	mov	r4, r0
 8005882:	460d      	mov	r5, r1
 8005884:	b976      	cbnz	r6, 80058a4 <_Balloc+0x28>
 8005886:	2010      	movs	r0, #16
 8005888:	f7ff ff42 	bl	8005710 <malloc>
 800588c:	4602      	mov	r2, r0
 800588e:	61e0      	str	r0, [r4, #28]
 8005890:	b920      	cbnz	r0, 800589c <_Balloc+0x20>
 8005892:	216b      	movs	r1, #107	@ 0x6b
 8005894:	4b17      	ldr	r3, [pc, #92]	@ (80058f4 <_Balloc+0x78>)
 8005896:	4818      	ldr	r0, [pc, #96]	@ (80058f8 <_Balloc+0x7c>)
 8005898:	f001 fd4e 	bl	8007338 <__assert_func>
 800589c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80058a0:	6006      	str	r6, [r0, #0]
 80058a2:	60c6      	str	r6, [r0, #12]
 80058a4:	69e6      	ldr	r6, [r4, #28]
 80058a6:	68f3      	ldr	r3, [r6, #12]
 80058a8:	b183      	cbz	r3, 80058cc <_Balloc+0x50>
 80058aa:	69e3      	ldr	r3, [r4, #28]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80058b2:	b9b8      	cbnz	r0, 80058e4 <_Balloc+0x68>
 80058b4:	2101      	movs	r1, #1
 80058b6:	fa01 f605 	lsl.w	r6, r1, r5
 80058ba:	1d72      	adds	r2, r6, #5
 80058bc:	4620      	mov	r0, r4
 80058be:	0092      	lsls	r2, r2, #2
 80058c0:	f001 fd58 	bl	8007374 <_calloc_r>
 80058c4:	b160      	cbz	r0, 80058e0 <_Balloc+0x64>
 80058c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80058ca:	e00e      	b.n	80058ea <_Balloc+0x6e>
 80058cc:	2221      	movs	r2, #33	@ 0x21
 80058ce:	2104      	movs	r1, #4
 80058d0:	4620      	mov	r0, r4
 80058d2:	f001 fd4f 	bl	8007374 <_calloc_r>
 80058d6:	69e3      	ldr	r3, [r4, #28]
 80058d8:	60f0      	str	r0, [r6, #12]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1e4      	bne.n	80058aa <_Balloc+0x2e>
 80058e0:	2000      	movs	r0, #0
 80058e2:	bd70      	pop	{r4, r5, r6, pc}
 80058e4:	6802      	ldr	r2, [r0, #0]
 80058e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80058ea:	2300      	movs	r3, #0
 80058ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80058f0:	e7f7      	b.n	80058e2 <_Balloc+0x66>
 80058f2:	bf00      	nop
 80058f4:	08008100 	.word	0x08008100
 80058f8:	08008180 	.word	0x08008180

080058fc <_Bfree>:
 80058fc:	b570      	push	{r4, r5, r6, lr}
 80058fe:	69c6      	ldr	r6, [r0, #28]
 8005900:	4605      	mov	r5, r0
 8005902:	460c      	mov	r4, r1
 8005904:	b976      	cbnz	r6, 8005924 <_Bfree+0x28>
 8005906:	2010      	movs	r0, #16
 8005908:	f7ff ff02 	bl	8005710 <malloc>
 800590c:	4602      	mov	r2, r0
 800590e:	61e8      	str	r0, [r5, #28]
 8005910:	b920      	cbnz	r0, 800591c <_Bfree+0x20>
 8005912:	218f      	movs	r1, #143	@ 0x8f
 8005914:	4b08      	ldr	r3, [pc, #32]	@ (8005938 <_Bfree+0x3c>)
 8005916:	4809      	ldr	r0, [pc, #36]	@ (800593c <_Bfree+0x40>)
 8005918:	f001 fd0e 	bl	8007338 <__assert_func>
 800591c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005920:	6006      	str	r6, [r0, #0]
 8005922:	60c6      	str	r6, [r0, #12]
 8005924:	b13c      	cbz	r4, 8005936 <_Bfree+0x3a>
 8005926:	69eb      	ldr	r3, [r5, #28]
 8005928:	6862      	ldr	r2, [r4, #4]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005930:	6021      	str	r1, [r4, #0]
 8005932:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005936:	bd70      	pop	{r4, r5, r6, pc}
 8005938:	08008100 	.word	0x08008100
 800593c:	08008180 	.word	0x08008180

08005940 <__multadd>:
 8005940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005944:	4607      	mov	r7, r0
 8005946:	460c      	mov	r4, r1
 8005948:	461e      	mov	r6, r3
 800594a:	2000      	movs	r0, #0
 800594c:	690d      	ldr	r5, [r1, #16]
 800594e:	f101 0c14 	add.w	ip, r1, #20
 8005952:	f8dc 3000 	ldr.w	r3, [ip]
 8005956:	3001      	adds	r0, #1
 8005958:	b299      	uxth	r1, r3
 800595a:	fb02 6101 	mla	r1, r2, r1, r6
 800595e:	0c1e      	lsrs	r6, r3, #16
 8005960:	0c0b      	lsrs	r3, r1, #16
 8005962:	fb02 3306 	mla	r3, r2, r6, r3
 8005966:	b289      	uxth	r1, r1
 8005968:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800596c:	4285      	cmp	r5, r0
 800596e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005972:	f84c 1b04 	str.w	r1, [ip], #4
 8005976:	dcec      	bgt.n	8005952 <__multadd+0x12>
 8005978:	b30e      	cbz	r6, 80059be <__multadd+0x7e>
 800597a:	68a3      	ldr	r3, [r4, #8]
 800597c:	42ab      	cmp	r3, r5
 800597e:	dc19      	bgt.n	80059b4 <__multadd+0x74>
 8005980:	6861      	ldr	r1, [r4, #4]
 8005982:	4638      	mov	r0, r7
 8005984:	3101      	adds	r1, #1
 8005986:	f7ff ff79 	bl	800587c <_Balloc>
 800598a:	4680      	mov	r8, r0
 800598c:	b928      	cbnz	r0, 800599a <__multadd+0x5a>
 800598e:	4602      	mov	r2, r0
 8005990:	21ba      	movs	r1, #186	@ 0xba
 8005992:	4b0c      	ldr	r3, [pc, #48]	@ (80059c4 <__multadd+0x84>)
 8005994:	480c      	ldr	r0, [pc, #48]	@ (80059c8 <__multadd+0x88>)
 8005996:	f001 fccf 	bl	8007338 <__assert_func>
 800599a:	6922      	ldr	r2, [r4, #16]
 800599c:	f104 010c 	add.w	r1, r4, #12
 80059a0:	3202      	adds	r2, #2
 80059a2:	0092      	lsls	r2, r2, #2
 80059a4:	300c      	adds	r0, #12
 80059a6:	f7fe fffa 	bl	800499e <memcpy>
 80059aa:	4621      	mov	r1, r4
 80059ac:	4638      	mov	r0, r7
 80059ae:	f7ff ffa5 	bl	80058fc <_Bfree>
 80059b2:	4644      	mov	r4, r8
 80059b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80059b8:	3501      	adds	r5, #1
 80059ba:	615e      	str	r6, [r3, #20]
 80059bc:	6125      	str	r5, [r4, #16]
 80059be:	4620      	mov	r0, r4
 80059c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059c4:	0800816f 	.word	0x0800816f
 80059c8:	08008180 	.word	0x08008180

080059cc <__s2b>:
 80059cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059d0:	4615      	mov	r5, r2
 80059d2:	2209      	movs	r2, #9
 80059d4:	461f      	mov	r7, r3
 80059d6:	3308      	adds	r3, #8
 80059d8:	460c      	mov	r4, r1
 80059da:	fb93 f3f2 	sdiv	r3, r3, r2
 80059de:	4606      	mov	r6, r0
 80059e0:	2201      	movs	r2, #1
 80059e2:	2100      	movs	r1, #0
 80059e4:	429a      	cmp	r2, r3
 80059e6:	db09      	blt.n	80059fc <__s2b+0x30>
 80059e8:	4630      	mov	r0, r6
 80059ea:	f7ff ff47 	bl	800587c <_Balloc>
 80059ee:	b940      	cbnz	r0, 8005a02 <__s2b+0x36>
 80059f0:	4602      	mov	r2, r0
 80059f2:	21d3      	movs	r1, #211	@ 0xd3
 80059f4:	4b18      	ldr	r3, [pc, #96]	@ (8005a58 <__s2b+0x8c>)
 80059f6:	4819      	ldr	r0, [pc, #100]	@ (8005a5c <__s2b+0x90>)
 80059f8:	f001 fc9e 	bl	8007338 <__assert_func>
 80059fc:	0052      	lsls	r2, r2, #1
 80059fe:	3101      	adds	r1, #1
 8005a00:	e7f0      	b.n	80059e4 <__s2b+0x18>
 8005a02:	9b08      	ldr	r3, [sp, #32]
 8005a04:	2d09      	cmp	r5, #9
 8005a06:	6143      	str	r3, [r0, #20]
 8005a08:	f04f 0301 	mov.w	r3, #1
 8005a0c:	6103      	str	r3, [r0, #16]
 8005a0e:	dd16      	ble.n	8005a3e <__s2b+0x72>
 8005a10:	f104 0909 	add.w	r9, r4, #9
 8005a14:	46c8      	mov	r8, r9
 8005a16:	442c      	add	r4, r5
 8005a18:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005a1c:	4601      	mov	r1, r0
 8005a1e:	220a      	movs	r2, #10
 8005a20:	4630      	mov	r0, r6
 8005a22:	3b30      	subs	r3, #48	@ 0x30
 8005a24:	f7ff ff8c 	bl	8005940 <__multadd>
 8005a28:	45a0      	cmp	r8, r4
 8005a2a:	d1f5      	bne.n	8005a18 <__s2b+0x4c>
 8005a2c:	f1a5 0408 	sub.w	r4, r5, #8
 8005a30:	444c      	add	r4, r9
 8005a32:	1b2d      	subs	r5, r5, r4
 8005a34:	1963      	adds	r3, r4, r5
 8005a36:	42bb      	cmp	r3, r7
 8005a38:	db04      	blt.n	8005a44 <__s2b+0x78>
 8005a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a3e:	2509      	movs	r5, #9
 8005a40:	340a      	adds	r4, #10
 8005a42:	e7f6      	b.n	8005a32 <__s2b+0x66>
 8005a44:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005a48:	4601      	mov	r1, r0
 8005a4a:	220a      	movs	r2, #10
 8005a4c:	4630      	mov	r0, r6
 8005a4e:	3b30      	subs	r3, #48	@ 0x30
 8005a50:	f7ff ff76 	bl	8005940 <__multadd>
 8005a54:	e7ee      	b.n	8005a34 <__s2b+0x68>
 8005a56:	bf00      	nop
 8005a58:	0800816f 	.word	0x0800816f
 8005a5c:	08008180 	.word	0x08008180

08005a60 <__hi0bits>:
 8005a60:	4603      	mov	r3, r0
 8005a62:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005a66:	bf3a      	itte	cc
 8005a68:	0403      	lslcc	r3, r0, #16
 8005a6a:	2010      	movcc	r0, #16
 8005a6c:	2000      	movcs	r0, #0
 8005a6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a72:	bf3c      	itt	cc
 8005a74:	021b      	lslcc	r3, r3, #8
 8005a76:	3008      	addcc	r0, #8
 8005a78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a7c:	bf3c      	itt	cc
 8005a7e:	011b      	lslcc	r3, r3, #4
 8005a80:	3004      	addcc	r0, #4
 8005a82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a86:	bf3c      	itt	cc
 8005a88:	009b      	lslcc	r3, r3, #2
 8005a8a:	3002      	addcc	r0, #2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	db05      	blt.n	8005a9c <__hi0bits+0x3c>
 8005a90:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005a94:	f100 0001 	add.w	r0, r0, #1
 8005a98:	bf08      	it	eq
 8005a9a:	2020      	moveq	r0, #32
 8005a9c:	4770      	bx	lr

08005a9e <__lo0bits>:
 8005a9e:	6803      	ldr	r3, [r0, #0]
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	f013 0007 	ands.w	r0, r3, #7
 8005aa6:	d00b      	beq.n	8005ac0 <__lo0bits+0x22>
 8005aa8:	07d9      	lsls	r1, r3, #31
 8005aaa:	d421      	bmi.n	8005af0 <__lo0bits+0x52>
 8005aac:	0798      	lsls	r0, r3, #30
 8005aae:	bf49      	itett	mi
 8005ab0:	085b      	lsrmi	r3, r3, #1
 8005ab2:	089b      	lsrpl	r3, r3, #2
 8005ab4:	2001      	movmi	r0, #1
 8005ab6:	6013      	strmi	r3, [r2, #0]
 8005ab8:	bf5c      	itt	pl
 8005aba:	2002      	movpl	r0, #2
 8005abc:	6013      	strpl	r3, [r2, #0]
 8005abe:	4770      	bx	lr
 8005ac0:	b299      	uxth	r1, r3
 8005ac2:	b909      	cbnz	r1, 8005ac8 <__lo0bits+0x2a>
 8005ac4:	2010      	movs	r0, #16
 8005ac6:	0c1b      	lsrs	r3, r3, #16
 8005ac8:	b2d9      	uxtb	r1, r3
 8005aca:	b909      	cbnz	r1, 8005ad0 <__lo0bits+0x32>
 8005acc:	3008      	adds	r0, #8
 8005ace:	0a1b      	lsrs	r3, r3, #8
 8005ad0:	0719      	lsls	r1, r3, #28
 8005ad2:	bf04      	itt	eq
 8005ad4:	091b      	lsreq	r3, r3, #4
 8005ad6:	3004      	addeq	r0, #4
 8005ad8:	0799      	lsls	r1, r3, #30
 8005ada:	bf04      	itt	eq
 8005adc:	089b      	lsreq	r3, r3, #2
 8005ade:	3002      	addeq	r0, #2
 8005ae0:	07d9      	lsls	r1, r3, #31
 8005ae2:	d403      	bmi.n	8005aec <__lo0bits+0x4e>
 8005ae4:	085b      	lsrs	r3, r3, #1
 8005ae6:	f100 0001 	add.w	r0, r0, #1
 8005aea:	d003      	beq.n	8005af4 <__lo0bits+0x56>
 8005aec:	6013      	str	r3, [r2, #0]
 8005aee:	4770      	bx	lr
 8005af0:	2000      	movs	r0, #0
 8005af2:	4770      	bx	lr
 8005af4:	2020      	movs	r0, #32
 8005af6:	4770      	bx	lr

08005af8 <__i2b>:
 8005af8:	b510      	push	{r4, lr}
 8005afa:	460c      	mov	r4, r1
 8005afc:	2101      	movs	r1, #1
 8005afe:	f7ff febd 	bl	800587c <_Balloc>
 8005b02:	4602      	mov	r2, r0
 8005b04:	b928      	cbnz	r0, 8005b12 <__i2b+0x1a>
 8005b06:	f240 1145 	movw	r1, #325	@ 0x145
 8005b0a:	4b04      	ldr	r3, [pc, #16]	@ (8005b1c <__i2b+0x24>)
 8005b0c:	4804      	ldr	r0, [pc, #16]	@ (8005b20 <__i2b+0x28>)
 8005b0e:	f001 fc13 	bl	8007338 <__assert_func>
 8005b12:	2301      	movs	r3, #1
 8005b14:	6144      	str	r4, [r0, #20]
 8005b16:	6103      	str	r3, [r0, #16]
 8005b18:	bd10      	pop	{r4, pc}
 8005b1a:	bf00      	nop
 8005b1c:	0800816f 	.word	0x0800816f
 8005b20:	08008180 	.word	0x08008180

08005b24 <__multiply>:
 8005b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b28:	4617      	mov	r7, r2
 8005b2a:	690a      	ldr	r2, [r1, #16]
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	4689      	mov	r9, r1
 8005b30:	429a      	cmp	r2, r3
 8005b32:	bfa2      	ittt	ge
 8005b34:	463b      	movge	r3, r7
 8005b36:	460f      	movge	r7, r1
 8005b38:	4699      	movge	r9, r3
 8005b3a:	693d      	ldr	r5, [r7, #16]
 8005b3c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	6879      	ldr	r1, [r7, #4]
 8005b44:	eb05 060a 	add.w	r6, r5, sl
 8005b48:	42b3      	cmp	r3, r6
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	bfb8      	it	lt
 8005b4e:	3101      	addlt	r1, #1
 8005b50:	f7ff fe94 	bl	800587c <_Balloc>
 8005b54:	b930      	cbnz	r0, 8005b64 <__multiply+0x40>
 8005b56:	4602      	mov	r2, r0
 8005b58:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005b5c:	4b40      	ldr	r3, [pc, #256]	@ (8005c60 <__multiply+0x13c>)
 8005b5e:	4841      	ldr	r0, [pc, #260]	@ (8005c64 <__multiply+0x140>)
 8005b60:	f001 fbea 	bl	8007338 <__assert_func>
 8005b64:	f100 0414 	add.w	r4, r0, #20
 8005b68:	4623      	mov	r3, r4
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005b70:	4573      	cmp	r3, lr
 8005b72:	d320      	bcc.n	8005bb6 <__multiply+0x92>
 8005b74:	f107 0814 	add.w	r8, r7, #20
 8005b78:	f109 0114 	add.w	r1, r9, #20
 8005b7c:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005b80:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005b84:	9302      	str	r3, [sp, #8]
 8005b86:	1beb      	subs	r3, r5, r7
 8005b88:	3b15      	subs	r3, #21
 8005b8a:	f023 0303 	bic.w	r3, r3, #3
 8005b8e:	3304      	adds	r3, #4
 8005b90:	3715      	adds	r7, #21
 8005b92:	42bd      	cmp	r5, r7
 8005b94:	bf38      	it	cc
 8005b96:	2304      	movcc	r3, #4
 8005b98:	9301      	str	r3, [sp, #4]
 8005b9a:	9b02      	ldr	r3, [sp, #8]
 8005b9c:	9103      	str	r1, [sp, #12]
 8005b9e:	428b      	cmp	r3, r1
 8005ba0:	d80c      	bhi.n	8005bbc <__multiply+0x98>
 8005ba2:	2e00      	cmp	r6, #0
 8005ba4:	dd03      	ble.n	8005bae <__multiply+0x8a>
 8005ba6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d055      	beq.n	8005c5a <__multiply+0x136>
 8005bae:	6106      	str	r6, [r0, #16]
 8005bb0:	b005      	add	sp, #20
 8005bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bb6:	f843 2b04 	str.w	r2, [r3], #4
 8005bba:	e7d9      	b.n	8005b70 <__multiply+0x4c>
 8005bbc:	f8b1 a000 	ldrh.w	sl, [r1]
 8005bc0:	f1ba 0f00 	cmp.w	sl, #0
 8005bc4:	d01f      	beq.n	8005c06 <__multiply+0xe2>
 8005bc6:	46c4      	mov	ip, r8
 8005bc8:	46a1      	mov	r9, r4
 8005bca:	2700      	movs	r7, #0
 8005bcc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005bd0:	f8d9 3000 	ldr.w	r3, [r9]
 8005bd4:	fa1f fb82 	uxth.w	fp, r2
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	fb0a 330b 	mla	r3, sl, fp, r3
 8005bde:	443b      	add	r3, r7
 8005be0:	f8d9 7000 	ldr.w	r7, [r9]
 8005be4:	0c12      	lsrs	r2, r2, #16
 8005be6:	0c3f      	lsrs	r7, r7, #16
 8005be8:	fb0a 7202 	mla	r2, sl, r2, r7
 8005bec:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bf6:	4565      	cmp	r5, ip
 8005bf8:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8005bfc:	f849 3b04 	str.w	r3, [r9], #4
 8005c00:	d8e4      	bhi.n	8005bcc <__multiply+0xa8>
 8005c02:	9b01      	ldr	r3, [sp, #4]
 8005c04:	50e7      	str	r7, [r4, r3]
 8005c06:	9b03      	ldr	r3, [sp, #12]
 8005c08:	3104      	adds	r1, #4
 8005c0a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005c0e:	f1b9 0f00 	cmp.w	r9, #0
 8005c12:	d020      	beq.n	8005c56 <__multiply+0x132>
 8005c14:	4647      	mov	r7, r8
 8005c16:	46a4      	mov	ip, r4
 8005c18:	f04f 0a00 	mov.w	sl, #0
 8005c1c:	6823      	ldr	r3, [r4, #0]
 8005c1e:	f8b7 b000 	ldrh.w	fp, [r7]
 8005c22:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	fb09 220b 	mla	r2, r9, fp, r2
 8005c2c:	4452      	add	r2, sl
 8005c2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c32:	f84c 3b04 	str.w	r3, [ip], #4
 8005c36:	f857 3b04 	ldr.w	r3, [r7], #4
 8005c3a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005c3e:	f8bc 3000 	ldrh.w	r3, [ip]
 8005c42:	42bd      	cmp	r5, r7
 8005c44:	fb09 330a 	mla	r3, r9, sl, r3
 8005c48:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005c4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005c50:	d8e5      	bhi.n	8005c1e <__multiply+0xfa>
 8005c52:	9a01      	ldr	r2, [sp, #4]
 8005c54:	50a3      	str	r3, [r4, r2]
 8005c56:	3404      	adds	r4, #4
 8005c58:	e79f      	b.n	8005b9a <__multiply+0x76>
 8005c5a:	3e01      	subs	r6, #1
 8005c5c:	e7a1      	b.n	8005ba2 <__multiply+0x7e>
 8005c5e:	bf00      	nop
 8005c60:	0800816f 	.word	0x0800816f
 8005c64:	08008180 	.word	0x08008180

08005c68 <__pow5mult>:
 8005c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c6c:	4615      	mov	r5, r2
 8005c6e:	f012 0203 	ands.w	r2, r2, #3
 8005c72:	4607      	mov	r7, r0
 8005c74:	460e      	mov	r6, r1
 8005c76:	d007      	beq.n	8005c88 <__pow5mult+0x20>
 8005c78:	4c25      	ldr	r4, [pc, #148]	@ (8005d10 <__pow5mult+0xa8>)
 8005c7a:	3a01      	subs	r2, #1
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005c82:	f7ff fe5d 	bl	8005940 <__multadd>
 8005c86:	4606      	mov	r6, r0
 8005c88:	10ad      	asrs	r5, r5, #2
 8005c8a:	d03d      	beq.n	8005d08 <__pow5mult+0xa0>
 8005c8c:	69fc      	ldr	r4, [r7, #28]
 8005c8e:	b97c      	cbnz	r4, 8005cb0 <__pow5mult+0x48>
 8005c90:	2010      	movs	r0, #16
 8005c92:	f7ff fd3d 	bl	8005710 <malloc>
 8005c96:	4602      	mov	r2, r0
 8005c98:	61f8      	str	r0, [r7, #28]
 8005c9a:	b928      	cbnz	r0, 8005ca8 <__pow5mult+0x40>
 8005c9c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8005d14 <__pow5mult+0xac>)
 8005ca2:	481d      	ldr	r0, [pc, #116]	@ (8005d18 <__pow5mult+0xb0>)
 8005ca4:	f001 fb48 	bl	8007338 <__assert_func>
 8005ca8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005cac:	6004      	str	r4, [r0, #0]
 8005cae:	60c4      	str	r4, [r0, #12]
 8005cb0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005cb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005cb8:	b94c      	cbnz	r4, 8005cce <__pow5mult+0x66>
 8005cba:	f240 2171 	movw	r1, #625	@ 0x271
 8005cbe:	4638      	mov	r0, r7
 8005cc0:	f7ff ff1a 	bl	8005af8 <__i2b>
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	4604      	mov	r4, r0
 8005cc8:	f8c8 0008 	str.w	r0, [r8, #8]
 8005ccc:	6003      	str	r3, [r0, #0]
 8005cce:	f04f 0900 	mov.w	r9, #0
 8005cd2:	07eb      	lsls	r3, r5, #31
 8005cd4:	d50a      	bpl.n	8005cec <__pow5mult+0x84>
 8005cd6:	4631      	mov	r1, r6
 8005cd8:	4622      	mov	r2, r4
 8005cda:	4638      	mov	r0, r7
 8005cdc:	f7ff ff22 	bl	8005b24 <__multiply>
 8005ce0:	4680      	mov	r8, r0
 8005ce2:	4631      	mov	r1, r6
 8005ce4:	4638      	mov	r0, r7
 8005ce6:	f7ff fe09 	bl	80058fc <_Bfree>
 8005cea:	4646      	mov	r6, r8
 8005cec:	106d      	asrs	r5, r5, #1
 8005cee:	d00b      	beq.n	8005d08 <__pow5mult+0xa0>
 8005cf0:	6820      	ldr	r0, [r4, #0]
 8005cf2:	b938      	cbnz	r0, 8005d04 <__pow5mult+0x9c>
 8005cf4:	4622      	mov	r2, r4
 8005cf6:	4621      	mov	r1, r4
 8005cf8:	4638      	mov	r0, r7
 8005cfa:	f7ff ff13 	bl	8005b24 <__multiply>
 8005cfe:	6020      	str	r0, [r4, #0]
 8005d00:	f8c0 9000 	str.w	r9, [r0]
 8005d04:	4604      	mov	r4, r0
 8005d06:	e7e4      	b.n	8005cd2 <__pow5mult+0x6a>
 8005d08:	4630      	mov	r0, r6
 8005d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d0e:	bf00      	nop
 8005d10:	08008290 	.word	0x08008290
 8005d14:	08008100 	.word	0x08008100
 8005d18:	08008180 	.word	0x08008180

08005d1c <__lshift>:
 8005d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d20:	460c      	mov	r4, r1
 8005d22:	4607      	mov	r7, r0
 8005d24:	4691      	mov	r9, r2
 8005d26:	6923      	ldr	r3, [r4, #16]
 8005d28:	6849      	ldr	r1, [r1, #4]
 8005d2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005d2e:	68a3      	ldr	r3, [r4, #8]
 8005d30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005d34:	f108 0601 	add.w	r6, r8, #1
 8005d38:	42b3      	cmp	r3, r6
 8005d3a:	db0b      	blt.n	8005d54 <__lshift+0x38>
 8005d3c:	4638      	mov	r0, r7
 8005d3e:	f7ff fd9d 	bl	800587c <_Balloc>
 8005d42:	4605      	mov	r5, r0
 8005d44:	b948      	cbnz	r0, 8005d5a <__lshift+0x3e>
 8005d46:	4602      	mov	r2, r0
 8005d48:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005d4c:	4b27      	ldr	r3, [pc, #156]	@ (8005dec <__lshift+0xd0>)
 8005d4e:	4828      	ldr	r0, [pc, #160]	@ (8005df0 <__lshift+0xd4>)
 8005d50:	f001 faf2 	bl	8007338 <__assert_func>
 8005d54:	3101      	adds	r1, #1
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	e7ee      	b.n	8005d38 <__lshift+0x1c>
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	f100 0114 	add.w	r1, r0, #20
 8005d60:	f100 0210 	add.w	r2, r0, #16
 8005d64:	4618      	mov	r0, r3
 8005d66:	4553      	cmp	r3, sl
 8005d68:	db33      	blt.n	8005dd2 <__lshift+0xb6>
 8005d6a:	6920      	ldr	r0, [r4, #16]
 8005d6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005d70:	f104 0314 	add.w	r3, r4, #20
 8005d74:	f019 091f 	ands.w	r9, r9, #31
 8005d78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005d7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005d80:	d02b      	beq.n	8005dda <__lshift+0xbe>
 8005d82:	468a      	mov	sl, r1
 8005d84:	2200      	movs	r2, #0
 8005d86:	f1c9 0e20 	rsb	lr, r9, #32
 8005d8a:	6818      	ldr	r0, [r3, #0]
 8005d8c:	fa00 f009 	lsl.w	r0, r0, r9
 8005d90:	4310      	orrs	r0, r2
 8005d92:	f84a 0b04 	str.w	r0, [sl], #4
 8005d96:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d9a:	459c      	cmp	ip, r3
 8005d9c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005da0:	d8f3      	bhi.n	8005d8a <__lshift+0x6e>
 8005da2:	ebac 0304 	sub.w	r3, ip, r4
 8005da6:	3b15      	subs	r3, #21
 8005da8:	f023 0303 	bic.w	r3, r3, #3
 8005dac:	3304      	adds	r3, #4
 8005dae:	f104 0015 	add.w	r0, r4, #21
 8005db2:	4560      	cmp	r0, ip
 8005db4:	bf88      	it	hi
 8005db6:	2304      	movhi	r3, #4
 8005db8:	50ca      	str	r2, [r1, r3]
 8005dba:	b10a      	cbz	r2, 8005dc0 <__lshift+0xa4>
 8005dbc:	f108 0602 	add.w	r6, r8, #2
 8005dc0:	3e01      	subs	r6, #1
 8005dc2:	4638      	mov	r0, r7
 8005dc4:	4621      	mov	r1, r4
 8005dc6:	612e      	str	r6, [r5, #16]
 8005dc8:	f7ff fd98 	bl	80058fc <_Bfree>
 8005dcc:	4628      	mov	r0, r5
 8005dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dd2:	f842 0f04 	str.w	r0, [r2, #4]!
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	e7c5      	b.n	8005d66 <__lshift+0x4a>
 8005dda:	3904      	subs	r1, #4
 8005ddc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005de0:	459c      	cmp	ip, r3
 8005de2:	f841 2f04 	str.w	r2, [r1, #4]!
 8005de6:	d8f9      	bhi.n	8005ddc <__lshift+0xc0>
 8005de8:	e7ea      	b.n	8005dc0 <__lshift+0xa4>
 8005dea:	bf00      	nop
 8005dec:	0800816f 	.word	0x0800816f
 8005df0:	08008180 	.word	0x08008180

08005df4 <__mcmp>:
 8005df4:	4603      	mov	r3, r0
 8005df6:	690a      	ldr	r2, [r1, #16]
 8005df8:	6900      	ldr	r0, [r0, #16]
 8005dfa:	b530      	push	{r4, r5, lr}
 8005dfc:	1a80      	subs	r0, r0, r2
 8005dfe:	d10e      	bne.n	8005e1e <__mcmp+0x2a>
 8005e00:	3314      	adds	r3, #20
 8005e02:	3114      	adds	r1, #20
 8005e04:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005e08:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005e0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005e10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005e14:	4295      	cmp	r5, r2
 8005e16:	d003      	beq.n	8005e20 <__mcmp+0x2c>
 8005e18:	d205      	bcs.n	8005e26 <__mcmp+0x32>
 8005e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e1e:	bd30      	pop	{r4, r5, pc}
 8005e20:	42a3      	cmp	r3, r4
 8005e22:	d3f3      	bcc.n	8005e0c <__mcmp+0x18>
 8005e24:	e7fb      	b.n	8005e1e <__mcmp+0x2a>
 8005e26:	2001      	movs	r0, #1
 8005e28:	e7f9      	b.n	8005e1e <__mcmp+0x2a>
	...

08005e2c <__mdiff>:
 8005e2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e30:	4689      	mov	r9, r1
 8005e32:	4606      	mov	r6, r0
 8005e34:	4611      	mov	r1, r2
 8005e36:	4648      	mov	r0, r9
 8005e38:	4614      	mov	r4, r2
 8005e3a:	f7ff ffdb 	bl	8005df4 <__mcmp>
 8005e3e:	1e05      	subs	r5, r0, #0
 8005e40:	d112      	bne.n	8005e68 <__mdiff+0x3c>
 8005e42:	4629      	mov	r1, r5
 8005e44:	4630      	mov	r0, r6
 8005e46:	f7ff fd19 	bl	800587c <_Balloc>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	b928      	cbnz	r0, 8005e5a <__mdiff+0x2e>
 8005e4e:	f240 2137 	movw	r1, #567	@ 0x237
 8005e52:	4b3e      	ldr	r3, [pc, #248]	@ (8005f4c <__mdiff+0x120>)
 8005e54:	483e      	ldr	r0, [pc, #248]	@ (8005f50 <__mdiff+0x124>)
 8005e56:	f001 fa6f 	bl	8007338 <__assert_func>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005e60:	4610      	mov	r0, r2
 8005e62:	b003      	add	sp, #12
 8005e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e68:	bfbc      	itt	lt
 8005e6a:	464b      	movlt	r3, r9
 8005e6c:	46a1      	movlt	r9, r4
 8005e6e:	4630      	mov	r0, r6
 8005e70:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005e74:	bfba      	itte	lt
 8005e76:	461c      	movlt	r4, r3
 8005e78:	2501      	movlt	r5, #1
 8005e7a:	2500      	movge	r5, #0
 8005e7c:	f7ff fcfe 	bl	800587c <_Balloc>
 8005e80:	4602      	mov	r2, r0
 8005e82:	b918      	cbnz	r0, 8005e8c <__mdiff+0x60>
 8005e84:	f240 2145 	movw	r1, #581	@ 0x245
 8005e88:	4b30      	ldr	r3, [pc, #192]	@ (8005f4c <__mdiff+0x120>)
 8005e8a:	e7e3      	b.n	8005e54 <__mdiff+0x28>
 8005e8c:	f100 0b14 	add.w	fp, r0, #20
 8005e90:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005e94:	f109 0310 	add.w	r3, r9, #16
 8005e98:	60c5      	str	r5, [r0, #12]
 8005e9a:	f04f 0c00 	mov.w	ip, #0
 8005e9e:	f109 0514 	add.w	r5, r9, #20
 8005ea2:	46d9      	mov	r9, fp
 8005ea4:	6926      	ldr	r6, [r4, #16]
 8005ea6:	f104 0e14 	add.w	lr, r4, #20
 8005eaa:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005eae:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005eb2:	9301      	str	r3, [sp, #4]
 8005eb4:	9b01      	ldr	r3, [sp, #4]
 8005eb6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005eba:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005ebe:	b281      	uxth	r1, r0
 8005ec0:	9301      	str	r3, [sp, #4]
 8005ec2:	fa1f f38a 	uxth.w	r3, sl
 8005ec6:	1a5b      	subs	r3, r3, r1
 8005ec8:	0c00      	lsrs	r0, r0, #16
 8005eca:	4463      	add	r3, ip
 8005ecc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005ed0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005eda:	4576      	cmp	r6, lr
 8005edc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005ee0:	f849 3b04 	str.w	r3, [r9], #4
 8005ee4:	d8e6      	bhi.n	8005eb4 <__mdiff+0x88>
 8005ee6:	1b33      	subs	r3, r6, r4
 8005ee8:	3b15      	subs	r3, #21
 8005eea:	f023 0303 	bic.w	r3, r3, #3
 8005eee:	3415      	adds	r4, #21
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	42a6      	cmp	r6, r4
 8005ef4:	bf38      	it	cc
 8005ef6:	2304      	movcc	r3, #4
 8005ef8:	441d      	add	r5, r3
 8005efa:	445b      	add	r3, fp
 8005efc:	461e      	mov	r6, r3
 8005efe:	462c      	mov	r4, r5
 8005f00:	4544      	cmp	r4, r8
 8005f02:	d30e      	bcc.n	8005f22 <__mdiff+0xf6>
 8005f04:	f108 0103 	add.w	r1, r8, #3
 8005f08:	1b49      	subs	r1, r1, r5
 8005f0a:	f021 0103 	bic.w	r1, r1, #3
 8005f0e:	3d03      	subs	r5, #3
 8005f10:	45a8      	cmp	r8, r5
 8005f12:	bf38      	it	cc
 8005f14:	2100      	movcc	r1, #0
 8005f16:	440b      	add	r3, r1
 8005f18:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005f1c:	b199      	cbz	r1, 8005f46 <__mdiff+0x11a>
 8005f1e:	6117      	str	r7, [r2, #16]
 8005f20:	e79e      	b.n	8005e60 <__mdiff+0x34>
 8005f22:	46e6      	mov	lr, ip
 8005f24:	f854 1b04 	ldr.w	r1, [r4], #4
 8005f28:	fa1f fc81 	uxth.w	ip, r1
 8005f2c:	44f4      	add	ip, lr
 8005f2e:	0c08      	lsrs	r0, r1, #16
 8005f30:	4471      	add	r1, lr
 8005f32:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005f36:	b289      	uxth	r1, r1
 8005f38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005f3c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005f40:	f846 1b04 	str.w	r1, [r6], #4
 8005f44:	e7dc      	b.n	8005f00 <__mdiff+0xd4>
 8005f46:	3f01      	subs	r7, #1
 8005f48:	e7e6      	b.n	8005f18 <__mdiff+0xec>
 8005f4a:	bf00      	nop
 8005f4c:	0800816f 	.word	0x0800816f
 8005f50:	08008180 	.word	0x08008180

08005f54 <__ulp>:
 8005f54:	4b0e      	ldr	r3, [pc, #56]	@ (8005f90 <__ulp+0x3c>)
 8005f56:	400b      	ands	r3, r1
 8005f58:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	dc08      	bgt.n	8005f72 <__ulp+0x1e>
 8005f60:	425b      	negs	r3, r3
 8005f62:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8005f66:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005f6a:	da04      	bge.n	8005f76 <__ulp+0x22>
 8005f6c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005f70:	4113      	asrs	r3, r2
 8005f72:	2200      	movs	r2, #0
 8005f74:	e008      	b.n	8005f88 <__ulp+0x34>
 8005f76:	f1a2 0314 	sub.w	r3, r2, #20
 8005f7a:	2b1e      	cmp	r3, #30
 8005f7c:	bfd6      	itet	le
 8005f7e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8005f82:	2201      	movgt	r2, #1
 8005f84:	40da      	lsrle	r2, r3
 8005f86:	2300      	movs	r3, #0
 8005f88:	4619      	mov	r1, r3
 8005f8a:	4610      	mov	r0, r2
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	7ff00000 	.word	0x7ff00000

08005f94 <__b2d>:
 8005f94:	6902      	ldr	r2, [r0, #16]
 8005f96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f98:	f100 0614 	add.w	r6, r0, #20
 8005f9c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8005fa0:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8005fa4:	4f1e      	ldr	r7, [pc, #120]	@ (8006020 <__b2d+0x8c>)
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	f7ff fd5a 	bl	8005a60 <__hi0bits>
 8005fac:	4603      	mov	r3, r0
 8005fae:	f1c0 0020 	rsb	r0, r0, #32
 8005fb2:	2b0a      	cmp	r3, #10
 8005fb4:	f1a2 0504 	sub.w	r5, r2, #4
 8005fb8:	6008      	str	r0, [r1, #0]
 8005fba:	dc12      	bgt.n	8005fe2 <__b2d+0x4e>
 8005fbc:	42ae      	cmp	r6, r5
 8005fbe:	bf2c      	ite	cs
 8005fc0:	2200      	movcs	r2, #0
 8005fc2:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8005fc6:	f1c3 0c0b 	rsb	ip, r3, #11
 8005fca:	3315      	adds	r3, #21
 8005fcc:	fa24 fe0c 	lsr.w	lr, r4, ip
 8005fd0:	fa04 f303 	lsl.w	r3, r4, r3
 8005fd4:	fa22 f20c 	lsr.w	r2, r2, ip
 8005fd8:	ea4e 0107 	orr.w	r1, lr, r7
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	4610      	mov	r0, r2
 8005fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fe2:	42ae      	cmp	r6, r5
 8005fe4:	bf36      	itet	cc
 8005fe6:	f1a2 0508 	subcc.w	r5, r2, #8
 8005fea:	2200      	movcs	r2, #0
 8005fec:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8005ff0:	3b0b      	subs	r3, #11
 8005ff2:	d012      	beq.n	800601a <__b2d+0x86>
 8005ff4:	f1c3 0720 	rsb	r7, r3, #32
 8005ff8:	fa22 f107 	lsr.w	r1, r2, r7
 8005ffc:	409c      	lsls	r4, r3
 8005ffe:	430c      	orrs	r4, r1
 8006000:	42b5      	cmp	r5, r6
 8006002:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8006006:	bf94      	ite	ls
 8006008:	2400      	movls	r4, #0
 800600a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800600e:	409a      	lsls	r2, r3
 8006010:	40fc      	lsrs	r4, r7
 8006012:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8006016:	4322      	orrs	r2, r4
 8006018:	e7e1      	b.n	8005fde <__b2d+0x4a>
 800601a:	ea44 0107 	orr.w	r1, r4, r7
 800601e:	e7de      	b.n	8005fde <__b2d+0x4a>
 8006020:	3ff00000 	.word	0x3ff00000

08006024 <__d2b>:
 8006024:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006028:	2101      	movs	r1, #1
 800602a:	4690      	mov	r8, r2
 800602c:	4699      	mov	r9, r3
 800602e:	9e08      	ldr	r6, [sp, #32]
 8006030:	f7ff fc24 	bl	800587c <_Balloc>
 8006034:	4604      	mov	r4, r0
 8006036:	b930      	cbnz	r0, 8006046 <__d2b+0x22>
 8006038:	4602      	mov	r2, r0
 800603a:	f240 310f 	movw	r1, #783	@ 0x30f
 800603e:	4b23      	ldr	r3, [pc, #140]	@ (80060cc <__d2b+0xa8>)
 8006040:	4823      	ldr	r0, [pc, #140]	@ (80060d0 <__d2b+0xac>)
 8006042:	f001 f979 	bl	8007338 <__assert_func>
 8006046:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800604a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800604e:	b10d      	cbz	r5, 8006054 <__d2b+0x30>
 8006050:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006054:	9301      	str	r3, [sp, #4]
 8006056:	f1b8 0300 	subs.w	r3, r8, #0
 800605a:	d024      	beq.n	80060a6 <__d2b+0x82>
 800605c:	4668      	mov	r0, sp
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	f7ff fd1d 	bl	8005a9e <__lo0bits>
 8006064:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006068:	b1d8      	cbz	r0, 80060a2 <__d2b+0x7e>
 800606a:	f1c0 0320 	rsb	r3, r0, #32
 800606e:	fa02 f303 	lsl.w	r3, r2, r3
 8006072:	430b      	orrs	r3, r1
 8006074:	40c2      	lsrs	r2, r0
 8006076:	6163      	str	r3, [r4, #20]
 8006078:	9201      	str	r2, [sp, #4]
 800607a:	9b01      	ldr	r3, [sp, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	bf0c      	ite	eq
 8006080:	2201      	moveq	r2, #1
 8006082:	2202      	movne	r2, #2
 8006084:	61a3      	str	r3, [r4, #24]
 8006086:	6122      	str	r2, [r4, #16]
 8006088:	b1ad      	cbz	r5, 80060b6 <__d2b+0x92>
 800608a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800608e:	4405      	add	r5, r0
 8006090:	6035      	str	r5, [r6, #0]
 8006092:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006098:	6018      	str	r0, [r3, #0]
 800609a:	4620      	mov	r0, r4
 800609c:	b002      	add	sp, #8
 800609e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80060a2:	6161      	str	r1, [r4, #20]
 80060a4:	e7e9      	b.n	800607a <__d2b+0x56>
 80060a6:	a801      	add	r0, sp, #4
 80060a8:	f7ff fcf9 	bl	8005a9e <__lo0bits>
 80060ac:	9b01      	ldr	r3, [sp, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	6163      	str	r3, [r4, #20]
 80060b2:	3020      	adds	r0, #32
 80060b4:	e7e7      	b.n	8006086 <__d2b+0x62>
 80060b6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80060ba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80060be:	6030      	str	r0, [r6, #0]
 80060c0:	6918      	ldr	r0, [r3, #16]
 80060c2:	f7ff fccd 	bl	8005a60 <__hi0bits>
 80060c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80060ca:	e7e4      	b.n	8006096 <__d2b+0x72>
 80060cc:	0800816f 	.word	0x0800816f
 80060d0:	08008180 	.word	0x08008180

080060d4 <__ratio>:
 80060d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d8:	b085      	sub	sp, #20
 80060da:	e9cd 1000 	strd	r1, r0, [sp]
 80060de:	a902      	add	r1, sp, #8
 80060e0:	f7ff ff58 	bl	8005f94 <__b2d>
 80060e4:	468b      	mov	fp, r1
 80060e6:	4606      	mov	r6, r0
 80060e8:	460f      	mov	r7, r1
 80060ea:	9800      	ldr	r0, [sp, #0]
 80060ec:	a903      	add	r1, sp, #12
 80060ee:	f7ff ff51 	bl	8005f94 <__b2d>
 80060f2:	460d      	mov	r5, r1
 80060f4:	9b01      	ldr	r3, [sp, #4]
 80060f6:	4689      	mov	r9, r1
 80060f8:	6919      	ldr	r1, [r3, #16]
 80060fa:	9b00      	ldr	r3, [sp, #0]
 80060fc:	4604      	mov	r4, r0
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	4630      	mov	r0, r6
 8006102:	1ac9      	subs	r1, r1, r3
 8006104:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006108:	1a9b      	subs	r3, r3, r2
 800610a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800610e:	2b00      	cmp	r3, #0
 8006110:	bfcd      	iteet	gt
 8006112:	463a      	movgt	r2, r7
 8006114:	462a      	movle	r2, r5
 8006116:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800611a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800611e:	bfd8      	it	le
 8006120:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006124:	464b      	mov	r3, r9
 8006126:	4622      	mov	r2, r4
 8006128:	4659      	mov	r1, fp
 800612a:	f7fa faff 	bl	800072c <__aeabi_ddiv>
 800612e:	b005      	add	sp, #20
 8006130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006134 <__copybits>:
 8006134:	3901      	subs	r1, #1
 8006136:	b570      	push	{r4, r5, r6, lr}
 8006138:	1149      	asrs	r1, r1, #5
 800613a:	6914      	ldr	r4, [r2, #16]
 800613c:	3101      	adds	r1, #1
 800613e:	f102 0314 	add.w	r3, r2, #20
 8006142:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006146:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800614a:	1f05      	subs	r5, r0, #4
 800614c:	42a3      	cmp	r3, r4
 800614e:	d30c      	bcc.n	800616a <__copybits+0x36>
 8006150:	1aa3      	subs	r3, r4, r2
 8006152:	3b11      	subs	r3, #17
 8006154:	f023 0303 	bic.w	r3, r3, #3
 8006158:	3211      	adds	r2, #17
 800615a:	42a2      	cmp	r2, r4
 800615c:	bf88      	it	hi
 800615e:	2300      	movhi	r3, #0
 8006160:	4418      	add	r0, r3
 8006162:	2300      	movs	r3, #0
 8006164:	4288      	cmp	r0, r1
 8006166:	d305      	bcc.n	8006174 <__copybits+0x40>
 8006168:	bd70      	pop	{r4, r5, r6, pc}
 800616a:	f853 6b04 	ldr.w	r6, [r3], #4
 800616e:	f845 6f04 	str.w	r6, [r5, #4]!
 8006172:	e7eb      	b.n	800614c <__copybits+0x18>
 8006174:	f840 3b04 	str.w	r3, [r0], #4
 8006178:	e7f4      	b.n	8006164 <__copybits+0x30>

0800617a <__any_on>:
 800617a:	f100 0214 	add.w	r2, r0, #20
 800617e:	6900      	ldr	r0, [r0, #16]
 8006180:	114b      	asrs	r3, r1, #5
 8006182:	4298      	cmp	r0, r3
 8006184:	b510      	push	{r4, lr}
 8006186:	db11      	blt.n	80061ac <__any_on+0x32>
 8006188:	dd0a      	ble.n	80061a0 <__any_on+0x26>
 800618a:	f011 011f 	ands.w	r1, r1, #31
 800618e:	d007      	beq.n	80061a0 <__any_on+0x26>
 8006190:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006194:	fa24 f001 	lsr.w	r0, r4, r1
 8006198:	fa00 f101 	lsl.w	r1, r0, r1
 800619c:	428c      	cmp	r4, r1
 800619e:	d10b      	bne.n	80061b8 <__any_on+0x3e>
 80061a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d803      	bhi.n	80061b0 <__any_on+0x36>
 80061a8:	2000      	movs	r0, #0
 80061aa:	bd10      	pop	{r4, pc}
 80061ac:	4603      	mov	r3, r0
 80061ae:	e7f7      	b.n	80061a0 <__any_on+0x26>
 80061b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80061b4:	2900      	cmp	r1, #0
 80061b6:	d0f5      	beq.n	80061a4 <__any_on+0x2a>
 80061b8:	2001      	movs	r0, #1
 80061ba:	e7f6      	b.n	80061aa <__any_on+0x30>

080061bc <sulp>:
 80061bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061c0:	460f      	mov	r7, r1
 80061c2:	4690      	mov	r8, r2
 80061c4:	f7ff fec6 	bl	8005f54 <__ulp>
 80061c8:	4604      	mov	r4, r0
 80061ca:	460d      	mov	r5, r1
 80061cc:	f1b8 0f00 	cmp.w	r8, #0
 80061d0:	d011      	beq.n	80061f6 <sulp+0x3a>
 80061d2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80061d6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80061da:	2b00      	cmp	r3, #0
 80061dc:	dd0b      	ble.n	80061f6 <sulp+0x3a>
 80061de:	2400      	movs	r4, #0
 80061e0:	051b      	lsls	r3, r3, #20
 80061e2:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80061e6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80061ea:	4622      	mov	r2, r4
 80061ec:	462b      	mov	r3, r5
 80061ee:	f7fa f973 	bl	80004d8 <__aeabi_dmul>
 80061f2:	4604      	mov	r4, r0
 80061f4:	460d      	mov	r5, r1
 80061f6:	4620      	mov	r0, r4
 80061f8:	4629      	mov	r1, r5
 80061fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006200 <_strtod_l>:
 8006200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006204:	b09f      	sub	sp, #124	@ 0x7c
 8006206:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006208:	2200      	movs	r2, #0
 800620a:	460c      	mov	r4, r1
 800620c:	921a      	str	r2, [sp, #104]	@ 0x68
 800620e:	f04f 0a00 	mov.w	sl, #0
 8006212:	f04f 0b00 	mov.w	fp, #0
 8006216:	460a      	mov	r2, r1
 8006218:	9005      	str	r0, [sp, #20]
 800621a:	9219      	str	r2, [sp, #100]	@ 0x64
 800621c:	7811      	ldrb	r1, [r2, #0]
 800621e:	292b      	cmp	r1, #43	@ 0x2b
 8006220:	d048      	beq.n	80062b4 <_strtod_l+0xb4>
 8006222:	d836      	bhi.n	8006292 <_strtod_l+0x92>
 8006224:	290d      	cmp	r1, #13
 8006226:	d830      	bhi.n	800628a <_strtod_l+0x8a>
 8006228:	2908      	cmp	r1, #8
 800622a:	d830      	bhi.n	800628e <_strtod_l+0x8e>
 800622c:	2900      	cmp	r1, #0
 800622e:	d039      	beq.n	80062a4 <_strtod_l+0xa4>
 8006230:	2200      	movs	r2, #0
 8006232:	920e      	str	r2, [sp, #56]	@ 0x38
 8006234:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006236:	782a      	ldrb	r2, [r5, #0]
 8006238:	2a30      	cmp	r2, #48	@ 0x30
 800623a:	f040 80b0 	bne.w	800639e <_strtod_l+0x19e>
 800623e:	786a      	ldrb	r2, [r5, #1]
 8006240:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006244:	2a58      	cmp	r2, #88	@ 0x58
 8006246:	d16c      	bne.n	8006322 <_strtod_l+0x122>
 8006248:	9302      	str	r3, [sp, #8]
 800624a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800624c:	4a8f      	ldr	r2, [pc, #572]	@ (800648c <_strtod_l+0x28c>)
 800624e:	9301      	str	r3, [sp, #4]
 8006250:	ab1a      	add	r3, sp, #104	@ 0x68
 8006252:	9300      	str	r3, [sp, #0]
 8006254:	9805      	ldr	r0, [sp, #20]
 8006256:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006258:	a919      	add	r1, sp, #100	@ 0x64
 800625a:	f001 f907 	bl	800746c <__gethex>
 800625e:	f010 060f 	ands.w	r6, r0, #15
 8006262:	4604      	mov	r4, r0
 8006264:	d005      	beq.n	8006272 <_strtod_l+0x72>
 8006266:	2e06      	cmp	r6, #6
 8006268:	d126      	bne.n	80062b8 <_strtod_l+0xb8>
 800626a:	2300      	movs	r3, #0
 800626c:	3501      	adds	r5, #1
 800626e:	9519      	str	r5, [sp, #100]	@ 0x64
 8006270:	930e      	str	r3, [sp, #56]	@ 0x38
 8006272:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006274:	2b00      	cmp	r3, #0
 8006276:	f040 8582 	bne.w	8006d7e <_strtod_l+0xb7e>
 800627a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800627c:	b1bb      	cbz	r3, 80062ae <_strtod_l+0xae>
 800627e:	4650      	mov	r0, sl
 8006280:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8006284:	b01f      	add	sp, #124	@ 0x7c
 8006286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800628a:	2920      	cmp	r1, #32
 800628c:	d1d0      	bne.n	8006230 <_strtod_l+0x30>
 800628e:	3201      	adds	r2, #1
 8006290:	e7c3      	b.n	800621a <_strtod_l+0x1a>
 8006292:	292d      	cmp	r1, #45	@ 0x2d
 8006294:	d1cc      	bne.n	8006230 <_strtod_l+0x30>
 8006296:	2101      	movs	r1, #1
 8006298:	910e      	str	r1, [sp, #56]	@ 0x38
 800629a:	1c51      	adds	r1, r2, #1
 800629c:	9119      	str	r1, [sp, #100]	@ 0x64
 800629e:	7852      	ldrb	r2, [r2, #1]
 80062a0:	2a00      	cmp	r2, #0
 80062a2:	d1c7      	bne.n	8006234 <_strtod_l+0x34>
 80062a4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80062a6:	9419      	str	r4, [sp, #100]	@ 0x64
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f040 8566 	bne.w	8006d7a <_strtod_l+0xb7a>
 80062ae:	4650      	mov	r0, sl
 80062b0:	4659      	mov	r1, fp
 80062b2:	e7e7      	b.n	8006284 <_strtod_l+0x84>
 80062b4:	2100      	movs	r1, #0
 80062b6:	e7ef      	b.n	8006298 <_strtod_l+0x98>
 80062b8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80062ba:	b13a      	cbz	r2, 80062cc <_strtod_l+0xcc>
 80062bc:	2135      	movs	r1, #53	@ 0x35
 80062be:	a81c      	add	r0, sp, #112	@ 0x70
 80062c0:	f7ff ff38 	bl	8006134 <__copybits>
 80062c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80062c6:	9805      	ldr	r0, [sp, #20]
 80062c8:	f7ff fb18 	bl	80058fc <_Bfree>
 80062cc:	3e01      	subs	r6, #1
 80062ce:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80062d0:	2e04      	cmp	r6, #4
 80062d2:	d806      	bhi.n	80062e2 <_strtod_l+0xe2>
 80062d4:	e8df f006 	tbb	[pc, r6]
 80062d8:	201d0314 	.word	0x201d0314
 80062dc:	14          	.byte	0x14
 80062dd:	00          	.byte	0x00
 80062de:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80062e2:	05e1      	lsls	r1, r4, #23
 80062e4:	bf48      	it	mi
 80062e6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80062ea:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80062ee:	0d1b      	lsrs	r3, r3, #20
 80062f0:	051b      	lsls	r3, r3, #20
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1bd      	bne.n	8006272 <_strtod_l+0x72>
 80062f6:	f7fe fb17 	bl	8004928 <__errno>
 80062fa:	2322      	movs	r3, #34	@ 0x22
 80062fc:	6003      	str	r3, [r0, #0]
 80062fe:	e7b8      	b.n	8006272 <_strtod_l+0x72>
 8006300:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006304:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006308:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800630c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006310:	e7e7      	b.n	80062e2 <_strtod_l+0xe2>
 8006312:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006490 <_strtod_l+0x290>
 8006316:	e7e4      	b.n	80062e2 <_strtod_l+0xe2>
 8006318:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800631c:	f04f 3aff 	mov.w	sl, #4294967295
 8006320:	e7df      	b.n	80062e2 <_strtod_l+0xe2>
 8006322:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006324:	1c5a      	adds	r2, r3, #1
 8006326:	9219      	str	r2, [sp, #100]	@ 0x64
 8006328:	785b      	ldrb	r3, [r3, #1]
 800632a:	2b30      	cmp	r3, #48	@ 0x30
 800632c:	d0f9      	beq.n	8006322 <_strtod_l+0x122>
 800632e:	2b00      	cmp	r3, #0
 8006330:	d09f      	beq.n	8006272 <_strtod_l+0x72>
 8006332:	2301      	movs	r3, #1
 8006334:	2700      	movs	r7, #0
 8006336:	220a      	movs	r2, #10
 8006338:	46b9      	mov	r9, r7
 800633a:	9308      	str	r3, [sp, #32]
 800633c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800633e:	970b      	str	r7, [sp, #44]	@ 0x2c
 8006340:	930c      	str	r3, [sp, #48]	@ 0x30
 8006342:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006344:	7805      	ldrb	r5, [r0, #0]
 8006346:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800634a:	b2d9      	uxtb	r1, r3
 800634c:	2909      	cmp	r1, #9
 800634e:	d928      	bls.n	80063a2 <_strtod_l+0x1a2>
 8006350:	2201      	movs	r2, #1
 8006352:	4950      	ldr	r1, [pc, #320]	@ (8006494 <_strtod_l+0x294>)
 8006354:	f000 ffc8 	bl	80072e8 <strncmp>
 8006358:	2800      	cmp	r0, #0
 800635a:	d032      	beq.n	80063c2 <_strtod_l+0x1c2>
 800635c:	2000      	movs	r0, #0
 800635e:	462a      	mov	r2, r5
 8006360:	4603      	mov	r3, r0
 8006362:	464d      	mov	r5, r9
 8006364:	900a      	str	r0, [sp, #40]	@ 0x28
 8006366:	2a65      	cmp	r2, #101	@ 0x65
 8006368:	d001      	beq.n	800636e <_strtod_l+0x16e>
 800636a:	2a45      	cmp	r2, #69	@ 0x45
 800636c:	d114      	bne.n	8006398 <_strtod_l+0x198>
 800636e:	b91d      	cbnz	r5, 8006378 <_strtod_l+0x178>
 8006370:	9a08      	ldr	r2, [sp, #32]
 8006372:	4302      	orrs	r2, r0
 8006374:	d096      	beq.n	80062a4 <_strtod_l+0xa4>
 8006376:	2500      	movs	r5, #0
 8006378:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800637a:	1c62      	adds	r2, r4, #1
 800637c:	9219      	str	r2, [sp, #100]	@ 0x64
 800637e:	7862      	ldrb	r2, [r4, #1]
 8006380:	2a2b      	cmp	r2, #43	@ 0x2b
 8006382:	d07a      	beq.n	800647a <_strtod_l+0x27a>
 8006384:	2a2d      	cmp	r2, #45	@ 0x2d
 8006386:	d07e      	beq.n	8006486 <_strtod_l+0x286>
 8006388:	f04f 0c00 	mov.w	ip, #0
 800638c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006390:	2909      	cmp	r1, #9
 8006392:	f240 8085 	bls.w	80064a0 <_strtod_l+0x2a0>
 8006396:	9419      	str	r4, [sp, #100]	@ 0x64
 8006398:	f04f 0800 	mov.w	r8, #0
 800639c:	e0a5      	b.n	80064ea <_strtod_l+0x2ea>
 800639e:	2300      	movs	r3, #0
 80063a0:	e7c8      	b.n	8006334 <_strtod_l+0x134>
 80063a2:	f1b9 0f08 	cmp.w	r9, #8
 80063a6:	bfd8      	it	le
 80063a8:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80063aa:	f100 0001 	add.w	r0, r0, #1
 80063ae:	bfd6      	itet	le
 80063b0:	fb02 3301 	mlale	r3, r2, r1, r3
 80063b4:	fb02 3707 	mlagt	r7, r2, r7, r3
 80063b8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80063ba:	f109 0901 	add.w	r9, r9, #1
 80063be:	9019      	str	r0, [sp, #100]	@ 0x64
 80063c0:	e7bf      	b.n	8006342 <_strtod_l+0x142>
 80063c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80063c4:	1c5a      	adds	r2, r3, #1
 80063c6:	9219      	str	r2, [sp, #100]	@ 0x64
 80063c8:	785a      	ldrb	r2, [r3, #1]
 80063ca:	f1b9 0f00 	cmp.w	r9, #0
 80063ce:	d03b      	beq.n	8006448 <_strtod_l+0x248>
 80063d0:	464d      	mov	r5, r9
 80063d2:	900a      	str	r0, [sp, #40]	@ 0x28
 80063d4:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80063d8:	2b09      	cmp	r3, #9
 80063da:	d912      	bls.n	8006402 <_strtod_l+0x202>
 80063dc:	2301      	movs	r3, #1
 80063de:	e7c2      	b.n	8006366 <_strtod_l+0x166>
 80063e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80063e2:	3001      	adds	r0, #1
 80063e4:	1c5a      	adds	r2, r3, #1
 80063e6:	9219      	str	r2, [sp, #100]	@ 0x64
 80063e8:	785a      	ldrb	r2, [r3, #1]
 80063ea:	2a30      	cmp	r2, #48	@ 0x30
 80063ec:	d0f8      	beq.n	80063e0 <_strtod_l+0x1e0>
 80063ee:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80063f2:	2b08      	cmp	r3, #8
 80063f4:	f200 84c8 	bhi.w	8006d88 <_strtod_l+0xb88>
 80063f8:	900a      	str	r0, [sp, #40]	@ 0x28
 80063fa:	2000      	movs	r0, #0
 80063fc:	4605      	mov	r5, r0
 80063fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006400:	930c      	str	r3, [sp, #48]	@ 0x30
 8006402:	3a30      	subs	r2, #48	@ 0x30
 8006404:	f100 0301 	add.w	r3, r0, #1
 8006408:	d018      	beq.n	800643c <_strtod_l+0x23c>
 800640a:	462e      	mov	r6, r5
 800640c:	f04f 0e0a 	mov.w	lr, #10
 8006410:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006412:	4419      	add	r1, r3
 8006414:	910a      	str	r1, [sp, #40]	@ 0x28
 8006416:	1c71      	adds	r1, r6, #1
 8006418:	eba1 0c05 	sub.w	ip, r1, r5
 800641c:	4563      	cmp	r3, ip
 800641e:	dc15      	bgt.n	800644c <_strtod_l+0x24c>
 8006420:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8006424:	182b      	adds	r3, r5, r0
 8006426:	2b08      	cmp	r3, #8
 8006428:	f105 0501 	add.w	r5, r5, #1
 800642c:	4405      	add	r5, r0
 800642e:	dc1a      	bgt.n	8006466 <_strtod_l+0x266>
 8006430:	230a      	movs	r3, #10
 8006432:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006434:	fb03 2301 	mla	r3, r3, r1, r2
 8006438:	930b      	str	r3, [sp, #44]	@ 0x2c
 800643a:	2300      	movs	r3, #0
 800643c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800643e:	4618      	mov	r0, r3
 8006440:	1c51      	adds	r1, r2, #1
 8006442:	9119      	str	r1, [sp, #100]	@ 0x64
 8006444:	7852      	ldrb	r2, [r2, #1]
 8006446:	e7c5      	b.n	80063d4 <_strtod_l+0x1d4>
 8006448:	4648      	mov	r0, r9
 800644a:	e7ce      	b.n	80063ea <_strtod_l+0x1ea>
 800644c:	2e08      	cmp	r6, #8
 800644e:	dc05      	bgt.n	800645c <_strtod_l+0x25c>
 8006450:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006452:	fb0e f606 	mul.w	r6, lr, r6
 8006456:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006458:	460e      	mov	r6, r1
 800645a:	e7dc      	b.n	8006416 <_strtod_l+0x216>
 800645c:	2910      	cmp	r1, #16
 800645e:	bfd8      	it	le
 8006460:	fb0e f707 	mulle.w	r7, lr, r7
 8006464:	e7f8      	b.n	8006458 <_strtod_l+0x258>
 8006466:	2b0f      	cmp	r3, #15
 8006468:	bfdc      	itt	le
 800646a:	230a      	movle	r3, #10
 800646c:	fb03 2707 	mlale	r7, r3, r7, r2
 8006470:	e7e3      	b.n	800643a <_strtod_l+0x23a>
 8006472:	2300      	movs	r3, #0
 8006474:	930a      	str	r3, [sp, #40]	@ 0x28
 8006476:	2301      	movs	r3, #1
 8006478:	e77a      	b.n	8006370 <_strtod_l+0x170>
 800647a:	f04f 0c00 	mov.w	ip, #0
 800647e:	1ca2      	adds	r2, r4, #2
 8006480:	9219      	str	r2, [sp, #100]	@ 0x64
 8006482:	78a2      	ldrb	r2, [r4, #2]
 8006484:	e782      	b.n	800638c <_strtod_l+0x18c>
 8006486:	f04f 0c01 	mov.w	ip, #1
 800648a:	e7f8      	b.n	800647e <_strtod_l+0x27e>
 800648c:	080083a4 	.word	0x080083a4
 8006490:	7ff00000 	.word	0x7ff00000
 8006494:	080081d9 	.word	0x080081d9
 8006498:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800649a:	1c51      	adds	r1, r2, #1
 800649c:	9119      	str	r1, [sp, #100]	@ 0x64
 800649e:	7852      	ldrb	r2, [r2, #1]
 80064a0:	2a30      	cmp	r2, #48	@ 0x30
 80064a2:	d0f9      	beq.n	8006498 <_strtod_l+0x298>
 80064a4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80064a8:	2908      	cmp	r1, #8
 80064aa:	f63f af75 	bhi.w	8006398 <_strtod_l+0x198>
 80064ae:	f04f 080a 	mov.w	r8, #10
 80064b2:	3a30      	subs	r2, #48	@ 0x30
 80064b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80064b6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80064b8:	920f      	str	r2, [sp, #60]	@ 0x3c
 80064ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80064bc:	1c56      	adds	r6, r2, #1
 80064be:	9619      	str	r6, [sp, #100]	@ 0x64
 80064c0:	7852      	ldrb	r2, [r2, #1]
 80064c2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80064c6:	f1be 0f09 	cmp.w	lr, #9
 80064ca:	d939      	bls.n	8006540 <_strtod_l+0x340>
 80064cc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80064ce:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80064d2:	1a76      	subs	r6, r6, r1
 80064d4:	2e08      	cmp	r6, #8
 80064d6:	dc03      	bgt.n	80064e0 <_strtod_l+0x2e0>
 80064d8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80064da:	4588      	cmp	r8, r1
 80064dc:	bfa8      	it	ge
 80064de:	4688      	movge	r8, r1
 80064e0:	f1bc 0f00 	cmp.w	ip, #0
 80064e4:	d001      	beq.n	80064ea <_strtod_l+0x2ea>
 80064e6:	f1c8 0800 	rsb	r8, r8, #0
 80064ea:	2d00      	cmp	r5, #0
 80064ec:	d14e      	bne.n	800658c <_strtod_l+0x38c>
 80064ee:	9908      	ldr	r1, [sp, #32]
 80064f0:	4308      	orrs	r0, r1
 80064f2:	f47f aebe 	bne.w	8006272 <_strtod_l+0x72>
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f47f aed4 	bne.w	80062a4 <_strtod_l+0xa4>
 80064fc:	2a69      	cmp	r2, #105	@ 0x69
 80064fe:	d028      	beq.n	8006552 <_strtod_l+0x352>
 8006500:	dc25      	bgt.n	800654e <_strtod_l+0x34e>
 8006502:	2a49      	cmp	r2, #73	@ 0x49
 8006504:	d025      	beq.n	8006552 <_strtod_l+0x352>
 8006506:	2a4e      	cmp	r2, #78	@ 0x4e
 8006508:	f47f aecc 	bne.w	80062a4 <_strtod_l+0xa4>
 800650c:	4999      	ldr	r1, [pc, #612]	@ (8006774 <_strtod_l+0x574>)
 800650e:	a819      	add	r0, sp, #100	@ 0x64
 8006510:	f001 f9ce 	bl	80078b0 <__match>
 8006514:	2800      	cmp	r0, #0
 8006516:	f43f aec5 	beq.w	80062a4 <_strtod_l+0xa4>
 800651a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	2b28      	cmp	r3, #40	@ 0x28
 8006520:	d12e      	bne.n	8006580 <_strtod_l+0x380>
 8006522:	4995      	ldr	r1, [pc, #596]	@ (8006778 <_strtod_l+0x578>)
 8006524:	aa1c      	add	r2, sp, #112	@ 0x70
 8006526:	a819      	add	r0, sp, #100	@ 0x64
 8006528:	f001 f9d6 	bl	80078d8 <__hexnan>
 800652c:	2805      	cmp	r0, #5
 800652e:	d127      	bne.n	8006580 <_strtod_l+0x380>
 8006530:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006532:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006536:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800653a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800653e:	e698      	b.n	8006272 <_strtod_l+0x72>
 8006540:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006542:	fb08 2101 	mla	r1, r8, r1, r2
 8006546:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800654a:	9209      	str	r2, [sp, #36]	@ 0x24
 800654c:	e7b5      	b.n	80064ba <_strtod_l+0x2ba>
 800654e:	2a6e      	cmp	r2, #110	@ 0x6e
 8006550:	e7da      	b.n	8006508 <_strtod_l+0x308>
 8006552:	498a      	ldr	r1, [pc, #552]	@ (800677c <_strtod_l+0x57c>)
 8006554:	a819      	add	r0, sp, #100	@ 0x64
 8006556:	f001 f9ab 	bl	80078b0 <__match>
 800655a:	2800      	cmp	r0, #0
 800655c:	f43f aea2 	beq.w	80062a4 <_strtod_l+0xa4>
 8006560:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006562:	4987      	ldr	r1, [pc, #540]	@ (8006780 <_strtod_l+0x580>)
 8006564:	3b01      	subs	r3, #1
 8006566:	a819      	add	r0, sp, #100	@ 0x64
 8006568:	9319      	str	r3, [sp, #100]	@ 0x64
 800656a:	f001 f9a1 	bl	80078b0 <__match>
 800656e:	b910      	cbnz	r0, 8006576 <_strtod_l+0x376>
 8006570:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006572:	3301      	adds	r3, #1
 8006574:	9319      	str	r3, [sp, #100]	@ 0x64
 8006576:	f04f 0a00 	mov.w	sl, #0
 800657a:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8006784 <_strtod_l+0x584>
 800657e:	e678      	b.n	8006272 <_strtod_l+0x72>
 8006580:	4881      	ldr	r0, [pc, #516]	@ (8006788 <_strtod_l+0x588>)
 8006582:	f000 fed3 	bl	800732c <nan>
 8006586:	4682      	mov	sl, r0
 8006588:	468b      	mov	fp, r1
 800658a:	e672      	b.n	8006272 <_strtod_l+0x72>
 800658c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800658e:	f1b9 0f00 	cmp.w	r9, #0
 8006592:	bf08      	it	eq
 8006594:	46a9      	moveq	r9, r5
 8006596:	eba8 0303 	sub.w	r3, r8, r3
 800659a:	2d10      	cmp	r5, #16
 800659c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800659e:	462c      	mov	r4, r5
 80065a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80065a2:	bfa8      	it	ge
 80065a4:	2410      	movge	r4, #16
 80065a6:	f7f9 ff1d 	bl	80003e4 <__aeabi_ui2d>
 80065aa:	2d09      	cmp	r5, #9
 80065ac:	4682      	mov	sl, r0
 80065ae:	468b      	mov	fp, r1
 80065b0:	dc11      	bgt.n	80065d6 <_strtod_l+0x3d6>
 80065b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f43f ae5c 	beq.w	8006272 <_strtod_l+0x72>
 80065ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065bc:	dd76      	ble.n	80066ac <_strtod_l+0x4ac>
 80065be:	2b16      	cmp	r3, #22
 80065c0:	dc5d      	bgt.n	800667e <_strtod_l+0x47e>
 80065c2:	4972      	ldr	r1, [pc, #456]	@ (800678c <_strtod_l+0x58c>)
 80065c4:	4652      	mov	r2, sl
 80065c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80065ca:	465b      	mov	r3, fp
 80065cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065d0:	f7f9 ff82 	bl	80004d8 <__aeabi_dmul>
 80065d4:	e7d7      	b.n	8006586 <_strtod_l+0x386>
 80065d6:	4b6d      	ldr	r3, [pc, #436]	@ (800678c <_strtod_l+0x58c>)
 80065d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80065dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80065e0:	f7f9 ff7a 	bl	80004d8 <__aeabi_dmul>
 80065e4:	4682      	mov	sl, r0
 80065e6:	4638      	mov	r0, r7
 80065e8:	468b      	mov	fp, r1
 80065ea:	f7f9 fefb 	bl	80003e4 <__aeabi_ui2d>
 80065ee:	4602      	mov	r2, r0
 80065f0:	460b      	mov	r3, r1
 80065f2:	4650      	mov	r0, sl
 80065f4:	4659      	mov	r1, fp
 80065f6:	f7f9 fdb9 	bl	800016c <__adddf3>
 80065fa:	2d0f      	cmp	r5, #15
 80065fc:	4682      	mov	sl, r0
 80065fe:	468b      	mov	fp, r1
 8006600:	ddd7      	ble.n	80065b2 <_strtod_l+0x3b2>
 8006602:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006604:	1b2c      	subs	r4, r5, r4
 8006606:	441c      	add	r4, r3
 8006608:	2c00      	cmp	r4, #0
 800660a:	f340 8093 	ble.w	8006734 <_strtod_l+0x534>
 800660e:	f014 030f 	ands.w	r3, r4, #15
 8006612:	d00a      	beq.n	800662a <_strtod_l+0x42a>
 8006614:	495d      	ldr	r1, [pc, #372]	@ (800678c <_strtod_l+0x58c>)
 8006616:	4652      	mov	r2, sl
 8006618:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800661c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006620:	465b      	mov	r3, fp
 8006622:	f7f9 ff59 	bl	80004d8 <__aeabi_dmul>
 8006626:	4682      	mov	sl, r0
 8006628:	468b      	mov	fp, r1
 800662a:	f034 040f 	bics.w	r4, r4, #15
 800662e:	d073      	beq.n	8006718 <_strtod_l+0x518>
 8006630:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006634:	dd49      	ble.n	80066ca <_strtod_l+0x4ca>
 8006636:	2400      	movs	r4, #0
 8006638:	46a0      	mov	r8, r4
 800663a:	46a1      	mov	r9, r4
 800663c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800663e:	2322      	movs	r3, #34	@ 0x22
 8006640:	f04f 0a00 	mov.w	sl, #0
 8006644:	9a05      	ldr	r2, [sp, #20]
 8006646:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8006784 <_strtod_l+0x584>
 800664a:	6013      	str	r3, [r2, #0]
 800664c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800664e:	2b00      	cmp	r3, #0
 8006650:	f43f ae0f 	beq.w	8006272 <_strtod_l+0x72>
 8006654:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006656:	9805      	ldr	r0, [sp, #20]
 8006658:	f7ff f950 	bl	80058fc <_Bfree>
 800665c:	4649      	mov	r1, r9
 800665e:	9805      	ldr	r0, [sp, #20]
 8006660:	f7ff f94c 	bl	80058fc <_Bfree>
 8006664:	4641      	mov	r1, r8
 8006666:	9805      	ldr	r0, [sp, #20]
 8006668:	f7ff f948 	bl	80058fc <_Bfree>
 800666c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800666e:	9805      	ldr	r0, [sp, #20]
 8006670:	f7ff f944 	bl	80058fc <_Bfree>
 8006674:	4621      	mov	r1, r4
 8006676:	9805      	ldr	r0, [sp, #20]
 8006678:	f7ff f940 	bl	80058fc <_Bfree>
 800667c:	e5f9      	b.n	8006272 <_strtod_l+0x72>
 800667e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006680:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006684:	4293      	cmp	r3, r2
 8006686:	dbbc      	blt.n	8006602 <_strtod_l+0x402>
 8006688:	4c40      	ldr	r4, [pc, #256]	@ (800678c <_strtod_l+0x58c>)
 800668a:	f1c5 050f 	rsb	r5, r5, #15
 800668e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006692:	4652      	mov	r2, sl
 8006694:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006698:	465b      	mov	r3, fp
 800669a:	f7f9 ff1d 	bl	80004d8 <__aeabi_dmul>
 800669e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066a0:	1b5d      	subs	r5, r3, r5
 80066a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80066a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80066aa:	e791      	b.n	80065d0 <_strtod_l+0x3d0>
 80066ac:	3316      	adds	r3, #22
 80066ae:	dba8      	blt.n	8006602 <_strtod_l+0x402>
 80066b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066b2:	4650      	mov	r0, sl
 80066b4:	eba3 0808 	sub.w	r8, r3, r8
 80066b8:	4b34      	ldr	r3, [pc, #208]	@ (800678c <_strtod_l+0x58c>)
 80066ba:	4659      	mov	r1, fp
 80066bc:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80066c0:	e9d8 2300 	ldrd	r2, r3, [r8]
 80066c4:	f7fa f832 	bl	800072c <__aeabi_ddiv>
 80066c8:	e75d      	b.n	8006586 <_strtod_l+0x386>
 80066ca:	2300      	movs	r3, #0
 80066cc:	4650      	mov	r0, sl
 80066ce:	4659      	mov	r1, fp
 80066d0:	461e      	mov	r6, r3
 80066d2:	4f2f      	ldr	r7, [pc, #188]	@ (8006790 <_strtod_l+0x590>)
 80066d4:	1124      	asrs	r4, r4, #4
 80066d6:	2c01      	cmp	r4, #1
 80066d8:	dc21      	bgt.n	800671e <_strtod_l+0x51e>
 80066da:	b10b      	cbz	r3, 80066e0 <_strtod_l+0x4e0>
 80066dc:	4682      	mov	sl, r0
 80066de:	468b      	mov	fp, r1
 80066e0:	492b      	ldr	r1, [pc, #172]	@ (8006790 <_strtod_l+0x590>)
 80066e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80066e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80066ea:	4652      	mov	r2, sl
 80066ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066f0:	465b      	mov	r3, fp
 80066f2:	f7f9 fef1 	bl	80004d8 <__aeabi_dmul>
 80066f6:	4b23      	ldr	r3, [pc, #140]	@ (8006784 <_strtod_l+0x584>)
 80066f8:	460a      	mov	r2, r1
 80066fa:	400b      	ands	r3, r1
 80066fc:	4925      	ldr	r1, [pc, #148]	@ (8006794 <_strtod_l+0x594>)
 80066fe:	4682      	mov	sl, r0
 8006700:	428b      	cmp	r3, r1
 8006702:	d898      	bhi.n	8006636 <_strtod_l+0x436>
 8006704:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006708:	428b      	cmp	r3, r1
 800670a:	bf86      	itte	hi
 800670c:	f04f 3aff 	movhi.w	sl, #4294967295
 8006710:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8006798 <_strtod_l+0x598>
 8006714:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006718:	2300      	movs	r3, #0
 800671a:	9308      	str	r3, [sp, #32]
 800671c:	e076      	b.n	800680c <_strtod_l+0x60c>
 800671e:	07e2      	lsls	r2, r4, #31
 8006720:	d504      	bpl.n	800672c <_strtod_l+0x52c>
 8006722:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006726:	f7f9 fed7 	bl	80004d8 <__aeabi_dmul>
 800672a:	2301      	movs	r3, #1
 800672c:	3601      	adds	r6, #1
 800672e:	1064      	asrs	r4, r4, #1
 8006730:	3708      	adds	r7, #8
 8006732:	e7d0      	b.n	80066d6 <_strtod_l+0x4d6>
 8006734:	d0f0      	beq.n	8006718 <_strtod_l+0x518>
 8006736:	4264      	negs	r4, r4
 8006738:	f014 020f 	ands.w	r2, r4, #15
 800673c:	d00a      	beq.n	8006754 <_strtod_l+0x554>
 800673e:	4b13      	ldr	r3, [pc, #76]	@ (800678c <_strtod_l+0x58c>)
 8006740:	4650      	mov	r0, sl
 8006742:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006746:	4659      	mov	r1, fp
 8006748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674c:	f7f9 ffee 	bl	800072c <__aeabi_ddiv>
 8006750:	4682      	mov	sl, r0
 8006752:	468b      	mov	fp, r1
 8006754:	1124      	asrs	r4, r4, #4
 8006756:	d0df      	beq.n	8006718 <_strtod_l+0x518>
 8006758:	2c1f      	cmp	r4, #31
 800675a:	dd1f      	ble.n	800679c <_strtod_l+0x59c>
 800675c:	2400      	movs	r4, #0
 800675e:	46a0      	mov	r8, r4
 8006760:	46a1      	mov	r9, r4
 8006762:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006764:	2322      	movs	r3, #34	@ 0x22
 8006766:	9a05      	ldr	r2, [sp, #20]
 8006768:	f04f 0a00 	mov.w	sl, #0
 800676c:	f04f 0b00 	mov.w	fp, #0
 8006770:	6013      	str	r3, [r2, #0]
 8006772:	e76b      	b.n	800664c <_strtod_l+0x44c>
 8006774:	080080c7 	.word	0x080080c7
 8006778:	08008390 	.word	0x08008390
 800677c:	080080bf 	.word	0x080080bf
 8006780:	080080f6 	.word	0x080080f6
 8006784:	7ff00000 	.word	0x7ff00000
 8006788:	0800822f 	.word	0x0800822f
 800678c:	080082c8 	.word	0x080082c8
 8006790:	080082a0 	.word	0x080082a0
 8006794:	7ca00000 	.word	0x7ca00000
 8006798:	7fefffff 	.word	0x7fefffff
 800679c:	f014 0310 	ands.w	r3, r4, #16
 80067a0:	bf18      	it	ne
 80067a2:	236a      	movne	r3, #106	@ 0x6a
 80067a4:	4650      	mov	r0, sl
 80067a6:	9308      	str	r3, [sp, #32]
 80067a8:	4659      	mov	r1, fp
 80067aa:	2300      	movs	r3, #0
 80067ac:	4e77      	ldr	r6, [pc, #476]	@ (800698c <_strtod_l+0x78c>)
 80067ae:	07e7      	lsls	r7, r4, #31
 80067b0:	d504      	bpl.n	80067bc <_strtod_l+0x5bc>
 80067b2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80067b6:	f7f9 fe8f 	bl	80004d8 <__aeabi_dmul>
 80067ba:	2301      	movs	r3, #1
 80067bc:	1064      	asrs	r4, r4, #1
 80067be:	f106 0608 	add.w	r6, r6, #8
 80067c2:	d1f4      	bne.n	80067ae <_strtod_l+0x5ae>
 80067c4:	b10b      	cbz	r3, 80067ca <_strtod_l+0x5ca>
 80067c6:	4682      	mov	sl, r0
 80067c8:	468b      	mov	fp, r1
 80067ca:	9b08      	ldr	r3, [sp, #32]
 80067cc:	b1b3      	cbz	r3, 80067fc <_strtod_l+0x5fc>
 80067ce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80067d2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	4659      	mov	r1, fp
 80067da:	dd0f      	ble.n	80067fc <_strtod_l+0x5fc>
 80067dc:	2b1f      	cmp	r3, #31
 80067de:	dd58      	ble.n	8006892 <_strtod_l+0x692>
 80067e0:	2b34      	cmp	r3, #52	@ 0x34
 80067e2:	bfd8      	it	le
 80067e4:	f04f 33ff 	movle.w	r3, #4294967295
 80067e8:	f04f 0a00 	mov.w	sl, #0
 80067ec:	bfcf      	iteee	gt
 80067ee:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80067f2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80067f6:	4093      	lslle	r3, r2
 80067f8:	ea03 0b01 	andle.w	fp, r3, r1
 80067fc:	2200      	movs	r2, #0
 80067fe:	2300      	movs	r3, #0
 8006800:	4650      	mov	r0, sl
 8006802:	4659      	mov	r1, fp
 8006804:	f7fa f8d0 	bl	80009a8 <__aeabi_dcmpeq>
 8006808:	2800      	cmp	r0, #0
 800680a:	d1a7      	bne.n	800675c <_strtod_l+0x55c>
 800680c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800680e:	464a      	mov	r2, r9
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006814:	462b      	mov	r3, r5
 8006816:	9805      	ldr	r0, [sp, #20]
 8006818:	f7ff f8d8 	bl	80059cc <__s2b>
 800681c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800681e:	2800      	cmp	r0, #0
 8006820:	f43f af09 	beq.w	8006636 <_strtod_l+0x436>
 8006824:	2400      	movs	r4, #0
 8006826:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006828:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800682a:	2a00      	cmp	r2, #0
 800682c:	eba3 0308 	sub.w	r3, r3, r8
 8006830:	bfa8      	it	ge
 8006832:	2300      	movge	r3, #0
 8006834:	46a0      	mov	r8, r4
 8006836:	9312      	str	r3, [sp, #72]	@ 0x48
 8006838:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800683c:	9316      	str	r3, [sp, #88]	@ 0x58
 800683e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006840:	9805      	ldr	r0, [sp, #20]
 8006842:	6859      	ldr	r1, [r3, #4]
 8006844:	f7ff f81a 	bl	800587c <_Balloc>
 8006848:	4681      	mov	r9, r0
 800684a:	2800      	cmp	r0, #0
 800684c:	f43f aef7 	beq.w	800663e <_strtod_l+0x43e>
 8006850:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006852:	300c      	adds	r0, #12
 8006854:	691a      	ldr	r2, [r3, #16]
 8006856:	f103 010c 	add.w	r1, r3, #12
 800685a:	3202      	adds	r2, #2
 800685c:	0092      	lsls	r2, r2, #2
 800685e:	f7fe f89e 	bl	800499e <memcpy>
 8006862:	ab1c      	add	r3, sp, #112	@ 0x70
 8006864:	9301      	str	r3, [sp, #4]
 8006866:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	4652      	mov	r2, sl
 800686c:	465b      	mov	r3, fp
 800686e:	9805      	ldr	r0, [sp, #20]
 8006870:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006874:	f7ff fbd6 	bl	8006024 <__d2b>
 8006878:	901a      	str	r0, [sp, #104]	@ 0x68
 800687a:	2800      	cmp	r0, #0
 800687c:	f43f aedf 	beq.w	800663e <_strtod_l+0x43e>
 8006880:	2101      	movs	r1, #1
 8006882:	9805      	ldr	r0, [sp, #20]
 8006884:	f7ff f938 	bl	8005af8 <__i2b>
 8006888:	4680      	mov	r8, r0
 800688a:	b948      	cbnz	r0, 80068a0 <_strtod_l+0x6a0>
 800688c:	f04f 0800 	mov.w	r8, #0
 8006890:	e6d5      	b.n	800663e <_strtod_l+0x43e>
 8006892:	f04f 32ff 	mov.w	r2, #4294967295
 8006896:	fa02 f303 	lsl.w	r3, r2, r3
 800689a:	ea03 0a0a 	and.w	sl, r3, sl
 800689e:	e7ad      	b.n	80067fc <_strtod_l+0x5fc>
 80068a0:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80068a2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80068a4:	2d00      	cmp	r5, #0
 80068a6:	bfab      	itete	ge
 80068a8:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80068aa:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80068ac:	18ef      	addge	r7, r5, r3
 80068ae:	1b5e      	sublt	r6, r3, r5
 80068b0:	9b08      	ldr	r3, [sp, #32]
 80068b2:	bfa8      	it	ge
 80068b4:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80068b6:	eba5 0503 	sub.w	r5, r5, r3
 80068ba:	4415      	add	r5, r2
 80068bc:	4b34      	ldr	r3, [pc, #208]	@ (8006990 <_strtod_l+0x790>)
 80068be:	f105 35ff 	add.w	r5, r5, #4294967295
 80068c2:	bfb8      	it	lt
 80068c4:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80068c6:	429d      	cmp	r5, r3
 80068c8:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80068cc:	da50      	bge.n	8006970 <_strtod_l+0x770>
 80068ce:	1b5b      	subs	r3, r3, r5
 80068d0:	2b1f      	cmp	r3, #31
 80068d2:	f04f 0101 	mov.w	r1, #1
 80068d6:	eba2 0203 	sub.w	r2, r2, r3
 80068da:	dc3d      	bgt.n	8006958 <_strtod_l+0x758>
 80068dc:	fa01 f303 	lsl.w	r3, r1, r3
 80068e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80068e2:	2300      	movs	r3, #0
 80068e4:	9310      	str	r3, [sp, #64]	@ 0x40
 80068e6:	18bd      	adds	r5, r7, r2
 80068e8:	9b08      	ldr	r3, [sp, #32]
 80068ea:	42af      	cmp	r7, r5
 80068ec:	4416      	add	r6, r2
 80068ee:	441e      	add	r6, r3
 80068f0:	463b      	mov	r3, r7
 80068f2:	bfa8      	it	ge
 80068f4:	462b      	movge	r3, r5
 80068f6:	42b3      	cmp	r3, r6
 80068f8:	bfa8      	it	ge
 80068fa:	4633      	movge	r3, r6
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	bfc2      	ittt	gt
 8006900:	1aed      	subgt	r5, r5, r3
 8006902:	1af6      	subgt	r6, r6, r3
 8006904:	1aff      	subgt	r7, r7, r3
 8006906:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006908:	2b00      	cmp	r3, #0
 800690a:	dd16      	ble.n	800693a <_strtod_l+0x73a>
 800690c:	4641      	mov	r1, r8
 800690e:	461a      	mov	r2, r3
 8006910:	9805      	ldr	r0, [sp, #20]
 8006912:	f7ff f9a9 	bl	8005c68 <__pow5mult>
 8006916:	4680      	mov	r8, r0
 8006918:	2800      	cmp	r0, #0
 800691a:	d0b7      	beq.n	800688c <_strtod_l+0x68c>
 800691c:	4601      	mov	r1, r0
 800691e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006920:	9805      	ldr	r0, [sp, #20]
 8006922:	f7ff f8ff 	bl	8005b24 <__multiply>
 8006926:	900a      	str	r0, [sp, #40]	@ 0x28
 8006928:	2800      	cmp	r0, #0
 800692a:	f43f ae88 	beq.w	800663e <_strtod_l+0x43e>
 800692e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006930:	9805      	ldr	r0, [sp, #20]
 8006932:	f7fe ffe3 	bl	80058fc <_Bfree>
 8006936:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006938:	931a      	str	r3, [sp, #104]	@ 0x68
 800693a:	2d00      	cmp	r5, #0
 800693c:	dc1d      	bgt.n	800697a <_strtod_l+0x77a>
 800693e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006940:	2b00      	cmp	r3, #0
 8006942:	dd27      	ble.n	8006994 <_strtod_l+0x794>
 8006944:	4649      	mov	r1, r9
 8006946:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006948:	9805      	ldr	r0, [sp, #20]
 800694a:	f7ff f98d 	bl	8005c68 <__pow5mult>
 800694e:	4681      	mov	r9, r0
 8006950:	bb00      	cbnz	r0, 8006994 <_strtod_l+0x794>
 8006952:	f04f 0900 	mov.w	r9, #0
 8006956:	e672      	b.n	800663e <_strtod_l+0x43e>
 8006958:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800695c:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006960:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006964:	35e2      	adds	r5, #226	@ 0xe2
 8006966:	fa01 f305 	lsl.w	r3, r1, r5
 800696a:	9310      	str	r3, [sp, #64]	@ 0x40
 800696c:	9113      	str	r1, [sp, #76]	@ 0x4c
 800696e:	e7ba      	b.n	80068e6 <_strtod_l+0x6e6>
 8006970:	2300      	movs	r3, #0
 8006972:	9310      	str	r3, [sp, #64]	@ 0x40
 8006974:	2301      	movs	r3, #1
 8006976:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006978:	e7b5      	b.n	80068e6 <_strtod_l+0x6e6>
 800697a:	462a      	mov	r2, r5
 800697c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800697e:	9805      	ldr	r0, [sp, #20]
 8006980:	f7ff f9cc 	bl	8005d1c <__lshift>
 8006984:	901a      	str	r0, [sp, #104]	@ 0x68
 8006986:	2800      	cmp	r0, #0
 8006988:	d1d9      	bne.n	800693e <_strtod_l+0x73e>
 800698a:	e658      	b.n	800663e <_strtod_l+0x43e>
 800698c:	080083b8 	.word	0x080083b8
 8006990:	fffffc02 	.word	0xfffffc02
 8006994:	2e00      	cmp	r6, #0
 8006996:	dd07      	ble.n	80069a8 <_strtod_l+0x7a8>
 8006998:	4649      	mov	r1, r9
 800699a:	4632      	mov	r2, r6
 800699c:	9805      	ldr	r0, [sp, #20]
 800699e:	f7ff f9bd 	bl	8005d1c <__lshift>
 80069a2:	4681      	mov	r9, r0
 80069a4:	2800      	cmp	r0, #0
 80069a6:	d0d4      	beq.n	8006952 <_strtod_l+0x752>
 80069a8:	2f00      	cmp	r7, #0
 80069aa:	dd08      	ble.n	80069be <_strtod_l+0x7be>
 80069ac:	4641      	mov	r1, r8
 80069ae:	463a      	mov	r2, r7
 80069b0:	9805      	ldr	r0, [sp, #20]
 80069b2:	f7ff f9b3 	bl	8005d1c <__lshift>
 80069b6:	4680      	mov	r8, r0
 80069b8:	2800      	cmp	r0, #0
 80069ba:	f43f ae40 	beq.w	800663e <_strtod_l+0x43e>
 80069be:	464a      	mov	r2, r9
 80069c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80069c2:	9805      	ldr	r0, [sp, #20]
 80069c4:	f7ff fa32 	bl	8005e2c <__mdiff>
 80069c8:	4604      	mov	r4, r0
 80069ca:	2800      	cmp	r0, #0
 80069cc:	f43f ae37 	beq.w	800663e <_strtod_l+0x43e>
 80069d0:	68c3      	ldr	r3, [r0, #12]
 80069d2:	4641      	mov	r1, r8
 80069d4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80069d6:	2300      	movs	r3, #0
 80069d8:	60c3      	str	r3, [r0, #12]
 80069da:	f7ff fa0b 	bl	8005df4 <__mcmp>
 80069de:	2800      	cmp	r0, #0
 80069e0:	da3d      	bge.n	8006a5e <_strtod_l+0x85e>
 80069e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80069e4:	ea53 030a 	orrs.w	r3, r3, sl
 80069e8:	d163      	bne.n	8006ab2 <_strtod_l+0x8b2>
 80069ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d15f      	bne.n	8006ab2 <_strtod_l+0x8b2>
 80069f2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80069f6:	0d1b      	lsrs	r3, r3, #20
 80069f8:	051b      	lsls	r3, r3, #20
 80069fa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80069fe:	d958      	bls.n	8006ab2 <_strtod_l+0x8b2>
 8006a00:	6963      	ldr	r3, [r4, #20]
 8006a02:	b913      	cbnz	r3, 8006a0a <_strtod_l+0x80a>
 8006a04:	6923      	ldr	r3, [r4, #16]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	dd53      	ble.n	8006ab2 <_strtod_l+0x8b2>
 8006a0a:	4621      	mov	r1, r4
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	9805      	ldr	r0, [sp, #20]
 8006a10:	f7ff f984 	bl	8005d1c <__lshift>
 8006a14:	4641      	mov	r1, r8
 8006a16:	4604      	mov	r4, r0
 8006a18:	f7ff f9ec 	bl	8005df4 <__mcmp>
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	dd48      	ble.n	8006ab2 <_strtod_l+0x8b2>
 8006a20:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006a24:	9a08      	ldr	r2, [sp, #32]
 8006a26:	0d1b      	lsrs	r3, r3, #20
 8006a28:	051b      	lsls	r3, r3, #20
 8006a2a:	2a00      	cmp	r2, #0
 8006a2c:	d062      	beq.n	8006af4 <_strtod_l+0x8f4>
 8006a2e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006a32:	d85f      	bhi.n	8006af4 <_strtod_l+0x8f4>
 8006a34:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006a38:	f67f ae94 	bls.w	8006764 <_strtod_l+0x564>
 8006a3c:	4650      	mov	r0, sl
 8006a3e:	4659      	mov	r1, fp
 8006a40:	4ba3      	ldr	r3, [pc, #652]	@ (8006cd0 <_strtod_l+0xad0>)
 8006a42:	2200      	movs	r2, #0
 8006a44:	f7f9 fd48 	bl	80004d8 <__aeabi_dmul>
 8006a48:	4ba2      	ldr	r3, [pc, #648]	@ (8006cd4 <_strtod_l+0xad4>)
 8006a4a:	4682      	mov	sl, r0
 8006a4c:	400b      	ands	r3, r1
 8006a4e:	468b      	mov	fp, r1
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f47f adff 	bne.w	8006654 <_strtod_l+0x454>
 8006a56:	2322      	movs	r3, #34	@ 0x22
 8006a58:	9a05      	ldr	r2, [sp, #20]
 8006a5a:	6013      	str	r3, [r2, #0]
 8006a5c:	e5fa      	b.n	8006654 <_strtod_l+0x454>
 8006a5e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006a62:	d165      	bne.n	8006b30 <_strtod_l+0x930>
 8006a64:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006a66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a6a:	b35a      	cbz	r2, 8006ac4 <_strtod_l+0x8c4>
 8006a6c:	4a9a      	ldr	r2, [pc, #616]	@ (8006cd8 <_strtod_l+0xad8>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d12b      	bne.n	8006aca <_strtod_l+0x8ca>
 8006a72:	9b08      	ldr	r3, [sp, #32]
 8006a74:	4651      	mov	r1, sl
 8006a76:	b303      	cbz	r3, 8006aba <_strtod_l+0x8ba>
 8006a78:	465a      	mov	r2, fp
 8006a7a:	4b96      	ldr	r3, [pc, #600]	@ (8006cd4 <_strtod_l+0xad4>)
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006a82:	f04f 32ff 	mov.w	r2, #4294967295
 8006a86:	d81b      	bhi.n	8006ac0 <_strtod_l+0x8c0>
 8006a88:	0d1b      	lsrs	r3, r3, #20
 8006a8a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a92:	4299      	cmp	r1, r3
 8006a94:	d119      	bne.n	8006aca <_strtod_l+0x8ca>
 8006a96:	4b91      	ldr	r3, [pc, #580]	@ (8006cdc <_strtod_l+0xadc>)
 8006a98:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d102      	bne.n	8006aa4 <_strtod_l+0x8a4>
 8006a9e:	3101      	adds	r1, #1
 8006aa0:	f43f adcd 	beq.w	800663e <_strtod_l+0x43e>
 8006aa4:	f04f 0a00 	mov.w	sl, #0
 8006aa8:	4b8a      	ldr	r3, [pc, #552]	@ (8006cd4 <_strtod_l+0xad4>)
 8006aaa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006aac:	401a      	ands	r2, r3
 8006aae:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006ab2:	9b08      	ldr	r3, [sp, #32]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1c1      	bne.n	8006a3c <_strtod_l+0x83c>
 8006ab8:	e5cc      	b.n	8006654 <_strtod_l+0x454>
 8006aba:	f04f 33ff 	mov.w	r3, #4294967295
 8006abe:	e7e8      	b.n	8006a92 <_strtod_l+0x892>
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	e7e6      	b.n	8006a92 <_strtod_l+0x892>
 8006ac4:	ea53 030a 	orrs.w	r3, r3, sl
 8006ac8:	d0aa      	beq.n	8006a20 <_strtod_l+0x820>
 8006aca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006acc:	b1db      	cbz	r3, 8006b06 <_strtod_l+0x906>
 8006ace:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ad0:	4213      	tst	r3, r2
 8006ad2:	d0ee      	beq.n	8006ab2 <_strtod_l+0x8b2>
 8006ad4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ad6:	4650      	mov	r0, sl
 8006ad8:	4659      	mov	r1, fp
 8006ada:	9a08      	ldr	r2, [sp, #32]
 8006adc:	b1bb      	cbz	r3, 8006b0e <_strtod_l+0x90e>
 8006ade:	f7ff fb6d 	bl	80061bc <sulp>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006aea:	f7f9 fb3f 	bl	800016c <__adddf3>
 8006aee:	4682      	mov	sl, r0
 8006af0:	468b      	mov	fp, r1
 8006af2:	e7de      	b.n	8006ab2 <_strtod_l+0x8b2>
 8006af4:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006af8:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006afc:	f04f 3aff 	mov.w	sl, #4294967295
 8006b00:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006b04:	e7d5      	b.n	8006ab2 <_strtod_l+0x8b2>
 8006b06:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006b08:	ea13 0f0a 	tst.w	r3, sl
 8006b0c:	e7e1      	b.n	8006ad2 <_strtod_l+0x8d2>
 8006b0e:	f7ff fb55 	bl	80061bc <sulp>
 8006b12:	4602      	mov	r2, r0
 8006b14:	460b      	mov	r3, r1
 8006b16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b1a:	f7f9 fb25 	bl	8000168 <__aeabi_dsub>
 8006b1e:	2200      	movs	r2, #0
 8006b20:	2300      	movs	r3, #0
 8006b22:	4682      	mov	sl, r0
 8006b24:	468b      	mov	fp, r1
 8006b26:	f7f9 ff3f 	bl	80009a8 <__aeabi_dcmpeq>
 8006b2a:	2800      	cmp	r0, #0
 8006b2c:	d0c1      	beq.n	8006ab2 <_strtod_l+0x8b2>
 8006b2e:	e619      	b.n	8006764 <_strtod_l+0x564>
 8006b30:	4641      	mov	r1, r8
 8006b32:	4620      	mov	r0, r4
 8006b34:	f7ff face 	bl	80060d4 <__ratio>
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006b3e:	4606      	mov	r6, r0
 8006b40:	460f      	mov	r7, r1
 8006b42:	f7f9 ff45 	bl	80009d0 <__aeabi_dcmple>
 8006b46:	2800      	cmp	r0, #0
 8006b48:	d06d      	beq.n	8006c26 <_strtod_l+0xa26>
 8006b4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d178      	bne.n	8006c42 <_strtod_l+0xa42>
 8006b50:	f1ba 0f00 	cmp.w	sl, #0
 8006b54:	d156      	bne.n	8006c04 <_strtod_l+0xa04>
 8006b56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d158      	bne.n	8006c12 <_strtod_l+0xa12>
 8006b60:	2200      	movs	r2, #0
 8006b62:	4630      	mov	r0, r6
 8006b64:	4639      	mov	r1, r7
 8006b66:	4b5e      	ldr	r3, [pc, #376]	@ (8006ce0 <_strtod_l+0xae0>)
 8006b68:	f7f9 ff28 	bl	80009bc <__aeabi_dcmplt>
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	d157      	bne.n	8006c20 <_strtod_l+0xa20>
 8006b70:	4630      	mov	r0, r6
 8006b72:	4639      	mov	r1, r7
 8006b74:	2200      	movs	r2, #0
 8006b76:	4b5b      	ldr	r3, [pc, #364]	@ (8006ce4 <_strtod_l+0xae4>)
 8006b78:	f7f9 fcae 	bl	80004d8 <__aeabi_dmul>
 8006b7c:	4606      	mov	r6, r0
 8006b7e:	460f      	mov	r7, r1
 8006b80:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006b84:	9606      	str	r6, [sp, #24]
 8006b86:	9307      	str	r3, [sp, #28]
 8006b88:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b8c:	4d51      	ldr	r5, [pc, #324]	@ (8006cd4 <_strtod_l+0xad4>)
 8006b8e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006b92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b94:	401d      	ands	r5, r3
 8006b96:	4b54      	ldr	r3, [pc, #336]	@ (8006ce8 <_strtod_l+0xae8>)
 8006b98:	429d      	cmp	r5, r3
 8006b9a:	f040 80ab 	bne.w	8006cf4 <_strtod_l+0xaf4>
 8006b9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ba0:	4650      	mov	r0, sl
 8006ba2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006ba6:	4659      	mov	r1, fp
 8006ba8:	f7ff f9d4 	bl	8005f54 <__ulp>
 8006bac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006bb0:	f7f9 fc92 	bl	80004d8 <__aeabi_dmul>
 8006bb4:	4652      	mov	r2, sl
 8006bb6:	465b      	mov	r3, fp
 8006bb8:	f7f9 fad8 	bl	800016c <__adddf3>
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	4945      	ldr	r1, [pc, #276]	@ (8006cd4 <_strtod_l+0xad4>)
 8006bc0:	4a4a      	ldr	r2, [pc, #296]	@ (8006cec <_strtod_l+0xaec>)
 8006bc2:	4019      	ands	r1, r3
 8006bc4:	4291      	cmp	r1, r2
 8006bc6:	4682      	mov	sl, r0
 8006bc8:	d942      	bls.n	8006c50 <_strtod_l+0xa50>
 8006bca:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006bcc:	4b43      	ldr	r3, [pc, #268]	@ (8006cdc <_strtod_l+0xadc>)
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d103      	bne.n	8006bda <_strtod_l+0x9da>
 8006bd2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	f43f ad32 	beq.w	800663e <_strtod_l+0x43e>
 8006bda:	f04f 3aff 	mov.w	sl, #4294967295
 8006bde:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8006cdc <_strtod_l+0xadc>
 8006be2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006be4:	9805      	ldr	r0, [sp, #20]
 8006be6:	f7fe fe89 	bl	80058fc <_Bfree>
 8006bea:	4649      	mov	r1, r9
 8006bec:	9805      	ldr	r0, [sp, #20]
 8006bee:	f7fe fe85 	bl	80058fc <_Bfree>
 8006bf2:	4641      	mov	r1, r8
 8006bf4:	9805      	ldr	r0, [sp, #20]
 8006bf6:	f7fe fe81 	bl	80058fc <_Bfree>
 8006bfa:	4621      	mov	r1, r4
 8006bfc:	9805      	ldr	r0, [sp, #20]
 8006bfe:	f7fe fe7d 	bl	80058fc <_Bfree>
 8006c02:	e61c      	b.n	800683e <_strtod_l+0x63e>
 8006c04:	f1ba 0f01 	cmp.w	sl, #1
 8006c08:	d103      	bne.n	8006c12 <_strtod_l+0xa12>
 8006c0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	f43f ada9 	beq.w	8006764 <_strtod_l+0x564>
 8006c12:	2200      	movs	r2, #0
 8006c14:	4b36      	ldr	r3, [pc, #216]	@ (8006cf0 <_strtod_l+0xaf0>)
 8006c16:	2600      	movs	r6, #0
 8006c18:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006c1c:	4f30      	ldr	r7, [pc, #192]	@ (8006ce0 <_strtod_l+0xae0>)
 8006c1e:	e7b3      	b.n	8006b88 <_strtod_l+0x988>
 8006c20:	2600      	movs	r6, #0
 8006c22:	4f30      	ldr	r7, [pc, #192]	@ (8006ce4 <_strtod_l+0xae4>)
 8006c24:	e7ac      	b.n	8006b80 <_strtod_l+0x980>
 8006c26:	4630      	mov	r0, r6
 8006c28:	4639      	mov	r1, r7
 8006c2a:	4b2e      	ldr	r3, [pc, #184]	@ (8006ce4 <_strtod_l+0xae4>)
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f7f9 fc53 	bl	80004d8 <__aeabi_dmul>
 8006c32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c34:	4606      	mov	r6, r0
 8006c36:	460f      	mov	r7, r1
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d0a1      	beq.n	8006b80 <_strtod_l+0x980>
 8006c3c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006c40:	e7a2      	b.n	8006b88 <_strtod_l+0x988>
 8006c42:	2200      	movs	r2, #0
 8006c44:	4b26      	ldr	r3, [pc, #152]	@ (8006ce0 <_strtod_l+0xae0>)
 8006c46:	4616      	mov	r6, r2
 8006c48:	461f      	mov	r7, r3
 8006c4a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006c4e:	e79b      	b.n	8006b88 <_strtod_l+0x988>
 8006c50:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006c54:	9b08      	ldr	r3, [sp, #32]
 8006c56:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1c1      	bne.n	8006be2 <_strtod_l+0x9e2>
 8006c5e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006c62:	0d1b      	lsrs	r3, r3, #20
 8006c64:	051b      	lsls	r3, r3, #20
 8006c66:	429d      	cmp	r5, r3
 8006c68:	d1bb      	bne.n	8006be2 <_strtod_l+0x9e2>
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	4639      	mov	r1, r7
 8006c6e:	f7f9 ff7b 	bl	8000b68 <__aeabi_d2lz>
 8006c72:	f7f9 fc03 	bl	800047c <__aeabi_l2d>
 8006c76:	4602      	mov	r2, r0
 8006c78:	460b      	mov	r3, r1
 8006c7a:	4630      	mov	r0, r6
 8006c7c:	4639      	mov	r1, r7
 8006c7e:	f7f9 fa73 	bl	8000168 <__aeabi_dsub>
 8006c82:	460b      	mov	r3, r1
 8006c84:	4602      	mov	r2, r0
 8006c86:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006c8a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006c8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c90:	ea46 060a 	orr.w	r6, r6, sl
 8006c94:	431e      	orrs	r6, r3
 8006c96:	d06a      	beq.n	8006d6e <_strtod_l+0xb6e>
 8006c98:	a309      	add	r3, pc, #36	@ (adr r3, 8006cc0 <_strtod_l+0xac0>)
 8006c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9e:	f7f9 fe8d 	bl	80009bc <__aeabi_dcmplt>
 8006ca2:	2800      	cmp	r0, #0
 8006ca4:	f47f acd6 	bne.w	8006654 <_strtod_l+0x454>
 8006ca8:	a307      	add	r3, pc, #28	@ (adr r3, 8006cc8 <_strtod_l+0xac8>)
 8006caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006cb2:	f7f9 fea1 	bl	80009f8 <__aeabi_dcmpgt>
 8006cb6:	2800      	cmp	r0, #0
 8006cb8:	d093      	beq.n	8006be2 <_strtod_l+0x9e2>
 8006cba:	e4cb      	b.n	8006654 <_strtod_l+0x454>
 8006cbc:	f3af 8000 	nop.w
 8006cc0:	94a03595 	.word	0x94a03595
 8006cc4:	3fdfffff 	.word	0x3fdfffff
 8006cc8:	35afe535 	.word	0x35afe535
 8006ccc:	3fe00000 	.word	0x3fe00000
 8006cd0:	39500000 	.word	0x39500000
 8006cd4:	7ff00000 	.word	0x7ff00000
 8006cd8:	000fffff 	.word	0x000fffff
 8006cdc:	7fefffff 	.word	0x7fefffff
 8006ce0:	3ff00000 	.word	0x3ff00000
 8006ce4:	3fe00000 	.word	0x3fe00000
 8006ce8:	7fe00000 	.word	0x7fe00000
 8006cec:	7c9fffff 	.word	0x7c9fffff
 8006cf0:	bff00000 	.word	0xbff00000
 8006cf4:	9b08      	ldr	r3, [sp, #32]
 8006cf6:	b323      	cbz	r3, 8006d42 <_strtod_l+0xb42>
 8006cf8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006cfc:	d821      	bhi.n	8006d42 <_strtod_l+0xb42>
 8006cfe:	a328      	add	r3, pc, #160	@ (adr r3, 8006da0 <_strtod_l+0xba0>)
 8006d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d04:	4630      	mov	r0, r6
 8006d06:	4639      	mov	r1, r7
 8006d08:	f7f9 fe62 	bl	80009d0 <__aeabi_dcmple>
 8006d0c:	b1a0      	cbz	r0, 8006d38 <_strtod_l+0xb38>
 8006d0e:	4639      	mov	r1, r7
 8006d10:	4630      	mov	r0, r6
 8006d12:	f7f9 feb9 	bl	8000a88 <__aeabi_d2uiz>
 8006d16:	2801      	cmp	r0, #1
 8006d18:	bf38      	it	cc
 8006d1a:	2001      	movcc	r0, #1
 8006d1c:	f7f9 fb62 	bl	80003e4 <__aeabi_ui2d>
 8006d20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d22:	4606      	mov	r6, r0
 8006d24:	460f      	mov	r7, r1
 8006d26:	b9fb      	cbnz	r3, 8006d68 <_strtod_l+0xb68>
 8006d28:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006d2c:	9014      	str	r0, [sp, #80]	@ 0x50
 8006d2e:	9315      	str	r3, [sp, #84]	@ 0x54
 8006d30:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006d34:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006d38:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006d3a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006d3e:	1b5b      	subs	r3, r3, r5
 8006d40:	9311      	str	r3, [sp, #68]	@ 0x44
 8006d42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d46:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006d4a:	f7ff f903 	bl	8005f54 <__ulp>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	460b      	mov	r3, r1
 8006d52:	4650      	mov	r0, sl
 8006d54:	4659      	mov	r1, fp
 8006d56:	f7f9 fbbf 	bl	80004d8 <__aeabi_dmul>
 8006d5a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006d5e:	f7f9 fa05 	bl	800016c <__adddf3>
 8006d62:	4682      	mov	sl, r0
 8006d64:	468b      	mov	fp, r1
 8006d66:	e775      	b.n	8006c54 <_strtod_l+0xa54>
 8006d68:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006d6c:	e7e0      	b.n	8006d30 <_strtod_l+0xb30>
 8006d6e:	a30e      	add	r3, pc, #56	@ (adr r3, 8006da8 <_strtod_l+0xba8>)
 8006d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d74:	f7f9 fe22 	bl	80009bc <__aeabi_dcmplt>
 8006d78:	e79d      	b.n	8006cb6 <_strtod_l+0xab6>
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	930e      	str	r3, [sp, #56]	@ 0x38
 8006d7e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d80:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006d82:	6013      	str	r3, [r2, #0]
 8006d84:	f7ff ba79 	b.w	800627a <_strtod_l+0x7a>
 8006d88:	2a65      	cmp	r2, #101	@ 0x65
 8006d8a:	f43f ab72 	beq.w	8006472 <_strtod_l+0x272>
 8006d8e:	2a45      	cmp	r2, #69	@ 0x45
 8006d90:	f43f ab6f 	beq.w	8006472 <_strtod_l+0x272>
 8006d94:	2301      	movs	r3, #1
 8006d96:	f7ff bbaa 	b.w	80064ee <_strtod_l+0x2ee>
 8006d9a:	bf00      	nop
 8006d9c:	f3af 8000 	nop.w
 8006da0:	ffc00000 	.word	0xffc00000
 8006da4:	41dfffff 	.word	0x41dfffff
 8006da8:	94a03595 	.word	0x94a03595
 8006dac:	3fcfffff 	.word	0x3fcfffff

08006db0 <_strtod_r>:
 8006db0:	4b01      	ldr	r3, [pc, #4]	@ (8006db8 <_strtod_r+0x8>)
 8006db2:	f7ff ba25 	b.w	8006200 <_strtod_l>
 8006db6:	bf00      	nop
 8006db8:	20000068 	.word	0x20000068

08006dbc <_strtol_l.isra.0>:
 8006dbc:	2b24      	cmp	r3, #36	@ 0x24
 8006dbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dc2:	4686      	mov	lr, r0
 8006dc4:	4690      	mov	r8, r2
 8006dc6:	d801      	bhi.n	8006dcc <_strtol_l.isra.0+0x10>
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d106      	bne.n	8006dda <_strtol_l.isra.0+0x1e>
 8006dcc:	f7fd fdac 	bl	8004928 <__errno>
 8006dd0:	2316      	movs	r3, #22
 8006dd2:	6003      	str	r3, [r0, #0]
 8006dd4:	2000      	movs	r0, #0
 8006dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dda:	460d      	mov	r5, r1
 8006ddc:	4833      	ldr	r0, [pc, #204]	@ (8006eac <_strtol_l.isra.0+0xf0>)
 8006dde:	462a      	mov	r2, r5
 8006de0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006de4:	5d06      	ldrb	r6, [r0, r4]
 8006de6:	f016 0608 	ands.w	r6, r6, #8
 8006dea:	d1f8      	bne.n	8006dde <_strtol_l.isra.0+0x22>
 8006dec:	2c2d      	cmp	r4, #45	@ 0x2d
 8006dee:	d110      	bne.n	8006e12 <_strtol_l.isra.0+0x56>
 8006df0:	2601      	movs	r6, #1
 8006df2:	782c      	ldrb	r4, [r5, #0]
 8006df4:	1c95      	adds	r5, r2, #2
 8006df6:	f033 0210 	bics.w	r2, r3, #16
 8006dfa:	d115      	bne.n	8006e28 <_strtol_l.isra.0+0x6c>
 8006dfc:	2c30      	cmp	r4, #48	@ 0x30
 8006dfe:	d10d      	bne.n	8006e1c <_strtol_l.isra.0+0x60>
 8006e00:	782a      	ldrb	r2, [r5, #0]
 8006e02:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006e06:	2a58      	cmp	r2, #88	@ 0x58
 8006e08:	d108      	bne.n	8006e1c <_strtol_l.isra.0+0x60>
 8006e0a:	786c      	ldrb	r4, [r5, #1]
 8006e0c:	3502      	adds	r5, #2
 8006e0e:	2310      	movs	r3, #16
 8006e10:	e00a      	b.n	8006e28 <_strtol_l.isra.0+0x6c>
 8006e12:	2c2b      	cmp	r4, #43	@ 0x2b
 8006e14:	bf04      	itt	eq
 8006e16:	782c      	ldrbeq	r4, [r5, #0]
 8006e18:	1c95      	addeq	r5, r2, #2
 8006e1a:	e7ec      	b.n	8006df6 <_strtol_l.isra.0+0x3a>
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1f6      	bne.n	8006e0e <_strtol_l.isra.0+0x52>
 8006e20:	2c30      	cmp	r4, #48	@ 0x30
 8006e22:	bf14      	ite	ne
 8006e24:	230a      	movne	r3, #10
 8006e26:	2308      	moveq	r3, #8
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006e2e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006e32:	fbbc f9f3 	udiv	r9, ip, r3
 8006e36:	4610      	mov	r0, r2
 8006e38:	fb03 ca19 	mls	sl, r3, r9, ip
 8006e3c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006e40:	2f09      	cmp	r7, #9
 8006e42:	d80f      	bhi.n	8006e64 <_strtol_l.isra.0+0xa8>
 8006e44:	463c      	mov	r4, r7
 8006e46:	42a3      	cmp	r3, r4
 8006e48:	dd1b      	ble.n	8006e82 <_strtol_l.isra.0+0xc6>
 8006e4a:	1c57      	adds	r7, r2, #1
 8006e4c:	d007      	beq.n	8006e5e <_strtol_l.isra.0+0xa2>
 8006e4e:	4581      	cmp	r9, r0
 8006e50:	d314      	bcc.n	8006e7c <_strtol_l.isra.0+0xc0>
 8006e52:	d101      	bne.n	8006e58 <_strtol_l.isra.0+0x9c>
 8006e54:	45a2      	cmp	sl, r4
 8006e56:	db11      	blt.n	8006e7c <_strtol_l.isra.0+0xc0>
 8006e58:	2201      	movs	r2, #1
 8006e5a:	fb00 4003 	mla	r0, r0, r3, r4
 8006e5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e62:	e7eb      	b.n	8006e3c <_strtol_l.isra.0+0x80>
 8006e64:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006e68:	2f19      	cmp	r7, #25
 8006e6a:	d801      	bhi.n	8006e70 <_strtol_l.isra.0+0xb4>
 8006e6c:	3c37      	subs	r4, #55	@ 0x37
 8006e6e:	e7ea      	b.n	8006e46 <_strtol_l.isra.0+0x8a>
 8006e70:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006e74:	2f19      	cmp	r7, #25
 8006e76:	d804      	bhi.n	8006e82 <_strtol_l.isra.0+0xc6>
 8006e78:	3c57      	subs	r4, #87	@ 0x57
 8006e7a:	e7e4      	b.n	8006e46 <_strtol_l.isra.0+0x8a>
 8006e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e80:	e7ed      	b.n	8006e5e <_strtol_l.isra.0+0xa2>
 8006e82:	1c53      	adds	r3, r2, #1
 8006e84:	d108      	bne.n	8006e98 <_strtol_l.isra.0+0xdc>
 8006e86:	2322      	movs	r3, #34	@ 0x22
 8006e88:	4660      	mov	r0, ip
 8006e8a:	f8ce 3000 	str.w	r3, [lr]
 8006e8e:	f1b8 0f00 	cmp.w	r8, #0
 8006e92:	d0a0      	beq.n	8006dd6 <_strtol_l.isra.0+0x1a>
 8006e94:	1e69      	subs	r1, r5, #1
 8006e96:	e006      	b.n	8006ea6 <_strtol_l.isra.0+0xea>
 8006e98:	b106      	cbz	r6, 8006e9c <_strtol_l.isra.0+0xe0>
 8006e9a:	4240      	negs	r0, r0
 8006e9c:	f1b8 0f00 	cmp.w	r8, #0
 8006ea0:	d099      	beq.n	8006dd6 <_strtol_l.isra.0+0x1a>
 8006ea2:	2a00      	cmp	r2, #0
 8006ea4:	d1f6      	bne.n	8006e94 <_strtol_l.isra.0+0xd8>
 8006ea6:	f8c8 1000 	str.w	r1, [r8]
 8006eaa:	e794      	b.n	8006dd6 <_strtol_l.isra.0+0x1a>
 8006eac:	080083e1 	.word	0x080083e1

08006eb0 <_strtol_r>:
 8006eb0:	f7ff bf84 	b.w	8006dbc <_strtol_l.isra.0>

08006eb4 <__ssputs_r>:
 8006eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eb8:	461f      	mov	r7, r3
 8006eba:	688e      	ldr	r6, [r1, #8]
 8006ebc:	4682      	mov	sl, r0
 8006ebe:	42be      	cmp	r6, r7
 8006ec0:	460c      	mov	r4, r1
 8006ec2:	4690      	mov	r8, r2
 8006ec4:	680b      	ldr	r3, [r1, #0]
 8006ec6:	d82d      	bhi.n	8006f24 <__ssputs_r+0x70>
 8006ec8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ecc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006ed0:	d026      	beq.n	8006f20 <__ssputs_r+0x6c>
 8006ed2:	6965      	ldr	r5, [r4, #20]
 8006ed4:	6909      	ldr	r1, [r1, #16]
 8006ed6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006eda:	eba3 0901 	sub.w	r9, r3, r1
 8006ede:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ee2:	1c7b      	adds	r3, r7, #1
 8006ee4:	444b      	add	r3, r9
 8006ee6:	106d      	asrs	r5, r5, #1
 8006ee8:	429d      	cmp	r5, r3
 8006eea:	bf38      	it	cc
 8006eec:	461d      	movcc	r5, r3
 8006eee:	0553      	lsls	r3, r2, #21
 8006ef0:	d527      	bpl.n	8006f42 <__ssputs_r+0x8e>
 8006ef2:	4629      	mov	r1, r5
 8006ef4:	f7fe fc36 	bl	8005764 <_malloc_r>
 8006ef8:	4606      	mov	r6, r0
 8006efa:	b360      	cbz	r0, 8006f56 <__ssputs_r+0xa2>
 8006efc:	464a      	mov	r2, r9
 8006efe:	6921      	ldr	r1, [r4, #16]
 8006f00:	f7fd fd4d 	bl	800499e <memcpy>
 8006f04:	89a3      	ldrh	r3, [r4, #12]
 8006f06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006f0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f0e:	81a3      	strh	r3, [r4, #12]
 8006f10:	6126      	str	r6, [r4, #16]
 8006f12:	444e      	add	r6, r9
 8006f14:	6026      	str	r6, [r4, #0]
 8006f16:	463e      	mov	r6, r7
 8006f18:	6165      	str	r5, [r4, #20]
 8006f1a:	eba5 0509 	sub.w	r5, r5, r9
 8006f1e:	60a5      	str	r5, [r4, #8]
 8006f20:	42be      	cmp	r6, r7
 8006f22:	d900      	bls.n	8006f26 <__ssputs_r+0x72>
 8006f24:	463e      	mov	r6, r7
 8006f26:	4632      	mov	r2, r6
 8006f28:	4641      	mov	r1, r8
 8006f2a:	6820      	ldr	r0, [r4, #0]
 8006f2c:	f000 f9c2 	bl	80072b4 <memmove>
 8006f30:	2000      	movs	r0, #0
 8006f32:	68a3      	ldr	r3, [r4, #8]
 8006f34:	1b9b      	subs	r3, r3, r6
 8006f36:	60a3      	str	r3, [r4, #8]
 8006f38:	6823      	ldr	r3, [r4, #0]
 8006f3a:	4433      	add	r3, r6
 8006f3c:	6023      	str	r3, [r4, #0]
 8006f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f42:	462a      	mov	r2, r5
 8006f44:	f000 fd75 	bl	8007a32 <_realloc_r>
 8006f48:	4606      	mov	r6, r0
 8006f4a:	2800      	cmp	r0, #0
 8006f4c:	d1e0      	bne.n	8006f10 <__ssputs_r+0x5c>
 8006f4e:	4650      	mov	r0, sl
 8006f50:	6921      	ldr	r1, [r4, #16]
 8006f52:	f7fe fb95 	bl	8005680 <_free_r>
 8006f56:	230c      	movs	r3, #12
 8006f58:	f8ca 3000 	str.w	r3, [sl]
 8006f5c:	89a3      	ldrh	r3, [r4, #12]
 8006f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f66:	81a3      	strh	r3, [r4, #12]
 8006f68:	e7e9      	b.n	8006f3e <__ssputs_r+0x8a>
	...

08006f6c <_svfiprintf_r>:
 8006f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f70:	4698      	mov	r8, r3
 8006f72:	898b      	ldrh	r3, [r1, #12]
 8006f74:	4607      	mov	r7, r0
 8006f76:	061b      	lsls	r3, r3, #24
 8006f78:	460d      	mov	r5, r1
 8006f7a:	4614      	mov	r4, r2
 8006f7c:	b09d      	sub	sp, #116	@ 0x74
 8006f7e:	d510      	bpl.n	8006fa2 <_svfiprintf_r+0x36>
 8006f80:	690b      	ldr	r3, [r1, #16]
 8006f82:	b973      	cbnz	r3, 8006fa2 <_svfiprintf_r+0x36>
 8006f84:	2140      	movs	r1, #64	@ 0x40
 8006f86:	f7fe fbed 	bl	8005764 <_malloc_r>
 8006f8a:	6028      	str	r0, [r5, #0]
 8006f8c:	6128      	str	r0, [r5, #16]
 8006f8e:	b930      	cbnz	r0, 8006f9e <_svfiprintf_r+0x32>
 8006f90:	230c      	movs	r3, #12
 8006f92:	603b      	str	r3, [r7, #0]
 8006f94:	f04f 30ff 	mov.w	r0, #4294967295
 8006f98:	b01d      	add	sp, #116	@ 0x74
 8006f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f9e:	2340      	movs	r3, #64	@ 0x40
 8006fa0:	616b      	str	r3, [r5, #20]
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fa6:	2320      	movs	r3, #32
 8006fa8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006fac:	2330      	movs	r3, #48	@ 0x30
 8006fae:	f04f 0901 	mov.w	r9, #1
 8006fb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fb6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007150 <_svfiprintf_r+0x1e4>
 8006fba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006fbe:	4623      	mov	r3, r4
 8006fc0:	469a      	mov	sl, r3
 8006fc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fc6:	b10a      	cbz	r2, 8006fcc <_svfiprintf_r+0x60>
 8006fc8:	2a25      	cmp	r2, #37	@ 0x25
 8006fca:	d1f9      	bne.n	8006fc0 <_svfiprintf_r+0x54>
 8006fcc:	ebba 0b04 	subs.w	fp, sl, r4
 8006fd0:	d00b      	beq.n	8006fea <_svfiprintf_r+0x7e>
 8006fd2:	465b      	mov	r3, fp
 8006fd4:	4622      	mov	r2, r4
 8006fd6:	4629      	mov	r1, r5
 8006fd8:	4638      	mov	r0, r7
 8006fda:	f7ff ff6b 	bl	8006eb4 <__ssputs_r>
 8006fde:	3001      	adds	r0, #1
 8006fe0:	f000 80a7 	beq.w	8007132 <_svfiprintf_r+0x1c6>
 8006fe4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fe6:	445a      	add	r2, fp
 8006fe8:	9209      	str	r2, [sp, #36]	@ 0x24
 8006fea:	f89a 3000 	ldrb.w	r3, [sl]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f000 809f 	beq.w	8007132 <_svfiprintf_r+0x1c6>
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8006ffa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ffe:	f10a 0a01 	add.w	sl, sl, #1
 8007002:	9304      	str	r3, [sp, #16]
 8007004:	9307      	str	r3, [sp, #28]
 8007006:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800700a:	931a      	str	r3, [sp, #104]	@ 0x68
 800700c:	4654      	mov	r4, sl
 800700e:	2205      	movs	r2, #5
 8007010:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007014:	484e      	ldr	r0, [pc, #312]	@ (8007150 <_svfiprintf_r+0x1e4>)
 8007016:	f7fd fcb4 	bl	8004982 <memchr>
 800701a:	9a04      	ldr	r2, [sp, #16]
 800701c:	b9d8      	cbnz	r0, 8007056 <_svfiprintf_r+0xea>
 800701e:	06d0      	lsls	r0, r2, #27
 8007020:	bf44      	itt	mi
 8007022:	2320      	movmi	r3, #32
 8007024:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007028:	0711      	lsls	r1, r2, #28
 800702a:	bf44      	itt	mi
 800702c:	232b      	movmi	r3, #43	@ 0x2b
 800702e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007032:	f89a 3000 	ldrb.w	r3, [sl]
 8007036:	2b2a      	cmp	r3, #42	@ 0x2a
 8007038:	d015      	beq.n	8007066 <_svfiprintf_r+0xfa>
 800703a:	4654      	mov	r4, sl
 800703c:	2000      	movs	r0, #0
 800703e:	f04f 0c0a 	mov.w	ip, #10
 8007042:	9a07      	ldr	r2, [sp, #28]
 8007044:	4621      	mov	r1, r4
 8007046:	f811 3b01 	ldrb.w	r3, [r1], #1
 800704a:	3b30      	subs	r3, #48	@ 0x30
 800704c:	2b09      	cmp	r3, #9
 800704e:	d94b      	bls.n	80070e8 <_svfiprintf_r+0x17c>
 8007050:	b1b0      	cbz	r0, 8007080 <_svfiprintf_r+0x114>
 8007052:	9207      	str	r2, [sp, #28]
 8007054:	e014      	b.n	8007080 <_svfiprintf_r+0x114>
 8007056:	eba0 0308 	sub.w	r3, r0, r8
 800705a:	fa09 f303 	lsl.w	r3, r9, r3
 800705e:	4313      	orrs	r3, r2
 8007060:	46a2      	mov	sl, r4
 8007062:	9304      	str	r3, [sp, #16]
 8007064:	e7d2      	b.n	800700c <_svfiprintf_r+0xa0>
 8007066:	9b03      	ldr	r3, [sp, #12]
 8007068:	1d19      	adds	r1, r3, #4
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	9103      	str	r1, [sp, #12]
 800706e:	2b00      	cmp	r3, #0
 8007070:	bfbb      	ittet	lt
 8007072:	425b      	neglt	r3, r3
 8007074:	f042 0202 	orrlt.w	r2, r2, #2
 8007078:	9307      	strge	r3, [sp, #28]
 800707a:	9307      	strlt	r3, [sp, #28]
 800707c:	bfb8      	it	lt
 800707e:	9204      	strlt	r2, [sp, #16]
 8007080:	7823      	ldrb	r3, [r4, #0]
 8007082:	2b2e      	cmp	r3, #46	@ 0x2e
 8007084:	d10a      	bne.n	800709c <_svfiprintf_r+0x130>
 8007086:	7863      	ldrb	r3, [r4, #1]
 8007088:	2b2a      	cmp	r3, #42	@ 0x2a
 800708a:	d132      	bne.n	80070f2 <_svfiprintf_r+0x186>
 800708c:	9b03      	ldr	r3, [sp, #12]
 800708e:	3402      	adds	r4, #2
 8007090:	1d1a      	adds	r2, r3, #4
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	9203      	str	r2, [sp, #12]
 8007096:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800709a:	9305      	str	r3, [sp, #20]
 800709c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007154 <_svfiprintf_r+0x1e8>
 80070a0:	2203      	movs	r2, #3
 80070a2:	4650      	mov	r0, sl
 80070a4:	7821      	ldrb	r1, [r4, #0]
 80070a6:	f7fd fc6c 	bl	8004982 <memchr>
 80070aa:	b138      	cbz	r0, 80070bc <_svfiprintf_r+0x150>
 80070ac:	2240      	movs	r2, #64	@ 0x40
 80070ae:	9b04      	ldr	r3, [sp, #16]
 80070b0:	eba0 000a 	sub.w	r0, r0, sl
 80070b4:	4082      	lsls	r2, r0
 80070b6:	4313      	orrs	r3, r2
 80070b8:	3401      	adds	r4, #1
 80070ba:	9304      	str	r3, [sp, #16]
 80070bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070c0:	2206      	movs	r2, #6
 80070c2:	4825      	ldr	r0, [pc, #148]	@ (8007158 <_svfiprintf_r+0x1ec>)
 80070c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80070c8:	f7fd fc5b 	bl	8004982 <memchr>
 80070cc:	2800      	cmp	r0, #0
 80070ce:	d036      	beq.n	800713e <_svfiprintf_r+0x1d2>
 80070d0:	4b22      	ldr	r3, [pc, #136]	@ (800715c <_svfiprintf_r+0x1f0>)
 80070d2:	bb1b      	cbnz	r3, 800711c <_svfiprintf_r+0x1b0>
 80070d4:	9b03      	ldr	r3, [sp, #12]
 80070d6:	3307      	adds	r3, #7
 80070d8:	f023 0307 	bic.w	r3, r3, #7
 80070dc:	3308      	adds	r3, #8
 80070de:	9303      	str	r3, [sp, #12]
 80070e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070e2:	4433      	add	r3, r6
 80070e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80070e6:	e76a      	b.n	8006fbe <_svfiprintf_r+0x52>
 80070e8:	460c      	mov	r4, r1
 80070ea:	2001      	movs	r0, #1
 80070ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80070f0:	e7a8      	b.n	8007044 <_svfiprintf_r+0xd8>
 80070f2:	2300      	movs	r3, #0
 80070f4:	f04f 0c0a 	mov.w	ip, #10
 80070f8:	4619      	mov	r1, r3
 80070fa:	3401      	adds	r4, #1
 80070fc:	9305      	str	r3, [sp, #20]
 80070fe:	4620      	mov	r0, r4
 8007100:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007104:	3a30      	subs	r2, #48	@ 0x30
 8007106:	2a09      	cmp	r2, #9
 8007108:	d903      	bls.n	8007112 <_svfiprintf_r+0x1a6>
 800710a:	2b00      	cmp	r3, #0
 800710c:	d0c6      	beq.n	800709c <_svfiprintf_r+0x130>
 800710e:	9105      	str	r1, [sp, #20]
 8007110:	e7c4      	b.n	800709c <_svfiprintf_r+0x130>
 8007112:	4604      	mov	r4, r0
 8007114:	2301      	movs	r3, #1
 8007116:	fb0c 2101 	mla	r1, ip, r1, r2
 800711a:	e7f0      	b.n	80070fe <_svfiprintf_r+0x192>
 800711c:	ab03      	add	r3, sp, #12
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	462a      	mov	r2, r5
 8007122:	4638      	mov	r0, r7
 8007124:	4b0e      	ldr	r3, [pc, #56]	@ (8007160 <_svfiprintf_r+0x1f4>)
 8007126:	a904      	add	r1, sp, #16
 8007128:	f7fc fcbe 	bl	8003aa8 <_printf_float>
 800712c:	1c42      	adds	r2, r0, #1
 800712e:	4606      	mov	r6, r0
 8007130:	d1d6      	bne.n	80070e0 <_svfiprintf_r+0x174>
 8007132:	89ab      	ldrh	r3, [r5, #12]
 8007134:	065b      	lsls	r3, r3, #25
 8007136:	f53f af2d 	bmi.w	8006f94 <_svfiprintf_r+0x28>
 800713a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800713c:	e72c      	b.n	8006f98 <_svfiprintf_r+0x2c>
 800713e:	ab03      	add	r3, sp, #12
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	462a      	mov	r2, r5
 8007144:	4638      	mov	r0, r7
 8007146:	4b06      	ldr	r3, [pc, #24]	@ (8007160 <_svfiprintf_r+0x1f4>)
 8007148:	a904      	add	r1, sp, #16
 800714a:	f7fc ff4b 	bl	8003fe4 <_printf_i>
 800714e:	e7ed      	b.n	800712c <_svfiprintf_r+0x1c0>
 8007150:	080081db 	.word	0x080081db
 8007154:	080081e1 	.word	0x080081e1
 8007158:	080081e5 	.word	0x080081e5
 800715c:	08003aa9 	.word	0x08003aa9
 8007160:	08006eb5 	.word	0x08006eb5

08007164 <__sflush_r>:
 8007164:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800716a:	0716      	lsls	r6, r2, #28
 800716c:	4605      	mov	r5, r0
 800716e:	460c      	mov	r4, r1
 8007170:	d454      	bmi.n	800721c <__sflush_r+0xb8>
 8007172:	684b      	ldr	r3, [r1, #4]
 8007174:	2b00      	cmp	r3, #0
 8007176:	dc02      	bgt.n	800717e <__sflush_r+0x1a>
 8007178:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800717a:	2b00      	cmp	r3, #0
 800717c:	dd48      	ble.n	8007210 <__sflush_r+0xac>
 800717e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007180:	2e00      	cmp	r6, #0
 8007182:	d045      	beq.n	8007210 <__sflush_r+0xac>
 8007184:	2300      	movs	r3, #0
 8007186:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800718a:	682f      	ldr	r7, [r5, #0]
 800718c:	6a21      	ldr	r1, [r4, #32]
 800718e:	602b      	str	r3, [r5, #0]
 8007190:	d030      	beq.n	80071f4 <__sflush_r+0x90>
 8007192:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007194:	89a3      	ldrh	r3, [r4, #12]
 8007196:	0759      	lsls	r1, r3, #29
 8007198:	d505      	bpl.n	80071a6 <__sflush_r+0x42>
 800719a:	6863      	ldr	r3, [r4, #4]
 800719c:	1ad2      	subs	r2, r2, r3
 800719e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80071a0:	b10b      	cbz	r3, 80071a6 <__sflush_r+0x42>
 80071a2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80071a4:	1ad2      	subs	r2, r2, r3
 80071a6:	2300      	movs	r3, #0
 80071a8:	4628      	mov	r0, r5
 80071aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80071ac:	6a21      	ldr	r1, [r4, #32]
 80071ae:	47b0      	blx	r6
 80071b0:	1c43      	adds	r3, r0, #1
 80071b2:	89a3      	ldrh	r3, [r4, #12]
 80071b4:	d106      	bne.n	80071c4 <__sflush_r+0x60>
 80071b6:	6829      	ldr	r1, [r5, #0]
 80071b8:	291d      	cmp	r1, #29
 80071ba:	d82b      	bhi.n	8007214 <__sflush_r+0xb0>
 80071bc:	4a28      	ldr	r2, [pc, #160]	@ (8007260 <__sflush_r+0xfc>)
 80071be:	40ca      	lsrs	r2, r1
 80071c0:	07d6      	lsls	r6, r2, #31
 80071c2:	d527      	bpl.n	8007214 <__sflush_r+0xb0>
 80071c4:	2200      	movs	r2, #0
 80071c6:	6062      	str	r2, [r4, #4]
 80071c8:	6922      	ldr	r2, [r4, #16]
 80071ca:	04d9      	lsls	r1, r3, #19
 80071cc:	6022      	str	r2, [r4, #0]
 80071ce:	d504      	bpl.n	80071da <__sflush_r+0x76>
 80071d0:	1c42      	adds	r2, r0, #1
 80071d2:	d101      	bne.n	80071d8 <__sflush_r+0x74>
 80071d4:	682b      	ldr	r3, [r5, #0]
 80071d6:	b903      	cbnz	r3, 80071da <__sflush_r+0x76>
 80071d8:	6560      	str	r0, [r4, #84]	@ 0x54
 80071da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071dc:	602f      	str	r7, [r5, #0]
 80071de:	b1b9      	cbz	r1, 8007210 <__sflush_r+0xac>
 80071e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80071e4:	4299      	cmp	r1, r3
 80071e6:	d002      	beq.n	80071ee <__sflush_r+0x8a>
 80071e8:	4628      	mov	r0, r5
 80071ea:	f7fe fa49 	bl	8005680 <_free_r>
 80071ee:	2300      	movs	r3, #0
 80071f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80071f2:	e00d      	b.n	8007210 <__sflush_r+0xac>
 80071f4:	2301      	movs	r3, #1
 80071f6:	4628      	mov	r0, r5
 80071f8:	47b0      	blx	r6
 80071fa:	4602      	mov	r2, r0
 80071fc:	1c50      	adds	r0, r2, #1
 80071fe:	d1c9      	bne.n	8007194 <__sflush_r+0x30>
 8007200:	682b      	ldr	r3, [r5, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d0c6      	beq.n	8007194 <__sflush_r+0x30>
 8007206:	2b1d      	cmp	r3, #29
 8007208:	d001      	beq.n	800720e <__sflush_r+0xaa>
 800720a:	2b16      	cmp	r3, #22
 800720c:	d11d      	bne.n	800724a <__sflush_r+0xe6>
 800720e:	602f      	str	r7, [r5, #0]
 8007210:	2000      	movs	r0, #0
 8007212:	e021      	b.n	8007258 <__sflush_r+0xf4>
 8007214:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007218:	b21b      	sxth	r3, r3
 800721a:	e01a      	b.n	8007252 <__sflush_r+0xee>
 800721c:	690f      	ldr	r7, [r1, #16]
 800721e:	2f00      	cmp	r7, #0
 8007220:	d0f6      	beq.n	8007210 <__sflush_r+0xac>
 8007222:	0793      	lsls	r3, r2, #30
 8007224:	bf18      	it	ne
 8007226:	2300      	movne	r3, #0
 8007228:	680e      	ldr	r6, [r1, #0]
 800722a:	bf08      	it	eq
 800722c:	694b      	ldreq	r3, [r1, #20]
 800722e:	1bf6      	subs	r6, r6, r7
 8007230:	600f      	str	r7, [r1, #0]
 8007232:	608b      	str	r3, [r1, #8]
 8007234:	2e00      	cmp	r6, #0
 8007236:	ddeb      	ble.n	8007210 <__sflush_r+0xac>
 8007238:	4633      	mov	r3, r6
 800723a:	463a      	mov	r2, r7
 800723c:	4628      	mov	r0, r5
 800723e:	6a21      	ldr	r1, [r4, #32]
 8007240:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007244:	47e0      	blx	ip
 8007246:	2800      	cmp	r0, #0
 8007248:	dc07      	bgt.n	800725a <__sflush_r+0xf6>
 800724a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800724e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007252:	f04f 30ff 	mov.w	r0, #4294967295
 8007256:	81a3      	strh	r3, [r4, #12]
 8007258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800725a:	4407      	add	r7, r0
 800725c:	1a36      	subs	r6, r6, r0
 800725e:	e7e9      	b.n	8007234 <__sflush_r+0xd0>
 8007260:	20400001 	.word	0x20400001

08007264 <_fflush_r>:
 8007264:	b538      	push	{r3, r4, r5, lr}
 8007266:	690b      	ldr	r3, [r1, #16]
 8007268:	4605      	mov	r5, r0
 800726a:	460c      	mov	r4, r1
 800726c:	b913      	cbnz	r3, 8007274 <_fflush_r+0x10>
 800726e:	2500      	movs	r5, #0
 8007270:	4628      	mov	r0, r5
 8007272:	bd38      	pop	{r3, r4, r5, pc}
 8007274:	b118      	cbz	r0, 800727e <_fflush_r+0x1a>
 8007276:	6a03      	ldr	r3, [r0, #32]
 8007278:	b90b      	cbnz	r3, 800727e <_fflush_r+0x1a>
 800727a:	f7fd fa67 	bl	800474c <__sinit>
 800727e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d0f3      	beq.n	800726e <_fflush_r+0xa>
 8007286:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007288:	07d0      	lsls	r0, r2, #31
 800728a:	d404      	bmi.n	8007296 <_fflush_r+0x32>
 800728c:	0599      	lsls	r1, r3, #22
 800728e:	d402      	bmi.n	8007296 <_fflush_r+0x32>
 8007290:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007292:	f7fd fb74 	bl	800497e <__retarget_lock_acquire_recursive>
 8007296:	4628      	mov	r0, r5
 8007298:	4621      	mov	r1, r4
 800729a:	f7ff ff63 	bl	8007164 <__sflush_r>
 800729e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80072a0:	4605      	mov	r5, r0
 80072a2:	07da      	lsls	r2, r3, #31
 80072a4:	d4e4      	bmi.n	8007270 <_fflush_r+0xc>
 80072a6:	89a3      	ldrh	r3, [r4, #12]
 80072a8:	059b      	lsls	r3, r3, #22
 80072aa:	d4e1      	bmi.n	8007270 <_fflush_r+0xc>
 80072ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072ae:	f7fd fb67 	bl	8004980 <__retarget_lock_release_recursive>
 80072b2:	e7dd      	b.n	8007270 <_fflush_r+0xc>

080072b4 <memmove>:
 80072b4:	4288      	cmp	r0, r1
 80072b6:	b510      	push	{r4, lr}
 80072b8:	eb01 0402 	add.w	r4, r1, r2
 80072bc:	d902      	bls.n	80072c4 <memmove+0x10>
 80072be:	4284      	cmp	r4, r0
 80072c0:	4623      	mov	r3, r4
 80072c2:	d807      	bhi.n	80072d4 <memmove+0x20>
 80072c4:	1e43      	subs	r3, r0, #1
 80072c6:	42a1      	cmp	r1, r4
 80072c8:	d008      	beq.n	80072dc <memmove+0x28>
 80072ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80072d2:	e7f8      	b.n	80072c6 <memmove+0x12>
 80072d4:	4601      	mov	r1, r0
 80072d6:	4402      	add	r2, r0
 80072d8:	428a      	cmp	r2, r1
 80072da:	d100      	bne.n	80072de <memmove+0x2a>
 80072dc:	bd10      	pop	{r4, pc}
 80072de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80072e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80072e6:	e7f7      	b.n	80072d8 <memmove+0x24>

080072e8 <strncmp>:
 80072e8:	b510      	push	{r4, lr}
 80072ea:	b16a      	cbz	r2, 8007308 <strncmp+0x20>
 80072ec:	3901      	subs	r1, #1
 80072ee:	1884      	adds	r4, r0, r2
 80072f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d103      	bne.n	8007304 <strncmp+0x1c>
 80072fc:	42a0      	cmp	r0, r4
 80072fe:	d001      	beq.n	8007304 <strncmp+0x1c>
 8007300:	2a00      	cmp	r2, #0
 8007302:	d1f5      	bne.n	80072f0 <strncmp+0x8>
 8007304:	1ad0      	subs	r0, r2, r3
 8007306:	bd10      	pop	{r4, pc}
 8007308:	4610      	mov	r0, r2
 800730a:	e7fc      	b.n	8007306 <strncmp+0x1e>

0800730c <_sbrk_r>:
 800730c:	b538      	push	{r3, r4, r5, lr}
 800730e:	2300      	movs	r3, #0
 8007310:	4d05      	ldr	r5, [pc, #20]	@ (8007328 <_sbrk_r+0x1c>)
 8007312:	4604      	mov	r4, r0
 8007314:	4608      	mov	r0, r1
 8007316:	602b      	str	r3, [r5, #0]
 8007318:	f7fa fb76 	bl	8001a08 <_sbrk>
 800731c:	1c43      	adds	r3, r0, #1
 800731e:	d102      	bne.n	8007326 <_sbrk_r+0x1a>
 8007320:	682b      	ldr	r3, [r5, #0]
 8007322:	b103      	cbz	r3, 8007326 <_sbrk_r+0x1a>
 8007324:	6023      	str	r3, [r4, #0]
 8007326:	bd38      	pop	{r3, r4, r5, pc}
 8007328:	200003e8 	.word	0x200003e8

0800732c <nan>:
 800732c:	2000      	movs	r0, #0
 800732e:	4901      	ldr	r1, [pc, #4]	@ (8007334 <nan+0x8>)
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	7ff80000 	.word	0x7ff80000

08007338 <__assert_func>:
 8007338:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800733a:	4614      	mov	r4, r2
 800733c:	461a      	mov	r2, r3
 800733e:	4b09      	ldr	r3, [pc, #36]	@ (8007364 <__assert_func+0x2c>)
 8007340:	4605      	mov	r5, r0
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68d8      	ldr	r0, [r3, #12]
 8007346:	b14c      	cbz	r4, 800735c <__assert_func+0x24>
 8007348:	4b07      	ldr	r3, [pc, #28]	@ (8007368 <__assert_func+0x30>)
 800734a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800734e:	9100      	str	r1, [sp, #0]
 8007350:	462b      	mov	r3, r5
 8007352:	4906      	ldr	r1, [pc, #24]	@ (800736c <__assert_func+0x34>)
 8007354:	f000 fba8 	bl	8007aa8 <fiprintf>
 8007358:	f000 fbb8 	bl	8007acc <abort>
 800735c:	4b04      	ldr	r3, [pc, #16]	@ (8007370 <__assert_func+0x38>)
 800735e:	461c      	mov	r4, r3
 8007360:	e7f3      	b.n	800734a <__assert_func+0x12>
 8007362:	bf00      	nop
 8007364:	20000018 	.word	0x20000018
 8007368:	080081f4 	.word	0x080081f4
 800736c:	08008201 	.word	0x08008201
 8007370:	0800822f 	.word	0x0800822f

08007374 <_calloc_r>:
 8007374:	b570      	push	{r4, r5, r6, lr}
 8007376:	fba1 5402 	umull	r5, r4, r1, r2
 800737a:	b934      	cbnz	r4, 800738a <_calloc_r+0x16>
 800737c:	4629      	mov	r1, r5
 800737e:	f7fe f9f1 	bl	8005764 <_malloc_r>
 8007382:	4606      	mov	r6, r0
 8007384:	b928      	cbnz	r0, 8007392 <_calloc_r+0x1e>
 8007386:	4630      	mov	r0, r6
 8007388:	bd70      	pop	{r4, r5, r6, pc}
 800738a:	220c      	movs	r2, #12
 800738c:	2600      	movs	r6, #0
 800738e:	6002      	str	r2, [r0, #0]
 8007390:	e7f9      	b.n	8007386 <_calloc_r+0x12>
 8007392:	462a      	mov	r2, r5
 8007394:	4621      	mov	r1, r4
 8007396:	f7fd fa74 	bl	8004882 <memset>
 800739a:	e7f4      	b.n	8007386 <_calloc_r+0x12>

0800739c <rshift>:
 800739c:	6903      	ldr	r3, [r0, #16]
 800739e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80073a2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80073a6:	f100 0414 	add.w	r4, r0, #20
 80073aa:	ea4f 1261 	mov.w	r2, r1, asr #5
 80073ae:	dd46      	ble.n	800743e <rshift+0xa2>
 80073b0:	f011 011f 	ands.w	r1, r1, #31
 80073b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80073b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80073bc:	d10c      	bne.n	80073d8 <rshift+0x3c>
 80073be:	4629      	mov	r1, r5
 80073c0:	f100 0710 	add.w	r7, r0, #16
 80073c4:	42b1      	cmp	r1, r6
 80073c6:	d335      	bcc.n	8007434 <rshift+0x98>
 80073c8:	1a9b      	subs	r3, r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	1eea      	subs	r2, r5, #3
 80073ce:	4296      	cmp	r6, r2
 80073d0:	bf38      	it	cc
 80073d2:	2300      	movcc	r3, #0
 80073d4:	4423      	add	r3, r4
 80073d6:	e015      	b.n	8007404 <rshift+0x68>
 80073d8:	46a1      	mov	r9, r4
 80073da:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80073de:	f1c1 0820 	rsb	r8, r1, #32
 80073e2:	40cf      	lsrs	r7, r1
 80073e4:	f105 0e04 	add.w	lr, r5, #4
 80073e8:	4576      	cmp	r6, lr
 80073ea:	46f4      	mov	ip, lr
 80073ec:	d816      	bhi.n	800741c <rshift+0x80>
 80073ee:	1a9a      	subs	r2, r3, r2
 80073f0:	0092      	lsls	r2, r2, #2
 80073f2:	3a04      	subs	r2, #4
 80073f4:	3501      	adds	r5, #1
 80073f6:	42ae      	cmp	r6, r5
 80073f8:	bf38      	it	cc
 80073fa:	2200      	movcc	r2, #0
 80073fc:	18a3      	adds	r3, r4, r2
 80073fe:	50a7      	str	r7, [r4, r2]
 8007400:	b107      	cbz	r7, 8007404 <rshift+0x68>
 8007402:	3304      	adds	r3, #4
 8007404:	42a3      	cmp	r3, r4
 8007406:	eba3 0204 	sub.w	r2, r3, r4
 800740a:	bf08      	it	eq
 800740c:	2300      	moveq	r3, #0
 800740e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007412:	6102      	str	r2, [r0, #16]
 8007414:	bf08      	it	eq
 8007416:	6143      	streq	r3, [r0, #20]
 8007418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800741c:	f8dc c000 	ldr.w	ip, [ip]
 8007420:	fa0c fc08 	lsl.w	ip, ip, r8
 8007424:	ea4c 0707 	orr.w	r7, ip, r7
 8007428:	f849 7b04 	str.w	r7, [r9], #4
 800742c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007430:	40cf      	lsrs	r7, r1
 8007432:	e7d9      	b.n	80073e8 <rshift+0x4c>
 8007434:	f851 cb04 	ldr.w	ip, [r1], #4
 8007438:	f847 cf04 	str.w	ip, [r7, #4]!
 800743c:	e7c2      	b.n	80073c4 <rshift+0x28>
 800743e:	4623      	mov	r3, r4
 8007440:	e7e0      	b.n	8007404 <rshift+0x68>

08007442 <__hexdig_fun>:
 8007442:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007446:	2b09      	cmp	r3, #9
 8007448:	d802      	bhi.n	8007450 <__hexdig_fun+0xe>
 800744a:	3820      	subs	r0, #32
 800744c:	b2c0      	uxtb	r0, r0
 800744e:	4770      	bx	lr
 8007450:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007454:	2b05      	cmp	r3, #5
 8007456:	d801      	bhi.n	800745c <__hexdig_fun+0x1a>
 8007458:	3847      	subs	r0, #71	@ 0x47
 800745a:	e7f7      	b.n	800744c <__hexdig_fun+0xa>
 800745c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007460:	2b05      	cmp	r3, #5
 8007462:	d801      	bhi.n	8007468 <__hexdig_fun+0x26>
 8007464:	3827      	subs	r0, #39	@ 0x27
 8007466:	e7f1      	b.n	800744c <__hexdig_fun+0xa>
 8007468:	2000      	movs	r0, #0
 800746a:	4770      	bx	lr

0800746c <__gethex>:
 800746c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007470:	468a      	mov	sl, r1
 8007472:	4690      	mov	r8, r2
 8007474:	b085      	sub	sp, #20
 8007476:	9302      	str	r3, [sp, #8]
 8007478:	680b      	ldr	r3, [r1, #0]
 800747a:	9001      	str	r0, [sp, #4]
 800747c:	1c9c      	adds	r4, r3, #2
 800747e:	46a1      	mov	r9, r4
 8007480:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007484:	2830      	cmp	r0, #48	@ 0x30
 8007486:	d0fa      	beq.n	800747e <__gethex+0x12>
 8007488:	eba9 0303 	sub.w	r3, r9, r3
 800748c:	f1a3 0b02 	sub.w	fp, r3, #2
 8007490:	f7ff ffd7 	bl	8007442 <__hexdig_fun>
 8007494:	4605      	mov	r5, r0
 8007496:	2800      	cmp	r0, #0
 8007498:	d168      	bne.n	800756c <__gethex+0x100>
 800749a:	2201      	movs	r2, #1
 800749c:	4648      	mov	r0, r9
 800749e:	499f      	ldr	r1, [pc, #636]	@ (800771c <__gethex+0x2b0>)
 80074a0:	f7ff ff22 	bl	80072e8 <strncmp>
 80074a4:	4607      	mov	r7, r0
 80074a6:	2800      	cmp	r0, #0
 80074a8:	d167      	bne.n	800757a <__gethex+0x10e>
 80074aa:	f899 0001 	ldrb.w	r0, [r9, #1]
 80074ae:	4626      	mov	r6, r4
 80074b0:	f7ff ffc7 	bl	8007442 <__hexdig_fun>
 80074b4:	2800      	cmp	r0, #0
 80074b6:	d062      	beq.n	800757e <__gethex+0x112>
 80074b8:	4623      	mov	r3, r4
 80074ba:	7818      	ldrb	r0, [r3, #0]
 80074bc:	4699      	mov	r9, r3
 80074be:	2830      	cmp	r0, #48	@ 0x30
 80074c0:	f103 0301 	add.w	r3, r3, #1
 80074c4:	d0f9      	beq.n	80074ba <__gethex+0x4e>
 80074c6:	f7ff ffbc 	bl	8007442 <__hexdig_fun>
 80074ca:	fab0 f580 	clz	r5, r0
 80074ce:	f04f 0b01 	mov.w	fp, #1
 80074d2:	096d      	lsrs	r5, r5, #5
 80074d4:	464a      	mov	r2, r9
 80074d6:	4616      	mov	r6, r2
 80074d8:	7830      	ldrb	r0, [r6, #0]
 80074da:	3201      	adds	r2, #1
 80074dc:	f7ff ffb1 	bl	8007442 <__hexdig_fun>
 80074e0:	2800      	cmp	r0, #0
 80074e2:	d1f8      	bne.n	80074d6 <__gethex+0x6a>
 80074e4:	2201      	movs	r2, #1
 80074e6:	4630      	mov	r0, r6
 80074e8:	498c      	ldr	r1, [pc, #560]	@ (800771c <__gethex+0x2b0>)
 80074ea:	f7ff fefd 	bl	80072e8 <strncmp>
 80074ee:	2800      	cmp	r0, #0
 80074f0:	d13f      	bne.n	8007572 <__gethex+0x106>
 80074f2:	b944      	cbnz	r4, 8007506 <__gethex+0x9a>
 80074f4:	1c74      	adds	r4, r6, #1
 80074f6:	4622      	mov	r2, r4
 80074f8:	4616      	mov	r6, r2
 80074fa:	7830      	ldrb	r0, [r6, #0]
 80074fc:	3201      	adds	r2, #1
 80074fe:	f7ff ffa0 	bl	8007442 <__hexdig_fun>
 8007502:	2800      	cmp	r0, #0
 8007504:	d1f8      	bne.n	80074f8 <__gethex+0x8c>
 8007506:	1ba4      	subs	r4, r4, r6
 8007508:	00a7      	lsls	r7, r4, #2
 800750a:	7833      	ldrb	r3, [r6, #0]
 800750c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007510:	2b50      	cmp	r3, #80	@ 0x50
 8007512:	d13e      	bne.n	8007592 <__gethex+0x126>
 8007514:	7873      	ldrb	r3, [r6, #1]
 8007516:	2b2b      	cmp	r3, #43	@ 0x2b
 8007518:	d033      	beq.n	8007582 <__gethex+0x116>
 800751a:	2b2d      	cmp	r3, #45	@ 0x2d
 800751c:	d034      	beq.n	8007588 <__gethex+0x11c>
 800751e:	2400      	movs	r4, #0
 8007520:	1c71      	adds	r1, r6, #1
 8007522:	7808      	ldrb	r0, [r1, #0]
 8007524:	f7ff ff8d 	bl	8007442 <__hexdig_fun>
 8007528:	1e43      	subs	r3, r0, #1
 800752a:	b2db      	uxtb	r3, r3
 800752c:	2b18      	cmp	r3, #24
 800752e:	d830      	bhi.n	8007592 <__gethex+0x126>
 8007530:	f1a0 0210 	sub.w	r2, r0, #16
 8007534:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007538:	f7ff ff83 	bl	8007442 <__hexdig_fun>
 800753c:	f100 3cff 	add.w	ip, r0, #4294967295
 8007540:	fa5f fc8c 	uxtb.w	ip, ip
 8007544:	f1bc 0f18 	cmp.w	ip, #24
 8007548:	f04f 030a 	mov.w	r3, #10
 800754c:	d91e      	bls.n	800758c <__gethex+0x120>
 800754e:	b104      	cbz	r4, 8007552 <__gethex+0xe6>
 8007550:	4252      	negs	r2, r2
 8007552:	4417      	add	r7, r2
 8007554:	f8ca 1000 	str.w	r1, [sl]
 8007558:	b1ed      	cbz	r5, 8007596 <__gethex+0x12a>
 800755a:	f1bb 0f00 	cmp.w	fp, #0
 800755e:	bf0c      	ite	eq
 8007560:	2506      	moveq	r5, #6
 8007562:	2500      	movne	r5, #0
 8007564:	4628      	mov	r0, r5
 8007566:	b005      	add	sp, #20
 8007568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800756c:	2500      	movs	r5, #0
 800756e:	462c      	mov	r4, r5
 8007570:	e7b0      	b.n	80074d4 <__gethex+0x68>
 8007572:	2c00      	cmp	r4, #0
 8007574:	d1c7      	bne.n	8007506 <__gethex+0x9a>
 8007576:	4627      	mov	r7, r4
 8007578:	e7c7      	b.n	800750a <__gethex+0x9e>
 800757a:	464e      	mov	r6, r9
 800757c:	462f      	mov	r7, r5
 800757e:	2501      	movs	r5, #1
 8007580:	e7c3      	b.n	800750a <__gethex+0x9e>
 8007582:	2400      	movs	r4, #0
 8007584:	1cb1      	adds	r1, r6, #2
 8007586:	e7cc      	b.n	8007522 <__gethex+0xb6>
 8007588:	2401      	movs	r4, #1
 800758a:	e7fb      	b.n	8007584 <__gethex+0x118>
 800758c:	fb03 0002 	mla	r0, r3, r2, r0
 8007590:	e7ce      	b.n	8007530 <__gethex+0xc4>
 8007592:	4631      	mov	r1, r6
 8007594:	e7de      	b.n	8007554 <__gethex+0xe8>
 8007596:	4629      	mov	r1, r5
 8007598:	eba6 0309 	sub.w	r3, r6, r9
 800759c:	3b01      	subs	r3, #1
 800759e:	2b07      	cmp	r3, #7
 80075a0:	dc0a      	bgt.n	80075b8 <__gethex+0x14c>
 80075a2:	9801      	ldr	r0, [sp, #4]
 80075a4:	f7fe f96a 	bl	800587c <_Balloc>
 80075a8:	4604      	mov	r4, r0
 80075aa:	b940      	cbnz	r0, 80075be <__gethex+0x152>
 80075ac:	4602      	mov	r2, r0
 80075ae:	21e4      	movs	r1, #228	@ 0xe4
 80075b0:	4b5b      	ldr	r3, [pc, #364]	@ (8007720 <__gethex+0x2b4>)
 80075b2:	485c      	ldr	r0, [pc, #368]	@ (8007724 <__gethex+0x2b8>)
 80075b4:	f7ff fec0 	bl	8007338 <__assert_func>
 80075b8:	3101      	adds	r1, #1
 80075ba:	105b      	asrs	r3, r3, #1
 80075bc:	e7ef      	b.n	800759e <__gethex+0x132>
 80075be:	2300      	movs	r3, #0
 80075c0:	f100 0a14 	add.w	sl, r0, #20
 80075c4:	4655      	mov	r5, sl
 80075c6:	469b      	mov	fp, r3
 80075c8:	45b1      	cmp	r9, r6
 80075ca:	d337      	bcc.n	800763c <__gethex+0x1d0>
 80075cc:	f845 bb04 	str.w	fp, [r5], #4
 80075d0:	eba5 050a 	sub.w	r5, r5, sl
 80075d4:	10ad      	asrs	r5, r5, #2
 80075d6:	6125      	str	r5, [r4, #16]
 80075d8:	4658      	mov	r0, fp
 80075da:	f7fe fa41 	bl	8005a60 <__hi0bits>
 80075de:	016d      	lsls	r5, r5, #5
 80075e0:	f8d8 6000 	ldr.w	r6, [r8]
 80075e4:	1a2d      	subs	r5, r5, r0
 80075e6:	42b5      	cmp	r5, r6
 80075e8:	dd54      	ble.n	8007694 <__gethex+0x228>
 80075ea:	1bad      	subs	r5, r5, r6
 80075ec:	4629      	mov	r1, r5
 80075ee:	4620      	mov	r0, r4
 80075f0:	f7fe fdc3 	bl	800617a <__any_on>
 80075f4:	4681      	mov	r9, r0
 80075f6:	b178      	cbz	r0, 8007618 <__gethex+0x1ac>
 80075f8:	f04f 0901 	mov.w	r9, #1
 80075fc:	1e6b      	subs	r3, r5, #1
 80075fe:	1159      	asrs	r1, r3, #5
 8007600:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007604:	f003 021f 	and.w	r2, r3, #31
 8007608:	fa09 f202 	lsl.w	r2, r9, r2
 800760c:	420a      	tst	r2, r1
 800760e:	d003      	beq.n	8007618 <__gethex+0x1ac>
 8007610:	454b      	cmp	r3, r9
 8007612:	dc36      	bgt.n	8007682 <__gethex+0x216>
 8007614:	f04f 0902 	mov.w	r9, #2
 8007618:	4629      	mov	r1, r5
 800761a:	4620      	mov	r0, r4
 800761c:	f7ff febe 	bl	800739c <rshift>
 8007620:	442f      	add	r7, r5
 8007622:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007626:	42bb      	cmp	r3, r7
 8007628:	da42      	bge.n	80076b0 <__gethex+0x244>
 800762a:	4621      	mov	r1, r4
 800762c:	9801      	ldr	r0, [sp, #4]
 800762e:	f7fe f965 	bl	80058fc <_Bfree>
 8007632:	2300      	movs	r3, #0
 8007634:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007636:	25a3      	movs	r5, #163	@ 0xa3
 8007638:	6013      	str	r3, [r2, #0]
 800763a:	e793      	b.n	8007564 <__gethex+0xf8>
 800763c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007640:	2a2e      	cmp	r2, #46	@ 0x2e
 8007642:	d012      	beq.n	800766a <__gethex+0x1fe>
 8007644:	2b20      	cmp	r3, #32
 8007646:	d104      	bne.n	8007652 <__gethex+0x1e6>
 8007648:	f845 bb04 	str.w	fp, [r5], #4
 800764c:	f04f 0b00 	mov.w	fp, #0
 8007650:	465b      	mov	r3, fp
 8007652:	7830      	ldrb	r0, [r6, #0]
 8007654:	9303      	str	r3, [sp, #12]
 8007656:	f7ff fef4 	bl	8007442 <__hexdig_fun>
 800765a:	9b03      	ldr	r3, [sp, #12]
 800765c:	f000 000f 	and.w	r0, r0, #15
 8007660:	4098      	lsls	r0, r3
 8007662:	ea4b 0b00 	orr.w	fp, fp, r0
 8007666:	3304      	adds	r3, #4
 8007668:	e7ae      	b.n	80075c8 <__gethex+0x15c>
 800766a:	45b1      	cmp	r9, r6
 800766c:	d8ea      	bhi.n	8007644 <__gethex+0x1d8>
 800766e:	2201      	movs	r2, #1
 8007670:	4630      	mov	r0, r6
 8007672:	492a      	ldr	r1, [pc, #168]	@ (800771c <__gethex+0x2b0>)
 8007674:	9303      	str	r3, [sp, #12]
 8007676:	f7ff fe37 	bl	80072e8 <strncmp>
 800767a:	9b03      	ldr	r3, [sp, #12]
 800767c:	2800      	cmp	r0, #0
 800767e:	d1e1      	bne.n	8007644 <__gethex+0x1d8>
 8007680:	e7a2      	b.n	80075c8 <__gethex+0x15c>
 8007682:	4620      	mov	r0, r4
 8007684:	1ea9      	subs	r1, r5, #2
 8007686:	f7fe fd78 	bl	800617a <__any_on>
 800768a:	2800      	cmp	r0, #0
 800768c:	d0c2      	beq.n	8007614 <__gethex+0x1a8>
 800768e:	f04f 0903 	mov.w	r9, #3
 8007692:	e7c1      	b.n	8007618 <__gethex+0x1ac>
 8007694:	da09      	bge.n	80076aa <__gethex+0x23e>
 8007696:	1b75      	subs	r5, r6, r5
 8007698:	4621      	mov	r1, r4
 800769a:	462a      	mov	r2, r5
 800769c:	9801      	ldr	r0, [sp, #4]
 800769e:	f7fe fb3d 	bl	8005d1c <__lshift>
 80076a2:	4604      	mov	r4, r0
 80076a4:	1b7f      	subs	r7, r7, r5
 80076a6:	f100 0a14 	add.w	sl, r0, #20
 80076aa:	f04f 0900 	mov.w	r9, #0
 80076ae:	e7b8      	b.n	8007622 <__gethex+0x1b6>
 80076b0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80076b4:	42bd      	cmp	r5, r7
 80076b6:	dd6f      	ble.n	8007798 <__gethex+0x32c>
 80076b8:	1bed      	subs	r5, r5, r7
 80076ba:	42ae      	cmp	r6, r5
 80076bc:	dc34      	bgt.n	8007728 <__gethex+0x2bc>
 80076be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d022      	beq.n	800770c <__gethex+0x2a0>
 80076c6:	2b03      	cmp	r3, #3
 80076c8:	d024      	beq.n	8007714 <__gethex+0x2a8>
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d115      	bne.n	80076fa <__gethex+0x28e>
 80076ce:	42ae      	cmp	r6, r5
 80076d0:	d113      	bne.n	80076fa <__gethex+0x28e>
 80076d2:	2e01      	cmp	r6, #1
 80076d4:	d10b      	bne.n	80076ee <__gethex+0x282>
 80076d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80076da:	9a02      	ldr	r2, [sp, #8]
 80076dc:	2562      	movs	r5, #98	@ 0x62
 80076de:	6013      	str	r3, [r2, #0]
 80076e0:	2301      	movs	r3, #1
 80076e2:	6123      	str	r3, [r4, #16]
 80076e4:	f8ca 3000 	str.w	r3, [sl]
 80076e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076ea:	601c      	str	r4, [r3, #0]
 80076ec:	e73a      	b.n	8007564 <__gethex+0xf8>
 80076ee:	4620      	mov	r0, r4
 80076f0:	1e71      	subs	r1, r6, #1
 80076f2:	f7fe fd42 	bl	800617a <__any_on>
 80076f6:	2800      	cmp	r0, #0
 80076f8:	d1ed      	bne.n	80076d6 <__gethex+0x26a>
 80076fa:	4621      	mov	r1, r4
 80076fc:	9801      	ldr	r0, [sp, #4]
 80076fe:	f7fe f8fd 	bl	80058fc <_Bfree>
 8007702:	2300      	movs	r3, #0
 8007704:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007706:	2550      	movs	r5, #80	@ 0x50
 8007708:	6013      	str	r3, [r2, #0]
 800770a:	e72b      	b.n	8007564 <__gethex+0xf8>
 800770c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1f3      	bne.n	80076fa <__gethex+0x28e>
 8007712:	e7e0      	b.n	80076d6 <__gethex+0x26a>
 8007714:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007716:	2b00      	cmp	r3, #0
 8007718:	d1dd      	bne.n	80076d6 <__gethex+0x26a>
 800771a:	e7ee      	b.n	80076fa <__gethex+0x28e>
 800771c:	080081d9 	.word	0x080081d9
 8007720:	0800816f 	.word	0x0800816f
 8007724:	08008230 	.word	0x08008230
 8007728:	1e6f      	subs	r7, r5, #1
 800772a:	f1b9 0f00 	cmp.w	r9, #0
 800772e:	d130      	bne.n	8007792 <__gethex+0x326>
 8007730:	b127      	cbz	r7, 800773c <__gethex+0x2d0>
 8007732:	4639      	mov	r1, r7
 8007734:	4620      	mov	r0, r4
 8007736:	f7fe fd20 	bl	800617a <__any_on>
 800773a:	4681      	mov	r9, r0
 800773c:	2301      	movs	r3, #1
 800773e:	4629      	mov	r1, r5
 8007740:	1b76      	subs	r6, r6, r5
 8007742:	2502      	movs	r5, #2
 8007744:	117a      	asrs	r2, r7, #5
 8007746:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800774a:	f007 071f 	and.w	r7, r7, #31
 800774e:	40bb      	lsls	r3, r7
 8007750:	4213      	tst	r3, r2
 8007752:	4620      	mov	r0, r4
 8007754:	bf18      	it	ne
 8007756:	f049 0902 	orrne.w	r9, r9, #2
 800775a:	f7ff fe1f 	bl	800739c <rshift>
 800775e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007762:	f1b9 0f00 	cmp.w	r9, #0
 8007766:	d047      	beq.n	80077f8 <__gethex+0x38c>
 8007768:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800776c:	2b02      	cmp	r3, #2
 800776e:	d015      	beq.n	800779c <__gethex+0x330>
 8007770:	2b03      	cmp	r3, #3
 8007772:	d017      	beq.n	80077a4 <__gethex+0x338>
 8007774:	2b01      	cmp	r3, #1
 8007776:	d109      	bne.n	800778c <__gethex+0x320>
 8007778:	f019 0f02 	tst.w	r9, #2
 800777c:	d006      	beq.n	800778c <__gethex+0x320>
 800777e:	f8da 3000 	ldr.w	r3, [sl]
 8007782:	ea49 0903 	orr.w	r9, r9, r3
 8007786:	f019 0f01 	tst.w	r9, #1
 800778a:	d10e      	bne.n	80077aa <__gethex+0x33e>
 800778c:	f045 0510 	orr.w	r5, r5, #16
 8007790:	e032      	b.n	80077f8 <__gethex+0x38c>
 8007792:	f04f 0901 	mov.w	r9, #1
 8007796:	e7d1      	b.n	800773c <__gethex+0x2d0>
 8007798:	2501      	movs	r5, #1
 800779a:	e7e2      	b.n	8007762 <__gethex+0x2f6>
 800779c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800779e:	f1c3 0301 	rsb	r3, r3, #1
 80077a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80077a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d0f0      	beq.n	800778c <__gethex+0x320>
 80077aa:	f04f 0c00 	mov.w	ip, #0
 80077ae:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80077b2:	f104 0314 	add.w	r3, r4, #20
 80077b6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80077ba:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80077be:	4618      	mov	r0, r3
 80077c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80077c4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80077c8:	d01b      	beq.n	8007802 <__gethex+0x396>
 80077ca:	3201      	adds	r2, #1
 80077cc:	6002      	str	r2, [r0, #0]
 80077ce:	2d02      	cmp	r5, #2
 80077d0:	f104 0314 	add.w	r3, r4, #20
 80077d4:	d13c      	bne.n	8007850 <__gethex+0x3e4>
 80077d6:	f8d8 2000 	ldr.w	r2, [r8]
 80077da:	3a01      	subs	r2, #1
 80077dc:	42b2      	cmp	r2, r6
 80077de:	d109      	bne.n	80077f4 <__gethex+0x388>
 80077e0:	2201      	movs	r2, #1
 80077e2:	1171      	asrs	r1, r6, #5
 80077e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80077e8:	f006 061f 	and.w	r6, r6, #31
 80077ec:	fa02 f606 	lsl.w	r6, r2, r6
 80077f0:	421e      	tst	r6, r3
 80077f2:	d13a      	bne.n	800786a <__gethex+0x3fe>
 80077f4:	f045 0520 	orr.w	r5, r5, #32
 80077f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077fa:	601c      	str	r4, [r3, #0]
 80077fc:	9b02      	ldr	r3, [sp, #8]
 80077fe:	601f      	str	r7, [r3, #0]
 8007800:	e6b0      	b.n	8007564 <__gethex+0xf8>
 8007802:	4299      	cmp	r1, r3
 8007804:	f843 cc04 	str.w	ip, [r3, #-4]
 8007808:	d8d9      	bhi.n	80077be <__gethex+0x352>
 800780a:	68a3      	ldr	r3, [r4, #8]
 800780c:	459b      	cmp	fp, r3
 800780e:	db17      	blt.n	8007840 <__gethex+0x3d4>
 8007810:	6861      	ldr	r1, [r4, #4]
 8007812:	9801      	ldr	r0, [sp, #4]
 8007814:	3101      	adds	r1, #1
 8007816:	f7fe f831 	bl	800587c <_Balloc>
 800781a:	4681      	mov	r9, r0
 800781c:	b918      	cbnz	r0, 8007826 <__gethex+0x3ba>
 800781e:	4602      	mov	r2, r0
 8007820:	2184      	movs	r1, #132	@ 0x84
 8007822:	4b19      	ldr	r3, [pc, #100]	@ (8007888 <__gethex+0x41c>)
 8007824:	e6c5      	b.n	80075b2 <__gethex+0x146>
 8007826:	6922      	ldr	r2, [r4, #16]
 8007828:	f104 010c 	add.w	r1, r4, #12
 800782c:	3202      	adds	r2, #2
 800782e:	0092      	lsls	r2, r2, #2
 8007830:	300c      	adds	r0, #12
 8007832:	f7fd f8b4 	bl	800499e <memcpy>
 8007836:	4621      	mov	r1, r4
 8007838:	9801      	ldr	r0, [sp, #4]
 800783a:	f7fe f85f 	bl	80058fc <_Bfree>
 800783e:	464c      	mov	r4, r9
 8007840:	6923      	ldr	r3, [r4, #16]
 8007842:	1c5a      	adds	r2, r3, #1
 8007844:	6122      	str	r2, [r4, #16]
 8007846:	2201      	movs	r2, #1
 8007848:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800784c:	615a      	str	r2, [r3, #20]
 800784e:	e7be      	b.n	80077ce <__gethex+0x362>
 8007850:	6922      	ldr	r2, [r4, #16]
 8007852:	455a      	cmp	r2, fp
 8007854:	dd0b      	ble.n	800786e <__gethex+0x402>
 8007856:	2101      	movs	r1, #1
 8007858:	4620      	mov	r0, r4
 800785a:	f7ff fd9f 	bl	800739c <rshift>
 800785e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007862:	3701      	adds	r7, #1
 8007864:	42bb      	cmp	r3, r7
 8007866:	f6ff aee0 	blt.w	800762a <__gethex+0x1be>
 800786a:	2501      	movs	r5, #1
 800786c:	e7c2      	b.n	80077f4 <__gethex+0x388>
 800786e:	f016 061f 	ands.w	r6, r6, #31
 8007872:	d0fa      	beq.n	800786a <__gethex+0x3fe>
 8007874:	4453      	add	r3, sl
 8007876:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800787a:	f7fe f8f1 	bl	8005a60 <__hi0bits>
 800787e:	f1c6 0620 	rsb	r6, r6, #32
 8007882:	42b0      	cmp	r0, r6
 8007884:	dbe7      	blt.n	8007856 <__gethex+0x3ea>
 8007886:	e7f0      	b.n	800786a <__gethex+0x3fe>
 8007888:	0800816f 	.word	0x0800816f

0800788c <L_shift>:
 800788c:	f1c2 0208 	rsb	r2, r2, #8
 8007890:	0092      	lsls	r2, r2, #2
 8007892:	b570      	push	{r4, r5, r6, lr}
 8007894:	f1c2 0620 	rsb	r6, r2, #32
 8007898:	6843      	ldr	r3, [r0, #4]
 800789a:	6804      	ldr	r4, [r0, #0]
 800789c:	fa03 f506 	lsl.w	r5, r3, r6
 80078a0:	432c      	orrs	r4, r5
 80078a2:	40d3      	lsrs	r3, r2
 80078a4:	6004      	str	r4, [r0, #0]
 80078a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80078aa:	4288      	cmp	r0, r1
 80078ac:	d3f4      	bcc.n	8007898 <L_shift+0xc>
 80078ae:	bd70      	pop	{r4, r5, r6, pc}

080078b0 <__match>:
 80078b0:	b530      	push	{r4, r5, lr}
 80078b2:	6803      	ldr	r3, [r0, #0]
 80078b4:	3301      	adds	r3, #1
 80078b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078ba:	b914      	cbnz	r4, 80078c2 <__match+0x12>
 80078bc:	6003      	str	r3, [r0, #0]
 80078be:	2001      	movs	r0, #1
 80078c0:	bd30      	pop	{r4, r5, pc}
 80078c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078c6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80078ca:	2d19      	cmp	r5, #25
 80078cc:	bf98      	it	ls
 80078ce:	3220      	addls	r2, #32
 80078d0:	42a2      	cmp	r2, r4
 80078d2:	d0f0      	beq.n	80078b6 <__match+0x6>
 80078d4:	2000      	movs	r0, #0
 80078d6:	e7f3      	b.n	80078c0 <__match+0x10>

080078d8 <__hexnan>:
 80078d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078dc:	2500      	movs	r5, #0
 80078de:	680b      	ldr	r3, [r1, #0]
 80078e0:	4682      	mov	sl, r0
 80078e2:	115e      	asrs	r6, r3, #5
 80078e4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80078e8:	f013 031f 	ands.w	r3, r3, #31
 80078ec:	bf18      	it	ne
 80078ee:	3604      	addne	r6, #4
 80078f0:	1f37      	subs	r7, r6, #4
 80078f2:	4690      	mov	r8, r2
 80078f4:	46b9      	mov	r9, r7
 80078f6:	463c      	mov	r4, r7
 80078f8:	46ab      	mov	fp, r5
 80078fa:	b087      	sub	sp, #28
 80078fc:	6801      	ldr	r1, [r0, #0]
 80078fe:	9301      	str	r3, [sp, #4]
 8007900:	f846 5c04 	str.w	r5, [r6, #-4]
 8007904:	9502      	str	r5, [sp, #8]
 8007906:	784a      	ldrb	r2, [r1, #1]
 8007908:	1c4b      	adds	r3, r1, #1
 800790a:	9303      	str	r3, [sp, #12]
 800790c:	b342      	cbz	r2, 8007960 <__hexnan+0x88>
 800790e:	4610      	mov	r0, r2
 8007910:	9105      	str	r1, [sp, #20]
 8007912:	9204      	str	r2, [sp, #16]
 8007914:	f7ff fd95 	bl	8007442 <__hexdig_fun>
 8007918:	2800      	cmp	r0, #0
 800791a:	d151      	bne.n	80079c0 <__hexnan+0xe8>
 800791c:	9a04      	ldr	r2, [sp, #16]
 800791e:	9905      	ldr	r1, [sp, #20]
 8007920:	2a20      	cmp	r2, #32
 8007922:	d818      	bhi.n	8007956 <__hexnan+0x7e>
 8007924:	9b02      	ldr	r3, [sp, #8]
 8007926:	459b      	cmp	fp, r3
 8007928:	dd13      	ble.n	8007952 <__hexnan+0x7a>
 800792a:	454c      	cmp	r4, r9
 800792c:	d206      	bcs.n	800793c <__hexnan+0x64>
 800792e:	2d07      	cmp	r5, #7
 8007930:	dc04      	bgt.n	800793c <__hexnan+0x64>
 8007932:	462a      	mov	r2, r5
 8007934:	4649      	mov	r1, r9
 8007936:	4620      	mov	r0, r4
 8007938:	f7ff ffa8 	bl	800788c <L_shift>
 800793c:	4544      	cmp	r4, r8
 800793e:	d952      	bls.n	80079e6 <__hexnan+0x10e>
 8007940:	2300      	movs	r3, #0
 8007942:	f1a4 0904 	sub.w	r9, r4, #4
 8007946:	f844 3c04 	str.w	r3, [r4, #-4]
 800794a:	461d      	mov	r5, r3
 800794c:	464c      	mov	r4, r9
 800794e:	f8cd b008 	str.w	fp, [sp, #8]
 8007952:	9903      	ldr	r1, [sp, #12]
 8007954:	e7d7      	b.n	8007906 <__hexnan+0x2e>
 8007956:	2a29      	cmp	r2, #41	@ 0x29
 8007958:	d157      	bne.n	8007a0a <__hexnan+0x132>
 800795a:	3102      	adds	r1, #2
 800795c:	f8ca 1000 	str.w	r1, [sl]
 8007960:	f1bb 0f00 	cmp.w	fp, #0
 8007964:	d051      	beq.n	8007a0a <__hexnan+0x132>
 8007966:	454c      	cmp	r4, r9
 8007968:	d206      	bcs.n	8007978 <__hexnan+0xa0>
 800796a:	2d07      	cmp	r5, #7
 800796c:	dc04      	bgt.n	8007978 <__hexnan+0xa0>
 800796e:	462a      	mov	r2, r5
 8007970:	4649      	mov	r1, r9
 8007972:	4620      	mov	r0, r4
 8007974:	f7ff ff8a 	bl	800788c <L_shift>
 8007978:	4544      	cmp	r4, r8
 800797a:	d936      	bls.n	80079ea <__hexnan+0x112>
 800797c:	4623      	mov	r3, r4
 800797e:	f1a8 0204 	sub.w	r2, r8, #4
 8007982:	f853 1b04 	ldr.w	r1, [r3], #4
 8007986:	429f      	cmp	r7, r3
 8007988:	f842 1f04 	str.w	r1, [r2, #4]!
 800798c:	d2f9      	bcs.n	8007982 <__hexnan+0xaa>
 800798e:	1b3b      	subs	r3, r7, r4
 8007990:	f023 0303 	bic.w	r3, r3, #3
 8007994:	3304      	adds	r3, #4
 8007996:	3401      	adds	r4, #1
 8007998:	3e03      	subs	r6, #3
 800799a:	42b4      	cmp	r4, r6
 800799c:	bf88      	it	hi
 800799e:	2304      	movhi	r3, #4
 80079a0:	2200      	movs	r2, #0
 80079a2:	4443      	add	r3, r8
 80079a4:	f843 2b04 	str.w	r2, [r3], #4
 80079a8:	429f      	cmp	r7, r3
 80079aa:	d2fb      	bcs.n	80079a4 <__hexnan+0xcc>
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	b91b      	cbnz	r3, 80079b8 <__hexnan+0xe0>
 80079b0:	4547      	cmp	r7, r8
 80079b2:	d128      	bne.n	8007a06 <__hexnan+0x12e>
 80079b4:	2301      	movs	r3, #1
 80079b6:	603b      	str	r3, [r7, #0]
 80079b8:	2005      	movs	r0, #5
 80079ba:	b007      	add	sp, #28
 80079bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079c0:	3501      	adds	r5, #1
 80079c2:	2d08      	cmp	r5, #8
 80079c4:	f10b 0b01 	add.w	fp, fp, #1
 80079c8:	dd06      	ble.n	80079d8 <__hexnan+0x100>
 80079ca:	4544      	cmp	r4, r8
 80079cc:	d9c1      	bls.n	8007952 <__hexnan+0x7a>
 80079ce:	2300      	movs	r3, #0
 80079d0:	2501      	movs	r5, #1
 80079d2:	f844 3c04 	str.w	r3, [r4, #-4]
 80079d6:	3c04      	subs	r4, #4
 80079d8:	6822      	ldr	r2, [r4, #0]
 80079da:	f000 000f 	and.w	r0, r0, #15
 80079de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80079e2:	6020      	str	r0, [r4, #0]
 80079e4:	e7b5      	b.n	8007952 <__hexnan+0x7a>
 80079e6:	2508      	movs	r5, #8
 80079e8:	e7b3      	b.n	8007952 <__hexnan+0x7a>
 80079ea:	9b01      	ldr	r3, [sp, #4]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d0dd      	beq.n	80079ac <__hexnan+0xd4>
 80079f0:	f04f 32ff 	mov.w	r2, #4294967295
 80079f4:	f1c3 0320 	rsb	r3, r3, #32
 80079f8:	40da      	lsrs	r2, r3
 80079fa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80079fe:	4013      	ands	r3, r2
 8007a00:	f846 3c04 	str.w	r3, [r6, #-4]
 8007a04:	e7d2      	b.n	80079ac <__hexnan+0xd4>
 8007a06:	3f04      	subs	r7, #4
 8007a08:	e7d0      	b.n	80079ac <__hexnan+0xd4>
 8007a0a:	2004      	movs	r0, #4
 8007a0c:	e7d5      	b.n	80079ba <__hexnan+0xe2>

08007a0e <__ascii_mbtowc>:
 8007a0e:	b082      	sub	sp, #8
 8007a10:	b901      	cbnz	r1, 8007a14 <__ascii_mbtowc+0x6>
 8007a12:	a901      	add	r1, sp, #4
 8007a14:	b142      	cbz	r2, 8007a28 <__ascii_mbtowc+0x1a>
 8007a16:	b14b      	cbz	r3, 8007a2c <__ascii_mbtowc+0x1e>
 8007a18:	7813      	ldrb	r3, [r2, #0]
 8007a1a:	600b      	str	r3, [r1, #0]
 8007a1c:	7812      	ldrb	r2, [r2, #0]
 8007a1e:	1e10      	subs	r0, r2, #0
 8007a20:	bf18      	it	ne
 8007a22:	2001      	movne	r0, #1
 8007a24:	b002      	add	sp, #8
 8007a26:	4770      	bx	lr
 8007a28:	4610      	mov	r0, r2
 8007a2a:	e7fb      	b.n	8007a24 <__ascii_mbtowc+0x16>
 8007a2c:	f06f 0001 	mvn.w	r0, #1
 8007a30:	e7f8      	b.n	8007a24 <__ascii_mbtowc+0x16>

08007a32 <_realloc_r>:
 8007a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a36:	4607      	mov	r7, r0
 8007a38:	4614      	mov	r4, r2
 8007a3a:	460d      	mov	r5, r1
 8007a3c:	b921      	cbnz	r1, 8007a48 <_realloc_r+0x16>
 8007a3e:	4611      	mov	r1, r2
 8007a40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a44:	f7fd be8e 	b.w	8005764 <_malloc_r>
 8007a48:	b92a      	cbnz	r2, 8007a56 <_realloc_r+0x24>
 8007a4a:	f7fd fe19 	bl	8005680 <_free_r>
 8007a4e:	4625      	mov	r5, r4
 8007a50:	4628      	mov	r0, r5
 8007a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a56:	f000 f840 	bl	8007ada <_malloc_usable_size_r>
 8007a5a:	4284      	cmp	r4, r0
 8007a5c:	4606      	mov	r6, r0
 8007a5e:	d802      	bhi.n	8007a66 <_realloc_r+0x34>
 8007a60:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007a64:	d8f4      	bhi.n	8007a50 <_realloc_r+0x1e>
 8007a66:	4621      	mov	r1, r4
 8007a68:	4638      	mov	r0, r7
 8007a6a:	f7fd fe7b 	bl	8005764 <_malloc_r>
 8007a6e:	4680      	mov	r8, r0
 8007a70:	b908      	cbnz	r0, 8007a76 <_realloc_r+0x44>
 8007a72:	4645      	mov	r5, r8
 8007a74:	e7ec      	b.n	8007a50 <_realloc_r+0x1e>
 8007a76:	42b4      	cmp	r4, r6
 8007a78:	4622      	mov	r2, r4
 8007a7a:	4629      	mov	r1, r5
 8007a7c:	bf28      	it	cs
 8007a7e:	4632      	movcs	r2, r6
 8007a80:	f7fc ff8d 	bl	800499e <memcpy>
 8007a84:	4629      	mov	r1, r5
 8007a86:	4638      	mov	r0, r7
 8007a88:	f7fd fdfa 	bl	8005680 <_free_r>
 8007a8c:	e7f1      	b.n	8007a72 <_realloc_r+0x40>

08007a8e <__ascii_wctomb>:
 8007a8e:	4603      	mov	r3, r0
 8007a90:	4608      	mov	r0, r1
 8007a92:	b141      	cbz	r1, 8007aa6 <__ascii_wctomb+0x18>
 8007a94:	2aff      	cmp	r2, #255	@ 0xff
 8007a96:	d904      	bls.n	8007aa2 <__ascii_wctomb+0x14>
 8007a98:	228a      	movs	r2, #138	@ 0x8a
 8007a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a9e:	601a      	str	r2, [r3, #0]
 8007aa0:	4770      	bx	lr
 8007aa2:	2001      	movs	r0, #1
 8007aa4:	700a      	strb	r2, [r1, #0]
 8007aa6:	4770      	bx	lr

08007aa8 <fiprintf>:
 8007aa8:	b40e      	push	{r1, r2, r3}
 8007aaa:	b503      	push	{r0, r1, lr}
 8007aac:	4601      	mov	r1, r0
 8007aae:	ab03      	add	r3, sp, #12
 8007ab0:	4805      	ldr	r0, [pc, #20]	@ (8007ac8 <fiprintf+0x20>)
 8007ab2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ab6:	6800      	ldr	r0, [r0, #0]
 8007ab8:	9301      	str	r3, [sp, #4]
 8007aba:	f000 f83d 	bl	8007b38 <_vfiprintf_r>
 8007abe:	b002      	add	sp, #8
 8007ac0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ac4:	b003      	add	sp, #12
 8007ac6:	4770      	bx	lr
 8007ac8:	20000018 	.word	0x20000018

08007acc <abort>:
 8007acc:	2006      	movs	r0, #6
 8007ace:	b508      	push	{r3, lr}
 8007ad0:	f000 fa06 	bl	8007ee0 <raise>
 8007ad4:	2001      	movs	r0, #1
 8007ad6:	f7f9 ff22 	bl	800191e <_exit>

08007ada <_malloc_usable_size_r>:
 8007ada:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ade:	1f18      	subs	r0, r3, #4
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	bfbc      	itt	lt
 8007ae4:	580b      	ldrlt	r3, [r1, r0]
 8007ae6:	18c0      	addlt	r0, r0, r3
 8007ae8:	4770      	bx	lr

08007aea <__sfputc_r>:
 8007aea:	6893      	ldr	r3, [r2, #8]
 8007aec:	b410      	push	{r4}
 8007aee:	3b01      	subs	r3, #1
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	6093      	str	r3, [r2, #8]
 8007af4:	da07      	bge.n	8007b06 <__sfputc_r+0x1c>
 8007af6:	6994      	ldr	r4, [r2, #24]
 8007af8:	42a3      	cmp	r3, r4
 8007afa:	db01      	blt.n	8007b00 <__sfputc_r+0x16>
 8007afc:	290a      	cmp	r1, #10
 8007afe:	d102      	bne.n	8007b06 <__sfputc_r+0x1c>
 8007b00:	bc10      	pop	{r4}
 8007b02:	f000 b931 	b.w	8007d68 <__swbuf_r>
 8007b06:	6813      	ldr	r3, [r2, #0]
 8007b08:	1c58      	adds	r0, r3, #1
 8007b0a:	6010      	str	r0, [r2, #0]
 8007b0c:	7019      	strb	r1, [r3, #0]
 8007b0e:	4608      	mov	r0, r1
 8007b10:	bc10      	pop	{r4}
 8007b12:	4770      	bx	lr

08007b14 <__sfputs_r>:
 8007b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b16:	4606      	mov	r6, r0
 8007b18:	460f      	mov	r7, r1
 8007b1a:	4614      	mov	r4, r2
 8007b1c:	18d5      	adds	r5, r2, r3
 8007b1e:	42ac      	cmp	r4, r5
 8007b20:	d101      	bne.n	8007b26 <__sfputs_r+0x12>
 8007b22:	2000      	movs	r0, #0
 8007b24:	e007      	b.n	8007b36 <__sfputs_r+0x22>
 8007b26:	463a      	mov	r2, r7
 8007b28:	4630      	mov	r0, r6
 8007b2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b2e:	f7ff ffdc 	bl	8007aea <__sfputc_r>
 8007b32:	1c43      	adds	r3, r0, #1
 8007b34:	d1f3      	bne.n	8007b1e <__sfputs_r+0xa>
 8007b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007b38 <_vfiprintf_r>:
 8007b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b3c:	460d      	mov	r5, r1
 8007b3e:	4614      	mov	r4, r2
 8007b40:	4698      	mov	r8, r3
 8007b42:	4606      	mov	r6, r0
 8007b44:	b09d      	sub	sp, #116	@ 0x74
 8007b46:	b118      	cbz	r0, 8007b50 <_vfiprintf_r+0x18>
 8007b48:	6a03      	ldr	r3, [r0, #32]
 8007b4a:	b90b      	cbnz	r3, 8007b50 <_vfiprintf_r+0x18>
 8007b4c:	f7fc fdfe 	bl	800474c <__sinit>
 8007b50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b52:	07d9      	lsls	r1, r3, #31
 8007b54:	d405      	bmi.n	8007b62 <_vfiprintf_r+0x2a>
 8007b56:	89ab      	ldrh	r3, [r5, #12]
 8007b58:	059a      	lsls	r2, r3, #22
 8007b5a:	d402      	bmi.n	8007b62 <_vfiprintf_r+0x2a>
 8007b5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b5e:	f7fc ff0e 	bl	800497e <__retarget_lock_acquire_recursive>
 8007b62:	89ab      	ldrh	r3, [r5, #12]
 8007b64:	071b      	lsls	r3, r3, #28
 8007b66:	d501      	bpl.n	8007b6c <_vfiprintf_r+0x34>
 8007b68:	692b      	ldr	r3, [r5, #16]
 8007b6a:	b99b      	cbnz	r3, 8007b94 <_vfiprintf_r+0x5c>
 8007b6c:	4629      	mov	r1, r5
 8007b6e:	4630      	mov	r0, r6
 8007b70:	f000 f938 	bl	8007de4 <__swsetup_r>
 8007b74:	b170      	cbz	r0, 8007b94 <_vfiprintf_r+0x5c>
 8007b76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b78:	07dc      	lsls	r4, r3, #31
 8007b7a:	d504      	bpl.n	8007b86 <_vfiprintf_r+0x4e>
 8007b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b80:	b01d      	add	sp, #116	@ 0x74
 8007b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b86:	89ab      	ldrh	r3, [r5, #12]
 8007b88:	0598      	lsls	r0, r3, #22
 8007b8a:	d4f7      	bmi.n	8007b7c <_vfiprintf_r+0x44>
 8007b8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b8e:	f7fc fef7 	bl	8004980 <__retarget_lock_release_recursive>
 8007b92:	e7f3      	b.n	8007b7c <_vfiprintf_r+0x44>
 8007b94:	2300      	movs	r3, #0
 8007b96:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b98:	2320      	movs	r3, #32
 8007b9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007b9e:	2330      	movs	r3, #48	@ 0x30
 8007ba0:	f04f 0901 	mov.w	r9, #1
 8007ba4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ba8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007d54 <_vfiprintf_r+0x21c>
 8007bac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007bb0:	4623      	mov	r3, r4
 8007bb2:	469a      	mov	sl, r3
 8007bb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bb8:	b10a      	cbz	r2, 8007bbe <_vfiprintf_r+0x86>
 8007bba:	2a25      	cmp	r2, #37	@ 0x25
 8007bbc:	d1f9      	bne.n	8007bb2 <_vfiprintf_r+0x7a>
 8007bbe:	ebba 0b04 	subs.w	fp, sl, r4
 8007bc2:	d00b      	beq.n	8007bdc <_vfiprintf_r+0xa4>
 8007bc4:	465b      	mov	r3, fp
 8007bc6:	4622      	mov	r2, r4
 8007bc8:	4629      	mov	r1, r5
 8007bca:	4630      	mov	r0, r6
 8007bcc:	f7ff ffa2 	bl	8007b14 <__sfputs_r>
 8007bd0:	3001      	adds	r0, #1
 8007bd2:	f000 80a7 	beq.w	8007d24 <_vfiprintf_r+0x1ec>
 8007bd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bd8:	445a      	add	r2, fp
 8007bda:	9209      	str	r2, [sp, #36]	@ 0x24
 8007bdc:	f89a 3000 	ldrb.w	r3, [sl]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f000 809f 	beq.w	8007d24 <_vfiprintf_r+0x1ec>
 8007be6:	2300      	movs	r3, #0
 8007be8:	f04f 32ff 	mov.w	r2, #4294967295
 8007bec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bf0:	f10a 0a01 	add.w	sl, sl, #1
 8007bf4:	9304      	str	r3, [sp, #16]
 8007bf6:	9307      	str	r3, [sp, #28]
 8007bf8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007bfc:	931a      	str	r3, [sp, #104]	@ 0x68
 8007bfe:	4654      	mov	r4, sl
 8007c00:	2205      	movs	r2, #5
 8007c02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c06:	4853      	ldr	r0, [pc, #332]	@ (8007d54 <_vfiprintf_r+0x21c>)
 8007c08:	f7fc febb 	bl	8004982 <memchr>
 8007c0c:	9a04      	ldr	r2, [sp, #16]
 8007c0e:	b9d8      	cbnz	r0, 8007c48 <_vfiprintf_r+0x110>
 8007c10:	06d1      	lsls	r1, r2, #27
 8007c12:	bf44      	itt	mi
 8007c14:	2320      	movmi	r3, #32
 8007c16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c1a:	0713      	lsls	r3, r2, #28
 8007c1c:	bf44      	itt	mi
 8007c1e:	232b      	movmi	r3, #43	@ 0x2b
 8007c20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c24:	f89a 3000 	ldrb.w	r3, [sl]
 8007c28:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c2a:	d015      	beq.n	8007c58 <_vfiprintf_r+0x120>
 8007c2c:	4654      	mov	r4, sl
 8007c2e:	2000      	movs	r0, #0
 8007c30:	f04f 0c0a 	mov.w	ip, #10
 8007c34:	9a07      	ldr	r2, [sp, #28]
 8007c36:	4621      	mov	r1, r4
 8007c38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c3c:	3b30      	subs	r3, #48	@ 0x30
 8007c3e:	2b09      	cmp	r3, #9
 8007c40:	d94b      	bls.n	8007cda <_vfiprintf_r+0x1a2>
 8007c42:	b1b0      	cbz	r0, 8007c72 <_vfiprintf_r+0x13a>
 8007c44:	9207      	str	r2, [sp, #28]
 8007c46:	e014      	b.n	8007c72 <_vfiprintf_r+0x13a>
 8007c48:	eba0 0308 	sub.w	r3, r0, r8
 8007c4c:	fa09 f303 	lsl.w	r3, r9, r3
 8007c50:	4313      	orrs	r3, r2
 8007c52:	46a2      	mov	sl, r4
 8007c54:	9304      	str	r3, [sp, #16]
 8007c56:	e7d2      	b.n	8007bfe <_vfiprintf_r+0xc6>
 8007c58:	9b03      	ldr	r3, [sp, #12]
 8007c5a:	1d19      	adds	r1, r3, #4
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	9103      	str	r1, [sp, #12]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	bfbb      	ittet	lt
 8007c64:	425b      	neglt	r3, r3
 8007c66:	f042 0202 	orrlt.w	r2, r2, #2
 8007c6a:	9307      	strge	r3, [sp, #28]
 8007c6c:	9307      	strlt	r3, [sp, #28]
 8007c6e:	bfb8      	it	lt
 8007c70:	9204      	strlt	r2, [sp, #16]
 8007c72:	7823      	ldrb	r3, [r4, #0]
 8007c74:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c76:	d10a      	bne.n	8007c8e <_vfiprintf_r+0x156>
 8007c78:	7863      	ldrb	r3, [r4, #1]
 8007c7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c7c:	d132      	bne.n	8007ce4 <_vfiprintf_r+0x1ac>
 8007c7e:	9b03      	ldr	r3, [sp, #12]
 8007c80:	3402      	adds	r4, #2
 8007c82:	1d1a      	adds	r2, r3, #4
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	9203      	str	r2, [sp, #12]
 8007c88:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007c8c:	9305      	str	r3, [sp, #20]
 8007c8e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007d58 <_vfiprintf_r+0x220>
 8007c92:	2203      	movs	r2, #3
 8007c94:	4650      	mov	r0, sl
 8007c96:	7821      	ldrb	r1, [r4, #0]
 8007c98:	f7fc fe73 	bl	8004982 <memchr>
 8007c9c:	b138      	cbz	r0, 8007cae <_vfiprintf_r+0x176>
 8007c9e:	2240      	movs	r2, #64	@ 0x40
 8007ca0:	9b04      	ldr	r3, [sp, #16]
 8007ca2:	eba0 000a 	sub.w	r0, r0, sl
 8007ca6:	4082      	lsls	r2, r0
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	3401      	adds	r4, #1
 8007cac:	9304      	str	r3, [sp, #16]
 8007cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cb2:	2206      	movs	r2, #6
 8007cb4:	4829      	ldr	r0, [pc, #164]	@ (8007d5c <_vfiprintf_r+0x224>)
 8007cb6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007cba:	f7fc fe62 	bl	8004982 <memchr>
 8007cbe:	2800      	cmp	r0, #0
 8007cc0:	d03f      	beq.n	8007d42 <_vfiprintf_r+0x20a>
 8007cc2:	4b27      	ldr	r3, [pc, #156]	@ (8007d60 <_vfiprintf_r+0x228>)
 8007cc4:	bb1b      	cbnz	r3, 8007d0e <_vfiprintf_r+0x1d6>
 8007cc6:	9b03      	ldr	r3, [sp, #12]
 8007cc8:	3307      	adds	r3, #7
 8007cca:	f023 0307 	bic.w	r3, r3, #7
 8007cce:	3308      	adds	r3, #8
 8007cd0:	9303      	str	r3, [sp, #12]
 8007cd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cd4:	443b      	add	r3, r7
 8007cd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cd8:	e76a      	b.n	8007bb0 <_vfiprintf_r+0x78>
 8007cda:	460c      	mov	r4, r1
 8007cdc:	2001      	movs	r0, #1
 8007cde:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ce2:	e7a8      	b.n	8007c36 <_vfiprintf_r+0xfe>
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	f04f 0c0a 	mov.w	ip, #10
 8007cea:	4619      	mov	r1, r3
 8007cec:	3401      	adds	r4, #1
 8007cee:	9305      	str	r3, [sp, #20]
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cf6:	3a30      	subs	r2, #48	@ 0x30
 8007cf8:	2a09      	cmp	r2, #9
 8007cfa:	d903      	bls.n	8007d04 <_vfiprintf_r+0x1cc>
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d0c6      	beq.n	8007c8e <_vfiprintf_r+0x156>
 8007d00:	9105      	str	r1, [sp, #20]
 8007d02:	e7c4      	b.n	8007c8e <_vfiprintf_r+0x156>
 8007d04:	4604      	mov	r4, r0
 8007d06:	2301      	movs	r3, #1
 8007d08:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d0c:	e7f0      	b.n	8007cf0 <_vfiprintf_r+0x1b8>
 8007d0e:	ab03      	add	r3, sp, #12
 8007d10:	9300      	str	r3, [sp, #0]
 8007d12:	462a      	mov	r2, r5
 8007d14:	4630      	mov	r0, r6
 8007d16:	4b13      	ldr	r3, [pc, #76]	@ (8007d64 <_vfiprintf_r+0x22c>)
 8007d18:	a904      	add	r1, sp, #16
 8007d1a:	f7fb fec5 	bl	8003aa8 <_printf_float>
 8007d1e:	4607      	mov	r7, r0
 8007d20:	1c78      	adds	r0, r7, #1
 8007d22:	d1d6      	bne.n	8007cd2 <_vfiprintf_r+0x19a>
 8007d24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d26:	07d9      	lsls	r1, r3, #31
 8007d28:	d405      	bmi.n	8007d36 <_vfiprintf_r+0x1fe>
 8007d2a:	89ab      	ldrh	r3, [r5, #12]
 8007d2c:	059a      	lsls	r2, r3, #22
 8007d2e:	d402      	bmi.n	8007d36 <_vfiprintf_r+0x1fe>
 8007d30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d32:	f7fc fe25 	bl	8004980 <__retarget_lock_release_recursive>
 8007d36:	89ab      	ldrh	r3, [r5, #12]
 8007d38:	065b      	lsls	r3, r3, #25
 8007d3a:	f53f af1f 	bmi.w	8007b7c <_vfiprintf_r+0x44>
 8007d3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d40:	e71e      	b.n	8007b80 <_vfiprintf_r+0x48>
 8007d42:	ab03      	add	r3, sp, #12
 8007d44:	9300      	str	r3, [sp, #0]
 8007d46:	462a      	mov	r2, r5
 8007d48:	4630      	mov	r0, r6
 8007d4a:	4b06      	ldr	r3, [pc, #24]	@ (8007d64 <_vfiprintf_r+0x22c>)
 8007d4c:	a904      	add	r1, sp, #16
 8007d4e:	f7fc f949 	bl	8003fe4 <_printf_i>
 8007d52:	e7e4      	b.n	8007d1e <_vfiprintf_r+0x1e6>
 8007d54:	080081db 	.word	0x080081db
 8007d58:	080081e1 	.word	0x080081e1
 8007d5c:	080081e5 	.word	0x080081e5
 8007d60:	08003aa9 	.word	0x08003aa9
 8007d64:	08007b15 	.word	0x08007b15

08007d68 <__swbuf_r>:
 8007d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d6a:	460e      	mov	r6, r1
 8007d6c:	4614      	mov	r4, r2
 8007d6e:	4605      	mov	r5, r0
 8007d70:	b118      	cbz	r0, 8007d7a <__swbuf_r+0x12>
 8007d72:	6a03      	ldr	r3, [r0, #32]
 8007d74:	b90b      	cbnz	r3, 8007d7a <__swbuf_r+0x12>
 8007d76:	f7fc fce9 	bl	800474c <__sinit>
 8007d7a:	69a3      	ldr	r3, [r4, #24]
 8007d7c:	60a3      	str	r3, [r4, #8]
 8007d7e:	89a3      	ldrh	r3, [r4, #12]
 8007d80:	071a      	lsls	r2, r3, #28
 8007d82:	d501      	bpl.n	8007d88 <__swbuf_r+0x20>
 8007d84:	6923      	ldr	r3, [r4, #16]
 8007d86:	b943      	cbnz	r3, 8007d9a <__swbuf_r+0x32>
 8007d88:	4621      	mov	r1, r4
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	f000 f82a 	bl	8007de4 <__swsetup_r>
 8007d90:	b118      	cbz	r0, 8007d9a <__swbuf_r+0x32>
 8007d92:	f04f 37ff 	mov.w	r7, #4294967295
 8007d96:	4638      	mov	r0, r7
 8007d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d9a:	6823      	ldr	r3, [r4, #0]
 8007d9c:	6922      	ldr	r2, [r4, #16]
 8007d9e:	b2f6      	uxtb	r6, r6
 8007da0:	1a98      	subs	r0, r3, r2
 8007da2:	6963      	ldr	r3, [r4, #20]
 8007da4:	4637      	mov	r7, r6
 8007da6:	4283      	cmp	r3, r0
 8007da8:	dc05      	bgt.n	8007db6 <__swbuf_r+0x4e>
 8007daa:	4621      	mov	r1, r4
 8007dac:	4628      	mov	r0, r5
 8007dae:	f7ff fa59 	bl	8007264 <_fflush_r>
 8007db2:	2800      	cmp	r0, #0
 8007db4:	d1ed      	bne.n	8007d92 <__swbuf_r+0x2a>
 8007db6:	68a3      	ldr	r3, [r4, #8]
 8007db8:	3b01      	subs	r3, #1
 8007dba:	60a3      	str	r3, [r4, #8]
 8007dbc:	6823      	ldr	r3, [r4, #0]
 8007dbe:	1c5a      	adds	r2, r3, #1
 8007dc0:	6022      	str	r2, [r4, #0]
 8007dc2:	701e      	strb	r6, [r3, #0]
 8007dc4:	6962      	ldr	r2, [r4, #20]
 8007dc6:	1c43      	adds	r3, r0, #1
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d004      	beq.n	8007dd6 <__swbuf_r+0x6e>
 8007dcc:	89a3      	ldrh	r3, [r4, #12]
 8007dce:	07db      	lsls	r3, r3, #31
 8007dd0:	d5e1      	bpl.n	8007d96 <__swbuf_r+0x2e>
 8007dd2:	2e0a      	cmp	r6, #10
 8007dd4:	d1df      	bne.n	8007d96 <__swbuf_r+0x2e>
 8007dd6:	4621      	mov	r1, r4
 8007dd8:	4628      	mov	r0, r5
 8007dda:	f7ff fa43 	bl	8007264 <_fflush_r>
 8007dde:	2800      	cmp	r0, #0
 8007de0:	d0d9      	beq.n	8007d96 <__swbuf_r+0x2e>
 8007de2:	e7d6      	b.n	8007d92 <__swbuf_r+0x2a>

08007de4 <__swsetup_r>:
 8007de4:	b538      	push	{r3, r4, r5, lr}
 8007de6:	4b29      	ldr	r3, [pc, #164]	@ (8007e8c <__swsetup_r+0xa8>)
 8007de8:	4605      	mov	r5, r0
 8007dea:	6818      	ldr	r0, [r3, #0]
 8007dec:	460c      	mov	r4, r1
 8007dee:	b118      	cbz	r0, 8007df8 <__swsetup_r+0x14>
 8007df0:	6a03      	ldr	r3, [r0, #32]
 8007df2:	b90b      	cbnz	r3, 8007df8 <__swsetup_r+0x14>
 8007df4:	f7fc fcaa 	bl	800474c <__sinit>
 8007df8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dfc:	0719      	lsls	r1, r3, #28
 8007dfe:	d422      	bmi.n	8007e46 <__swsetup_r+0x62>
 8007e00:	06da      	lsls	r2, r3, #27
 8007e02:	d407      	bmi.n	8007e14 <__swsetup_r+0x30>
 8007e04:	2209      	movs	r2, #9
 8007e06:	602a      	str	r2, [r5, #0]
 8007e08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e10:	81a3      	strh	r3, [r4, #12]
 8007e12:	e033      	b.n	8007e7c <__swsetup_r+0x98>
 8007e14:	0758      	lsls	r0, r3, #29
 8007e16:	d512      	bpl.n	8007e3e <__swsetup_r+0x5a>
 8007e18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e1a:	b141      	cbz	r1, 8007e2e <__swsetup_r+0x4a>
 8007e1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e20:	4299      	cmp	r1, r3
 8007e22:	d002      	beq.n	8007e2a <__swsetup_r+0x46>
 8007e24:	4628      	mov	r0, r5
 8007e26:	f7fd fc2b 	bl	8005680 <_free_r>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e2e:	89a3      	ldrh	r3, [r4, #12]
 8007e30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007e34:	81a3      	strh	r3, [r4, #12]
 8007e36:	2300      	movs	r3, #0
 8007e38:	6063      	str	r3, [r4, #4]
 8007e3a:	6923      	ldr	r3, [r4, #16]
 8007e3c:	6023      	str	r3, [r4, #0]
 8007e3e:	89a3      	ldrh	r3, [r4, #12]
 8007e40:	f043 0308 	orr.w	r3, r3, #8
 8007e44:	81a3      	strh	r3, [r4, #12]
 8007e46:	6923      	ldr	r3, [r4, #16]
 8007e48:	b94b      	cbnz	r3, 8007e5e <__swsetup_r+0x7a>
 8007e4a:	89a3      	ldrh	r3, [r4, #12]
 8007e4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007e50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e54:	d003      	beq.n	8007e5e <__swsetup_r+0x7a>
 8007e56:	4621      	mov	r1, r4
 8007e58:	4628      	mov	r0, r5
 8007e5a:	f000 f882 	bl	8007f62 <__smakebuf_r>
 8007e5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e62:	f013 0201 	ands.w	r2, r3, #1
 8007e66:	d00a      	beq.n	8007e7e <__swsetup_r+0x9a>
 8007e68:	2200      	movs	r2, #0
 8007e6a:	60a2      	str	r2, [r4, #8]
 8007e6c:	6962      	ldr	r2, [r4, #20]
 8007e6e:	4252      	negs	r2, r2
 8007e70:	61a2      	str	r2, [r4, #24]
 8007e72:	6922      	ldr	r2, [r4, #16]
 8007e74:	b942      	cbnz	r2, 8007e88 <__swsetup_r+0xa4>
 8007e76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007e7a:	d1c5      	bne.n	8007e08 <__swsetup_r+0x24>
 8007e7c:	bd38      	pop	{r3, r4, r5, pc}
 8007e7e:	0799      	lsls	r1, r3, #30
 8007e80:	bf58      	it	pl
 8007e82:	6962      	ldrpl	r2, [r4, #20]
 8007e84:	60a2      	str	r2, [r4, #8]
 8007e86:	e7f4      	b.n	8007e72 <__swsetup_r+0x8e>
 8007e88:	2000      	movs	r0, #0
 8007e8a:	e7f7      	b.n	8007e7c <__swsetup_r+0x98>
 8007e8c:	20000018 	.word	0x20000018

08007e90 <_raise_r>:
 8007e90:	291f      	cmp	r1, #31
 8007e92:	b538      	push	{r3, r4, r5, lr}
 8007e94:	4605      	mov	r5, r0
 8007e96:	460c      	mov	r4, r1
 8007e98:	d904      	bls.n	8007ea4 <_raise_r+0x14>
 8007e9a:	2316      	movs	r3, #22
 8007e9c:	6003      	str	r3, [r0, #0]
 8007e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea2:	bd38      	pop	{r3, r4, r5, pc}
 8007ea4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007ea6:	b112      	cbz	r2, 8007eae <_raise_r+0x1e>
 8007ea8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007eac:	b94b      	cbnz	r3, 8007ec2 <_raise_r+0x32>
 8007eae:	4628      	mov	r0, r5
 8007eb0:	f000 f830 	bl	8007f14 <_getpid_r>
 8007eb4:	4622      	mov	r2, r4
 8007eb6:	4601      	mov	r1, r0
 8007eb8:	4628      	mov	r0, r5
 8007eba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ebe:	f000 b817 	b.w	8007ef0 <_kill_r>
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d00a      	beq.n	8007edc <_raise_r+0x4c>
 8007ec6:	1c59      	adds	r1, r3, #1
 8007ec8:	d103      	bne.n	8007ed2 <_raise_r+0x42>
 8007eca:	2316      	movs	r3, #22
 8007ecc:	6003      	str	r3, [r0, #0]
 8007ece:	2001      	movs	r0, #1
 8007ed0:	e7e7      	b.n	8007ea2 <_raise_r+0x12>
 8007ed2:	2100      	movs	r1, #0
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007eda:	4798      	blx	r3
 8007edc:	2000      	movs	r0, #0
 8007ede:	e7e0      	b.n	8007ea2 <_raise_r+0x12>

08007ee0 <raise>:
 8007ee0:	4b02      	ldr	r3, [pc, #8]	@ (8007eec <raise+0xc>)
 8007ee2:	4601      	mov	r1, r0
 8007ee4:	6818      	ldr	r0, [r3, #0]
 8007ee6:	f7ff bfd3 	b.w	8007e90 <_raise_r>
 8007eea:	bf00      	nop
 8007eec:	20000018 	.word	0x20000018

08007ef0 <_kill_r>:
 8007ef0:	b538      	push	{r3, r4, r5, lr}
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	4d06      	ldr	r5, [pc, #24]	@ (8007f10 <_kill_r+0x20>)
 8007ef6:	4604      	mov	r4, r0
 8007ef8:	4608      	mov	r0, r1
 8007efa:	4611      	mov	r1, r2
 8007efc:	602b      	str	r3, [r5, #0]
 8007efe:	f7f9 fcfe 	bl	80018fe <_kill>
 8007f02:	1c43      	adds	r3, r0, #1
 8007f04:	d102      	bne.n	8007f0c <_kill_r+0x1c>
 8007f06:	682b      	ldr	r3, [r5, #0]
 8007f08:	b103      	cbz	r3, 8007f0c <_kill_r+0x1c>
 8007f0a:	6023      	str	r3, [r4, #0]
 8007f0c:	bd38      	pop	{r3, r4, r5, pc}
 8007f0e:	bf00      	nop
 8007f10:	200003e8 	.word	0x200003e8

08007f14 <_getpid_r>:
 8007f14:	f7f9 bcec 	b.w	80018f0 <_getpid>

08007f18 <__swhatbuf_r>:
 8007f18:	b570      	push	{r4, r5, r6, lr}
 8007f1a:	460c      	mov	r4, r1
 8007f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f20:	4615      	mov	r5, r2
 8007f22:	2900      	cmp	r1, #0
 8007f24:	461e      	mov	r6, r3
 8007f26:	b096      	sub	sp, #88	@ 0x58
 8007f28:	da0c      	bge.n	8007f44 <__swhatbuf_r+0x2c>
 8007f2a:	89a3      	ldrh	r3, [r4, #12]
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007f32:	bf14      	ite	ne
 8007f34:	2340      	movne	r3, #64	@ 0x40
 8007f36:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007f3a:	2000      	movs	r0, #0
 8007f3c:	6031      	str	r1, [r6, #0]
 8007f3e:	602b      	str	r3, [r5, #0]
 8007f40:	b016      	add	sp, #88	@ 0x58
 8007f42:	bd70      	pop	{r4, r5, r6, pc}
 8007f44:	466a      	mov	r2, sp
 8007f46:	f000 f849 	bl	8007fdc <_fstat_r>
 8007f4a:	2800      	cmp	r0, #0
 8007f4c:	dbed      	blt.n	8007f2a <__swhatbuf_r+0x12>
 8007f4e:	9901      	ldr	r1, [sp, #4]
 8007f50:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007f54:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007f58:	4259      	negs	r1, r3
 8007f5a:	4159      	adcs	r1, r3
 8007f5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f60:	e7eb      	b.n	8007f3a <__swhatbuf_r+0x22>

08007f62 <__smakebuf_r>:
 8007f62:	898b      	ldrh	r3, [r1, #12]
 8007f64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f66:	079d      	lsls	r5, r3, #30
 8007f68:	4606      	mov	r6, r0
 8007f6a:	460c      	mov	r4, r1
 8007f6c:	d507      	bpl.n	8007f7e <__smakebuf_r+0x1c>
 8007f6e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007f72:	6023      	str	r3, [r4, #0]
 8007f74:	6123      	str	r3, [r4, #16]
 8007f76:	2301      	movs	r3, #1
 8007f78:	6163      	str	r3, [r4, #20]
 8007f7a:	b003      	add	sp, #12
 8007f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f7e:	466a      	mov	r2, sp
 8007f80:	ab01      	add	r3, sp, #4
 8007f82:	f7ff ffc9 	bl	8007f18 <__swhatbuf_r>
 8007f86:	9f00      	ldr	r7, [sp, #0]
 8007f88:	4605      	mov	r5, r0
 8007f8a:	4639      	mov	r1, r7
 8007f8c:	4630      	mov	r0, r6
 8007f8e:	f7fd fbe9 	bl	8005764 <_malloc_r>
 8007f92:	b948      	cbnz	r0, 8007fa8 <__smakebuf_r+0x46>
 8007f94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f98:	059a      	lsls	r2, r3, #22
 8007f9a:	d4ee      	bmi.n	8007f7a <__smakebuf_r+0x18>
 8007f9c:	f023 0303 	bic.w	r3, r3, #3
 8007fa0:	f043 0302 	orr.w	r3, r3, #2
 8007fa4:	81a3      	strh	r3, [r4, #12]
 8007fa6:	e7e2      	b.n	8007f6e <__smakebuf_r+0xc>
 8007fa8:	89a3      	ldrh	r3, [r4, #12]
 8007faa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007fae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fb2:	81a3      	strh	r3, [r4, #12]
 8007fb4:	9b01      	ldr	r3, [sp, #4]
 8007fb6:	6020      	str	r0, [r4, #0]
 8007fb8:	b15b      	cbz	r3, 8007fd2 <__smakebuf_r+0x70>
 8007fba:	4630      	mov	r0, r6
 8007fbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fc0:	f000 f81e 	bl	8008000 <_isatty_r>
 8007fc4:	b128      	cbz	r0, 8007fd2 <__smakebuf_r+0x70>
 8007fc6:	89a3      	ldrh	r3, [r4, #12]
 8007fc8:	f023 0303 	bic.w	r3, r3, #3
 8007fcc:	f043 0301 	orr.w	r3, r3, #1
 8007fd0:	81a3      	strh	r3, [r4, #12]
 8007fd2:	89a3      	ldrh	r3, [r4, #12]
 8007fd4:	431d      	orrs	r5, r3
 8007fd6:	81a5      	strh	r5, [r4, #12]
 8007fd8:	e7cf      	b.n	8007f7a <__smakebuf_r+0x18>
	...

08007fdc <_fstat_r>:
 8007fdc:	b538      	push	{r3, r4, r5, lr}
 8007fde:	2300      	movs	r3, #0
 8007fe0:	4d06      	ldr	r5, [pc, #24]	@ (8007ffc <_fstat_r+0x20>)
 8007fe2:	4604      	mov	r4, r0
 8007fe4:	4608      	mov	r0, r1
 8007fe6:	4611      	mov	r1, r2
 8007fe8:	602b      	str	r3, [r5, #0]
 8007fea:	f7f9 fce7 	bl	80019bc <_fstat>
 8007fee:	1c43      	adds	r3, r0, #1
 8007ff0:	d102      	bne.n	8007ff8 <_fstat_r+0x1c>
 8007ff2:	682b      	ldr	r3, [r5, #0]
 8007ff4:	b103      	cbz	r3, 8007ff8 <_fstat_r+0x1c>
 8007ff6:	6023      	str	r3, [r4, #0]
 8007ff8:	bd38      	pop	{r3, r4, r5, pc}
 8007ffa:	bf00      	nop
 8007ffc:	200003e8 	.word	0x200003e8

08008000 <_isatty_r>:
 8008000:	b538      	push	{r3, r4, r5, lr}
 8008002:	2300      	movs	r3, #0
 8008004:	4d05      	ldr	r5, [pc, #20]	@ (800801c <_isatty_r+0x1c>)
 8008006:	4604      	mov	r4, r0
 8008008:	4608      	mov	r0, r1
 800800a:	602b      	str	r3, [r5, #0]
 800800c:	f7f9 fce5 	bl	80019da <_isatty>
 8008010:	1c43      	adds	r3, r0, #1
 8008012:	d102      	bne.n	800801a <_isatty_r+0x1a>
 8008014:	682b      	ldr	r3, [r5, #0]
 8008016:	b103      	cbz	r3, 800801a <_isatty_r+0x1a>
 8008018:	6023      	str	r3, [r4, #0]
 800801a:	bd38      	pop	{r3, r4, r5, pc}
 800801c:	200003e8 	.word	0x200003e8

08008020 <_init>:
 8008020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008022:	bf00      	nop
 8008024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008026:	bc08      	pop	{r3}
 8008028:	469e      	mov	lr, r3
 800802a:	4770      	bx	lr

0800802c <_fini>:
 800802c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800802e:	bf00      	nop
 8008030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008032:	bc08      	pop	{r3}
 8008034:	469e      	mov	lr, r3
 8008036:	4770      	bx	lr
